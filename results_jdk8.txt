[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jan 5, 2018 4:08:09 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:336:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:344:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] two warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.3.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.3.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 24 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.2-SNAPSHOT.jar ...
Processing 285 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 18 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 194 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*Benchmark.*
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:21:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441140.501 ops/s
[info] # Warmup Iteration   2: 806399.487 ops/s
[info] # Warmup Iteration   3: 802347.812 ops/s
[info] # Warmup Iteration   4: 802564.980 ops/s
[info] # Warmup Iteration   5: 807021.776 ops/s
[info] Iteration   1: 811183.504 ops/s
[info]                  ·gc.alloc.rate:                   2136.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3928.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 810955.736 ops/s
[info]                  ·gc.alloc.rate:                   2135.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4600.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 810795.937 ops/s
[info]                  ·gc.alloc.rate:                   2134.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3953.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 815038.405 ops/s
[info]                  ·gc.alloc.rate:                   2146.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3936.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 805998.769 ops/s
[info]                  ·gc.alloc.rate:                   2122.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3987.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   810794.470 ±(99.9%) 12356.172 ops/s [Average]
[info]   (min, avg, max) = (805998.769, 810794.470, 815038.405), stdev = 3208.859
[info]   CI (99.9%): [798438.298, 823150.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2135.114 ±(99.9%) 32.463 MB/sec [Average]
[info]   (min, avg, max) = (2122.430, 2135.114, 2146.150), stdev = 8.430
[info]   CI (99.9%): [2102.652, 2167.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2102.957 ±(99.9%) 578.640 MB/sec [Average]
[info]   (min, avg, max) = (2025.132, 2102.957, 2371.522), stdev = 150.271
[info]   CI (99.9%): [1524.317, 2681.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4081.595 ±(99.9%) 1121.375 B/op [Average]
[info]   (min, avg, max) = (3928.843, 4081.595, 4600.974), stdev = 291.218
[info]   CI (99.9%): [2960.220, 5202.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.025, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.226 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (0.162, 0.226, 0.283), stdev = 0.046
[info]   CI (99.9%): [0.050, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson
[info] # Run progress: 0.79% complete, ETA 00:32:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 550966.993 ops/s
[info] # Warmup Iteration   2: 1656356.357 ops/s
[info] # Warmup Iteration   3: 1643292.234 ops/s
[info] # Warmup Iteration   4: 1640727.010 ops/s
[info] # Warmup Iteration   5: 1657846.523 ops/s
[info] Iteration   1: 1653976.991 ops/s
[info]                  ·gc.alloc.rate:                   1177.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1642480.942 ops/s
[info]                  ·gc.alloc.rate:                   1168.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1272.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1651173.324 ops/s
[info]                  ·gc.alloc.rate:                   1175.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1660773.833 ops/s
[info]                  ·gc.alloc.rate:                   1181.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1269.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1658798.047 ops/s
[info]                  ·gc.alloc.rate:                   1180.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson":
[info]   1653440.628 ±(99.9%) 27768.783 ops/s [Average]
[info]   (min, avg, max) = (1642480.942, 1653440.628, 1660773.833), stdev = 7211.465
[info]   CI (99.9%): [1625671.844, 1681209.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate":
[info]   1176.796 ±(99.9%) 19.762 MB/sec [Average]
[info]   (min, avg, max) = (1168.921, 1176.796, 1181.935), stdev = 5.132
[info]   CI (99.9%): [1157.034, 1196.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1133.344 ±(99.9%) 705.455 MB/sec [Average]
[info]   (min, avg, max) = (989.510, 1133.344, 1340.023), stdev = 183.204
[info]   CI (99.9%): [427.889, 1838.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1078.795 ±(99.9%) 675.832 B/op [Average]
[info]   (min, avg, max) = (941.252, 1078.795, 1272.092), stdev = 175.511
[info]   CI (99.9%): [402.963, 1754.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.083, 0.140), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter
[info] # Run progress: 1.59% complete, ETA 00:32:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3361142.992 ops/s
[info] # Warmup Iteration   2: 3883677.096 ops/s
[info] # Warmup Iteration   3: 3934869.995 ops/s
[info] # Warmup Iteration   4: 3924817.582 ops/s
[info] # Warmup Iteration   5: 3937889.492 ops/s
[info] Iteration   1: 3955815.237 ops/s
[info]                  ·gc.alloc.rate:               261.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3973993.449 ops/s
[info]                  ·gc.alloc.rate:      262.615 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3946541.580 ops/s
[info]                  ·gc.alloc.rate:                   260.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3942452.771 ops/s
[info]                  ·gc.alloc.rate:                   260.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3875276.239 ops/s
[info]                  ·gc.alloc.rate:               256.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter":
[info]   3938815.855 ±(99.9%) 144548.461 ops/s [Average]
[info]   (min, avg, max) = (3875276.239, 3938815.855, 3973993.449), stdev = 37538.776
[info]   CI (99.9%): [3794267.395, 4083364.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate":
[info]   260.301 ±(99.9%) 9.549 MB/sec [Average]
[info]   (min, avg, max) = (256.098, 260.301, 262.615), stdev = 2.480
[info]   CI (99.9%): [250.752, 269.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   252.486 ±(99.9%) 559.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 252.486, 335.789), stdev = 145.305
[info]   CI (99.9%): [≈ 0, 812.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   101.150 ±(99.9%) 224.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.150, 136.075), stdev = 58.317
[info]   CI (99.9%): [≈ 0, 325.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.298 ±(99.9%) 2.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.298, 1.428), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.569), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay
[info] # Run progress: 2.38% complete, ETA 00:31:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34207.765 ops/s
[info] # Warmup Iteration   2: 175868.284 ops/s
[info] # Warmup Iteration   3: 178562.979 ops/s
[info] # Warmup Iteration   4: 180614.036 ops/s
[info] # Warmup Iteration   5: 181250.381 ops/s
[info] Iteration   1: 179402.578 ops/s
[info]                  ·gc.alloc.rate:                   1502.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14551.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.548 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 180474.512 ops/s
[info]                  ·gc.alloc.rate:                   1512.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11650.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 181124.474 ops/s
[info]                  ·gc.alloc.rate:                   1517.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14589.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.266 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 179937.423 ops/s
[info]                  ·gc.alloc.rate:                   1507.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11798.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.728 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 180241.249 ops/s
[info]                  ·gc.alloc.rate:                   1510.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14761.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.272 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay":
[info]   180236.047 ±(99.9%) 2458.117 ops/s [Average]
[info]   (min, avg, max) = (179402.578, 180236.047, 181124.474), stdev = 638.365
[info]   CI (99.9%): [177777.930, 182694.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate":
[info]   1510.152 ±(99.9%) 21.265 MB/sec [Average]
[info]   (min, avg, max) = (1502.938, 1510.152, 1517.800), stdev = 5.522
[info]   CI (99.9%): [1488.887, 1531.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.002, 13184.002, 13184.002), stdev = 0.001
[info]   CI (99.9%): [13184.002, 13184.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1542.969 ±(99.9%) 705.712 MB/sec [Average]
[info]   (min, avg, max) = (1336.293, 1542.969, 1691.120), stdev = 183.271
[info]   CI (99.9%): [837.257, 2248.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   13470.263 ±(99.9%) 6147.919 B/op [Average]
[info]   (min, avg, max) = (11650.328, 13470.263, 14761.959), stdev = 1596.595
[info]   CI (99.9%): [7322.344, 19618.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   1.017 ±(99.9%) 1.355 B/op [Average]
[info]   (min, avg, max) = (0.548, 1.017, 1.272), stdev = 0.352
[info]   CI (99.9%): [≈ 0, 2.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson
[info] # Run progress: 3.17% complete, ETA 00:31:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 744840.949 ops/s
[info] # Warmup Iteration   2: 2133515.661 ops/s
[info] # Warmup Iteration   3: 2154467.731 ops/s
[info] # Warmup Iteration   4: 2168660.033 ops/s
[info] # Warmup Iteration   5: 2168212.785 ops/s
[info] Iteration   1: 2148838.746 ops/s
[info]                  ·gc.alloc.rate:                   830.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2181800.184 ops/s
[info]                  ·gc.alloc.rate:               843.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 474.289 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2174713.774 ops/s
[info]                  ·gc.alloc.rate:                   840.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2158451.769 ops/s
[info]                  ·gc.alloc.rate:                   834.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     483.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2169297.673 ops/s
[info]                  ·gc.alloc.rate:                   838.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson":
[info]   2166620.429 ±(99.9%) 50427.637 ops/s [Average]
[info]   (min, avg, max) = (2148838.746, 2166620.429, 2181800.184), stdev = 13095.897
[info]   CI (99.9%): [2116192.792, 2217048.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate":
[info]   837.155 ±(99.9%) 19.546 MB/sec [Average]
[info]   (min, avg, max) = (830.196, 837.155, 843.107), stdev = 5.076
[info]   CI (99.9%): [817.609, 856.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   858.195 ±(99.9%) 695.715 MB/sec [Average]
[info]   (min, avg, max) = (657.691, 858.195, 998.237), stdev = 180.675
[info]   CI (99.9%): [162.480, 1553.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   623.462 ±(99.9%) 508.795 B/op [Average]
[info]   (min, avg, max) = (474.289, 623.462, 724.179), stdev = 132.132
[info]   CI (99.9%): [114.667, 1132.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.090), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter
[info] # Run progress: 3.97% complete, ETA 00:31:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9831714.537 ops/s
[info] # Warmup Iteration   2: 13419081.134 ops/s
[info] # Warmup Iteration   3: 13905334.986 ops/s
[info] # Warmup Iteration   4: 14277457.114 ops/s
[info] # Warmup Iteration   5: 14269521.933 ops/s
[info] Iteration   1: 13988442.472 ops/s
[info]                  ·gc.alloc.rate:                   711.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 14228764.621 ops/s
[info]                  ·gc.alloc.rate:                   723.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14237631.815 ops/s
[info]                  ·gc.alloc.rate:                   723.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14327812.785 ops/s
[info]                  ·gc.alloc.rate:                   728.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14013229.336 ops/s
[info]                  ·gc.alloc.rate:                   712.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter":
[info]   14159176.206 ±(99.9%) 577232.661 ops/s [Average]
[info]   (min, avg, max) = (13988442.472, 14159176.206, 14327812.785), stdev = 149905.489
[info]   CI (99.9%): [13581943.544, 14736408.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   719.763 ±(99.9%) 29.271 MB/sec [Average]
[info]   (min, avg, max) = (711.140, 719.763, 728.324), stdev = 7.601
[info]   CI (99.9%): [690.492, 749.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   735.053 ±(99.9%) 574.481 MB/sec [Average]
[info]   (min, avg, max) = (666.198, 735.053, 1001.912), stdev = 149.191
[info]   CI (99.9%): [160.572, 1309.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   81.665 ±(99.9%) 62.680 B/op [Average]
[info]   (min, avg, max) = (73.539, 81.665, 110.752), stdev = 16.278
[info]   CI (99.9%): [18.986, 144.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.096, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.011, 0.018), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay
[info] # Run progress: 4.76% complete, ETA 00:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71950.801 ops/s
[info] # Warmup Iteration   2: 300905.272 ops/s
[info] # Warmup Iteration   3: 297901.634 ops/s
[info] # Warmup Iteration   4: 304462.459 ops/s
[info] # Warmup Iteration   5: 304158.448 ops/s
[info] Iteration   1: 304509.991 ops/s
[info]                  ·gc.alloc.rate:                   997.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5083.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 304417.366 ops/s
[info]                  ·gc.alloc.rate:                   996.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5112.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 304000.561 ops/s
[info]                  ·gc.alloc.rate:                   995.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5143.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 304483.189 ops/s
[info]                  ·gc.alloc.rate:                   996.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5159.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 304760.055 ops/s
[info]                  ·gc.alloc.rate:                   997.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5179.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay":
[info]   304434.233 ±(99.9%) 1059.192 ops/s [Average]
[info]   (min, avg, max) = (304000.561, 304434.233, 304760.055), stdev = 275.069
[info]   CI (99.9%): [303375.040, 305493.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate":
[info]   996.668 ±(99.9%) 3.598 MB/sec [Average]
[info]   (min, avg, max) = (995.207, 996.668, 997.742), stdev = 0.934
[info]   CI (99.9%): [993.070, 1000.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5152.001, 5152.001, 5152.002), stdev = 0.001
[info]   CI (99.9%): [5152.001, 5152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   993.499 ±(99.9%) 29.058 MB/sec [Average]
[info]   (min, avg, max) = (983.813, 993.499, 1002.989), stdev = 7.546
[info]   CI (99.9%): [964.441, 1022.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5135.613 ±(99.9%) 146.470 B/op [Average]
[info]   (min, avg, max) = (5083.439, 5135.613, 5179.100), stdev = 38.038
[info]   CI (99.9%): [4989.144, 5282.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.387 ±(99.9%) 0.555 B/op [Average]
[info]   (min, avg, max) = (0.215, 0.387, 0.538), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 5.56% complete, ETA 00:30:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1005133.843 ops/s
[info] # Warmup Iteration   2: 1670445.591 ops/s
[info] # Warmup Iteration   3: 1679056.577 ops/s
[info] # Warmup Iteration   4: 1672439.477 ops/s
[info] # Warmup Iteration   5: 1657258.865 ops/s
[info] Iteration   1: 1649306.217 ops/s
[info]                  ·gc.alloc.rate:                   2598.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2588.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1680372.120 ops/s
[info]                  ·gc.alloc.rate:                   2648.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2545.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1676670.553 ops/s
[info]                  ·gc.alloc.rate:                   2642.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2554.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1686491.252 ops/s
[info]                  ·gc.alloc.rate:                   2657.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2223.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1666375.927 ops/s
[info]                  ·gc.alloc.rate:                   2625.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2572.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1671843.214 ±(99.9%) 56080.036 ops/s [Average]
[info]   (min, avg, max) = (1649306.217, 1671843.214, 1686491.252), stdev = 14563.807
[info]   CI (99.9%): [1615763.177, 1727923.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2634.546 ±(99.9%) 88.541 MB/sec [Average]
[info]   (min, avg, max) = (2598.931, 2634.546, 2657.613), stdev = 22.994
[info]   CI (99.9%): [2546.006, 2723.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2480.000, 2480.000, 2480.000), stdev = 0.001
[info]   CI (99.9%): [2480.000, 2480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2651.595 ±(99.9%) 578.796 MB/sec [Average]
[info]   (min, avg, max) = (2382.810, 2651.595, 2723.402), stdev = 150.311
[info]   CI (99.9%): [2072.799, 3230.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2496.741 ±(99.9%) 591.467 B/op [Average]
[info]   (min, avg, max) = (2223.562, 2496.741, 2588.378), stdev = 153.602
[info]   CI (99.9%): [1905.274, 3088.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.187), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.129 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.129, 0.175), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 12.000), stdev = 2.510
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson
[info] # Run progress: 6.35% complete, ETA 00:30:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1016911.727 ops/s
[info] # Warmup Iteration   2: 2545760.228 ops/s
[info] # Warmup Iteration   3: 2639582.736 ops/s
[info] # Warmup Iteration   4: 2631786.447 ops/s
[info] # Warmup Iteration   5: 2638324.455 ops/s
[info] Iteration   1: 2647413.246 ops/s
[info]                  ·gc.alloc.rate:                   1857.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     995.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2636688.579 ops/s
[info]                  ·gc.alloc.rate:                   1849.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1206.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2613786.560 ops/s
[info]                  ·gc.alloc.rate:                   1833.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1018.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2636747.734 ops/s
[info]                  ·gc.alloc.rate:                   1849.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1011.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2615546.078 ops/s
[info]                  ·gc.alloc.rate:                   1834.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson":
[info]   2630036.439 ±(99.9%) 56634.418 ops/s [Average]
[info]   (min, avg, max) = (2613786.560, 2630036.439, 2647413.246), stdev = 14707.779
[info]   CI (99.9%): [2573402.021, 2686670.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate":
[info]   1845.030 ±(99.9%) 39.628 MB/sec [Average]
[info]   (min, avg, max) = (1833.702, 1845.030, 1857.188), stdev = 10.291
[info]   CI (99.9%): [1805.403, 1884.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1824.040 ±(99.9%) 723.805 MB/sec [Average]
[info]   (min, avg, max) = (1675.066, 1824.040, 2037.904), stdev = 187.970
[info]   CI (99.9%): [1100.235, 2547.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1091.608 ±(99.9%) 440.447 B/op [Average]
[info]   (min, avg, max) = (995.738, 1091.608, 1226.177), stdev = 114.383
[info]   CI (99.9%): [651.161, 1532.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.070, 0.088), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter
[info] # Run progress: 7.14% complete, ETA 00:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9729959.807 ops/s
[info] # Warmup Iteration   2: 10072670.157 ops/s
[info] # Warmup Iteration   3: 10426934.486 ops/s
[info] # Warmup Iteration   4: 10440591.561 ops/s
[info] # Warmup Iteration   5: 10402834.310 ops/s
[info] Iteration   1: 10457015.952 ops/s
[info]                  ·gc.alloc.rate:                   1328.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10417505.521 ops/s
[info]                  ·gc.alloc.rate:                   1323.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10450207.143 ops/s
[info]                  ·gc.alloc.rate:                   1328.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10270912.779 ops/s
[info]                  ·gc.alloc.rate:                   1305.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10140477.133 ops/s
[info]                  ·gc.alloc.rate:                   1288.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter":
[info]   10347223.706 ±(99.9%) 531357.338 ops/s [Average]
[info]   (min, avg, max) = (10140477.133, 10347223.706, 10457015.952), stdev = 137991.813
[info]   CI (99.9%): [9815866.368, 10878581.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1315.107 ±(99.9%) 67.113 MB/sec [Average]
[info]   (min, avg, max) = (1288.894, 1315.107, 1328.951), stdev = 17.429
[info]   CI (99.9%): [1247.994, 1382.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1352.065 ±(99.9%) 16.145 MB/sec [Average]
[info]   (min, avg, max) = (1346.327, 1352.065, 1356.649), stdev = 4.193
[info]   CI (99.9%): [1335.919, 1368.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   205.655 ±(99.9%) 12.744 B/op [Average]
[info]   (min, avg, max) = (202.615, 205.655, 210.514), stdev = 3.310
[info]   CI (99.9%): [192.911, 218.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.014, 0.019), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay
[info] # Run progress: 7.94% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160192.226 ops/s
[info] # Warmup Iteration   2: 641215.274 ops/s
[info] # Warmup Iteration   3: 667281.623 ops/s
[info] # Warmup Iteration   4: 666982.851 ops/s
[info] # Warmup Iteration   5: 665997.718 ops/s
[info] Iteration   1: 668876.169 ops/s
[info]                  ·gc.alloc.rate:                   1768.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3927.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 664346.100 ops/s
[info]                  ·gc.alloc.rate:                   1756.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3977.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 668948.915 ops/s
[info]                  ·gc.alloc.rate:                   1768.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3968.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 663687.087 ops/s
[info]                  ·gc.alloc.rate:                   1754.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4816.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 666604.479 ops/s
[info]                  ·gc.alloc.rate:                   1762.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4004.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay":
[info]   666492.550 ±(99.9%) 9472.460 ops/s [Average]
[info]   (min, avg, max) = (663687.087, 666492.550, 668948.915), stdev = 2459.968
[info]   CI (99.9%): [657020.090, 675965.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate":
[info]   1761.755 ±(99.9%) 24.776 MB/sec [Average]
[info]   (min, avg, max) = (1754.374, 1761.755, 1768.066), stdev = 6.434
[info]   CI (99.9%): [1736.979, 1786.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1752.458 ±(99.9%) 601.252 MB/sec [Average]
[info]   (min, avg, max) = (1669.134, 1752.458, 2031.213), stdev = 156.143
[info]   CI (99.9%): [1151.206, 2353.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   4138.791 ±(99.9%) 1462.590 B/op [Average]
[info]   (min, avg, max) = (3927.230, 4138.791, 4816.445), stdev = 379.830
[info]   CI (99.9%): [2676.202, 5601.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.096, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.226 ±(99.9%) 0.435 B/op [Average]
[info]   (min, avg, max) = (0.049, 0.226, 0.343), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 8.73% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1257465.995 ops/s
[info] # Warmup Iteration   2: 1862962.757 ops/s
[info] # Warmup Iteration   3: 1908106.663 ops/s
[info] # Warmup Iteration   4: 1898813.999 ops/s
[info] # Warmup Iteration   5: 1910039.059 ops/s
[info] Iteration   1: 1911504.384 ops/s
[info]                  ·gc.alloc.rate:                   1924.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1387.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1907202.851 ops/s
[info]                  ·gc.alloc.rate:                   1920.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1674.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1883774.875 ops/s
[info]                  ·gc.alloc.rate:                   1896.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1699.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1884713.557 ops/s
[info]                  ·gc.alloc.rate:                   1897.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1418.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1898545.626 ops/s
[info]                  ·gc.alloc.rate:                   1911.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1690.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1897148.259 ±(99.9%) 48806.627 ops/s [Average]
[info]   (min, avg, max) = (1883774.875, 1897148.259, 1911504.384), stdev = 12674.926
[info]   CI (99.9%): [1848341.632, 1945954.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1909.735 ±(99.9%) 49.231 MB/sec [Average]
[info]   (min, avg, max) = (1896.001, 1909.735, 1924.055), stdev = 12.785
[info]   CI (99.9%): [1860.504, 1958.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1584.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1584.000, 1584.000, 1584.000), stdev = 0.001
[info]   CI (99.9%): [1584.000, 1584.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1897.864 ±(99.9%) 722.837 MB/sec [Average]
[info]   (min, avg, max) = (1685.526, 1897.864, 2039.942), stdev = 187.718
[info]   CI (99.9%): [1175.027, 2620.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1574.289 ±(99.9%) 604.465 B/op [Average]
[info]   (min, avg, max) = (1387.628, 1574.289, 1699.900), stdev = 156.978
[info]   CI (99.9%): [969.824, 2178.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.090 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.090, 0.120), stdev = 0.023
[info]   CI (99.9%): [0.003, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson
[info] # Run progress: 9.52% complete, ETA 00:29:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2404258.909 ops/s
[info] # Warmup Iteration   2: 5764005.864 ops/s
[info] # Warmup Iteration   3: 5905362.537 ops/s
[info] # Warmup Iteration   4: 5913299.140 ops/s
[info] # Warmup Iteration   5: 5910115.172 ops/s
[info] Iteration   1: 5941770.643 ops/s
[info]                  ·gc.alloc.rate:                   1631.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5924598.300 ops/s
[info]                  ·gc.alloc.rate:                   1626.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     445.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5866751.564 ops/s
[info]                  ·gc.alloc.rate:                   1610.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5869678.596 ops/s
[info]                  ·gc.alloc.rate:                   1611.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5929832.806 ops/s
[info]                  ·gc.alloc.rate:                   1627.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson":
[info]   5906526.382 ±(99.9%) 136843.362 ops/s [Average]
[info]   (min, avg, max) = (5866751.564, 5906526.382, 5941770.643), stdev = 35537.786
[info]   CI (99.9%): [5769683.020, 6043369.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1621.596 ±(99.9%) 38.540 MB/sec [Average]
[info]   (min, avg, max) = (1610.440, 1621.596, 1631.839), stdev = 10.009
[info]   CI (99.9%): [1583.055, 1660.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1615.084 ±(99.9%) 576.579 MB/sec [Average]
[info]   (min, avg, max) = (1347.964, 1615.084, 1694.691), stdev = 149.736
[info]   CI (99.9%): [1038.505, 2191.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   430.162 ±(99.9%) 148.617 B/op [Average]
[info]   (min, avg, max) = (361.591, 430.162, 453.046), stdev = 38.595
[info]   CI (99.9%): [281.545, 578.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.026, 0.039), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter
[info] # Run progress: 10.32% complete, ETA 00:29:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16819286.260 ops/s
[info] # Warmup Iteration   2: 20449414.819 ops/s
[info] # Warmup Iteration   3: 21542669.647 ops/s
[info] # Warmup Iteration   4: 21825037.471 ops/s
[info] # Warmup Iteration   5: 21884406.188 ops/s
[info] Iteration   1: 21839787.550 ops/s
[info]                  ·gc.alloc.rate:                   666.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21731010.723 ops/s
[info]                  ·gc.alloc.rate:                   662.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21803893.166 ops/s
[info]                  ·gc.alloc.rate:                   665.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21746452.584 ops/s
[info]                  ·gc.alloc.rate:                   663.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21173989.491 ops/s
[info]                  ·gc.alloc.rate:                   645.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter":
[info]   21659026.703 ±(99.9%) 1057608.037 ops/s [Average]
[info]   (min, avg, max) = (21173989.491, 21659026.703, 21839787.550), stdev = 274657.449
[info]   CI (99.9%): [20601418.665, 22716634.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   660.674 ±(99.9%) 32.099 MB/sec [Average]
[info]   (min, avg, max) = (645.963, 660.674, 666.264), stdev = 8.336
[info]   CI (99.9%): [628.576, 692.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   667.573 ±(99.9%) 5.515 MB/sec [Average]
[info]   (min, avg, max) = (666.228, 667.573, 669.674), stdev = 1.432
[info]   CI (99.9%): [662.058, 673.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   48.508 ±(99.9%) 2.743 B/op [Average]
[info]   (min, avg, max) = (48.003, 48.508, 49.762), stdev = 0.712
[info]   CI (99.9%): [45.766, 51.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc
[info] # Run progress: 11.11% complete, ETA 00:29:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20604302.173 ops/s
[info] # Warmup Iteration   2: 25547460.052 ops/s
[info] # Warmup Iteration   3: 27014460.793 ops/s
[info] # Warmup Iteration   4: 26948603.662 ops/s
[info] # Warmup Iteration   5: 26936226.860 ops/s
[info] Iteration   1: 26967342.849 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25617449.437 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 27042670.004 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 27037017.431 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 27004978.599 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc":
[info]   26733891.664 ±(99.9%) 2406005.555 ops/s [Average]
[info]   (min, avg, max) = (25617449.437, 26733891.664, 27042670.004), stdev = 624832.002
[info]   CI (99.9%): [24327886.109, 29139897.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay
[info] # Run progress: 11.90% complete, ETA 00:28:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 361236.635 ops/s
[info] # Warmup Iteration   2: 1131157.998 ops/s
[info] # Warmup Iteration   3: 1149245.812 ops/s
[info] # Warmup Iteration   4: 1137362.295 ops/s
[info] # Warmup Iteration   5: 1129926.882 ops/s
[info] Iteration   1: 1140257.644 ops/s
[info]                  ·gc.alloc.rate:                   1709.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2763.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1145694.082 ops/s
[info]                  ·gc.alloc.rate:                   1718.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2306.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1130394.157 ops/s
[info]                  ·gc.alloc.rate:                   1695.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2349.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1147464.381 ops/s
[info]                  ·gc.alloc.rate:                   1720.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2321.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1147284.019 ops/s
[info]                  ·gc.alloc.rate:                   1720.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2326.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay":
[info]   1142218.857 ±(99.9%) 27828.627 ops/s [Average]
[info]   (min, avg, max) = (1130394.157, 1142218.857, 1147464.381), stdev = 7227.006
[info]   CI (99.9%): [1114390.230, 1170047.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate":
[info]   1712.879 ±(99.9%) 41.614 MB/sec [Average]
[info]   (min, avg, max) = (1695.219, 1712.879, 1720.771), stdev = 10.807
[info]   CI (99.9%): [1671.265, 1754.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   2360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2360.000, 2360.000, 2360.000), stdev = 0.001
[info]   CI (99.9%): [2360.000, 2360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1751.537 ±(99.9%) 539.918 MB/sec [Average]
[info]   (min, avg, max) = (1679.404, 1751.537, 2002.120), stdev = 140.215
[info]   CI (99.9%): [1211.619, 2291.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   2413.481 ±(99.9%) 755.458 B/op [Average]
[info]   (min, avg, max) = (2306.839, 2413.481, 2763.342), stdev = 196.190
[info]   CI (99.9%): [1658.023, 3168.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.166 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (0.114, 0.166, 0.229), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 12.70% complete, ETA 00:28:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 599627.459 ops/s
[info] # Warmup Iteration   2: 877068.435 ops/s
[info] # Warmup Iteration   3: 890513.329 ops/s
[info] # Warmup Iteration   4: 899122.704 ops/s
[info] # Warmup Iteration   5: 894583.186 ops/s
[info] Iteration   1: 901437.486 ops/s
[info]                  ·gc.alloc.rate:                   2946.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4742.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 894919.652 ops/s
[info]                  ·gc.alloc.rate:                   2926.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5381.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 897220.151 ops/s
[info]                  ·gc.alloc.rate:                   2932.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5374.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 903433.211 ops/s
[info]                  ·gc.alloc.rate:                   2952.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4743.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 892719.667 ops/s
[info]                  ·gc.alloc.rate:                   2917.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5401.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   897946.033 ±(99.9%) 17145.113 ops/s [Average]
[info]   (min, avg, max) = (892719.667, 897946.033, 903433.211), stdev = 4452.531
[info]   CI (99.9%): [880800.920, 915091.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2935.278 ±(99.9%) 55.376 MB/sec [Average]
[info]   (min, avg, max) = (2917.971, 2935.278, 2952.966), stdev = 14.381
[info]   CI (99.9%): [2879.902, 2990.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.000, 5144.000, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.000, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2925.825 ±(99.9%) 723.657 MB/sec [Average]
[info]   (min, avg, max) = (2716.728, 2925.825, 3063.885), stdev = 187.931
[info]   CI (99.9%): [2202.168, 3649.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5128.715 ±(99.9%) 1355.255 B/op [Average]
[info]   (min, avg, max) = (4742.846, 5128.715, 5401.096), stdev = 351.955
[info]   CI (99.9%): [3773.460, 6483.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.254 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.229), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.219 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (0.109, 0.219, 0.403), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson
[info] # Run progress: 13.49% complete, ETA 00:28:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 803293.253 ops/s
[info] # Warmup Iteration   2: 1650855.689 ops/s
[info] # Warmup Iteration   3: 1652690.334 ops/s
[info] # Warmup Iteration   4: 1649935.830 ops/s
[info] # Warmup Iteration   5: 1657866.775 ops/s
[info] Iteration   1: 1661283.609 ops/s
[info]                  ·gc.alloc.rate:                   1562.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1578.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1608897.743 ops/s
[info]                  ·gc.alloc.rate:                   1513.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1312.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1611751.525 ops/s
[info]                  ·gc.alloc.rate:                   1515.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1644.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1625699.317 ops/s
[info]                  ·gc.alloc.rate:                   1528.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1308.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1584222.708 ops/s
[info]                  ·gc.alloc.rate:                   1490.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1682.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson":
[info]   1618370.981 ±(99.9%) 108825.189 ops/s [Average]
[info]   (min, avg, max) = (1584222.708, 1618370.981, 1661283.609), stdev = 28261.556
[info]   CI (99.9%): [1509545.792, 1727196.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate":
[info]   1522.157 ±(99.9%) 102.443 MB/sec [Average]
[info]   (min, avg, max) = (1490.233, 1522.157, 1562.701), stdev = 26.604
[info]   CI (99.9%): [1419.715, 1624.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1547.568 ±(99.9%) 707.837 MB/sec [Average]
[info]   (min, avg, max) = (1341.328, 1547.568, 1693.821), stdev = 183.823
[info]   CI (99.9%): [839.731, 2255.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1505.116 ±(99.9%) 699.707 B/op [Average]
[info]   (min, avg, max) = (1308.435, 1505.116, 1682.191), stdev = 181.712
[info]   CI (99.9%): [805.410, 2204.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.085, 0.143), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter
[info] # Run progress: 14.29% complete, ETA 00:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8141868.442 ops/s
[info] # Warmup Iteration   2: 9106709.373 ops/s
[info] # Warmup Iteration   3: 9169862.745 ops/s
[info] # Warmup Iteration   4: 9228435.318 ops/s
[info] # Warmup Iteration   5: 9332992.162 ops/s
[info] Iteration   1: 9308554.938 ops/s
[info]                  ·gc.alloc.rate:                   2791.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9315281.153 ops/s
[info]                  ·gc.alloc.rate:                   2794.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9315966.283 ops/s
[info]                  ·gc.alloc.rate:                   2794.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9340631.150 ops/s
[info]                  ·gc.alloc.rate:                   2801.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9345343.468 ops/s
[info]                  ·gc.alloc.rate:                   2803.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter":
[info]   9325155.398 ±(99.9%) 63988.297 ops/s [Average]
[info]   (min, avg, max) = (9308554.938, 9325155.398, 9345343.468), stdev = 16617.558
[info]   CI (99.9%): [9261167.101, 9389143.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2796.880 ±(99.9%) 19.317 MB/sec [Average]
[info]   (min, avg, max) = (2791.832, 2796.880, 2803.023), stdev = 5.016
[info]   CI (99.9%): [2777.563, 2816.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   2789.821 ±(99.9%) 585.573 MB/sec [Average]
[info]   (min, avg, max) = (2717.612, 2789.821, 3061.820), stdev = 152.072
[info]   CI (99.9%): [2204.247, 3375.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   470.821 ±(99.9%) 99.949 B/op [Average]
[info]   (min, avg, max) = (458.553, 470.821, 517.242), stdev = 25.956
[info]   CI (99.9%): [370.872, 570.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.187), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.017, 0.032), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay
[info] # Run progress: 15.08% complete, ETA 00:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87760.325 ops/s
[info] # Warmup Iteration   2: 330099.719 ops/s
[info] # Warmup Iteration   3: 337497.735 ops/s
[info] # Warmup Iteration   4: 336416.391 ops/s
[info] # Warmup Iteration   5: 338756.431 ops/s
[info] Iteration   1: 338641.348 ops/s
[info]                  ·gc.alloc.rate:                   2064.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9358.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.677 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 338169.470 ops/s
[info]                  ·gc.alloc.rate:                   2061.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9421.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.775 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 337896.135 ops/s
[info]                  ·gc.alloc.rate:                   2059.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9466.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.679 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 336674.919 ops/s
[info]                  ·gc.alloc.rate:                   2052.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9519.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 339423.067 ops/s
[info]                  ·gc.alloc.rate:                   2068.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9451.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay":
[info]   338160.988 ±(99.9%) 3899.530 ops/s [Average]
[info]   (min, avg, max) = (336674.919, 338160.988, 339423.067), stdev = 1012.696
[info]   CI (99.9%): [334261.458, 342060.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate":
[info]   2061.106 ±(99.9%) 23.762 MB/sec [Average]
[info]   (min, avg, max) = (2052.062, 2061.106, 2068.801), stdev = 6.171
[info]   CI (99.9%): [2037.344, 2084.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2029.175 ±(99.9%) 38.900 MB/sec [Average]
[info]   (min, avg, max) = (2013.794, 2029.175, 2038.468), stdev = 10.102
[info]   CI (99.9%): [1990.275, 2068.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   9443.491 ±(99.9%) 227.873 B/op [Average]
[info]   (min, avg, max) = (9358.527, 9443.491, 9519.176), stdev = 59.178
[info]   CI (99.9%): [9215.617, 9671.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.133, 0.167), stdev = 0.028
[info]   CI (99.9%): [0.026, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.620 ±(99.9%) 0.500 B/op [Average]
[info]   (min, avg, max) = (0.483, 0.620, 0.775), stdev = 0.130
[info]   CI (99.9%): [0.120, 1.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 15.87% complete, ETA 00:27:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 647680.578 ops/s
[info] # Warmup Iteration   2: 1034617.086 ops/s
[info] # Warmup Iteration   3: 1053881.000 ops/s
[info] # Warmup Iteration   4: 1054023.955 ops/s
[info] # Warmup Iteration   5: 1063365.485 ops/s
[info] Iteration   1: 1060018.555 ops/s
[info]                  ·gc.alloc.rate:                   2440.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3519.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1067487.764 ops/s
[info]                  ·gc.alloc.rate:                   2458.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3503.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1060972.022 ops/s
[info]                  ·gc.alloc.rate:                   2443.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3527.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1065070.281 ops/s
[info]                  ·gc.alloc.rate:                   2453.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3521.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1055333.813 ops/s
[info]                  ·gc.alloc.rate:                   2430.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4061.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1061776.487 ±(99.9%) 18134.172 ops/s [Average]
[info]   (min, avg, max) = (1055333.813, 1061776.487, 1067487.764), stdev = 4709.387
[info]   CI (99.9%): [1043642.315, 1079910.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2445.226 ±(99.9%) 42.244 MB/sec [Average]
[info]   (min, avg, max) = (2430.209, 2445.226, 2458.228), stdev = 10.971
[info]   CI (99.9%): [2402.982, 2487.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3624.000, 3624.000, 3624.000), stdev = 0.001
[info]   CI (99.9%): [3624.000, 3624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2446.440 ±(99.9%) 596.320 MB/sec [Average]
[info]   (min, avg, max) = (2370.533, 2446.440, 2723.339), stdev = 154.862
[info]   CI (99.9%): [1850.120, 3042.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3626.483 ±(99.9%) 936.246 B/op [Average]
[info]   (min, avg, max) = (3503.146, 3626.483, 4061.125), stdev = 243.140
[info]   CI (99.9%): [2690.237, 4562.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.142, 0.187), stdev = 0.031
[info]   CI (99.9%): [0.023, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.210 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (0.154, 0.210, 0.276), stdev = 0.045
[info]   CI (99.9%): [0.036, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson
[info] # Run progress: 16.67% complete, ETA 00:27:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1481069.618 ops/s
[info] # Warmup Iteration   2: 3272397.491 ops/s
[info] # Warmup Iteration   3: 3324491.447 ops/s
[info] # Warmup Iteration   4: 3353256.545 ops/s
[info] # Warmup Iteration   5: 3352851.365 ops/s
[info] Iteration   1: 3341102.708 ops/s
[info]                  ·gc.alloc.rate:                   1936.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     947.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3343774.974 ops/s
[info]                  ·gc.alloc.rate:                   1937.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3287922.313 ops/s
[info]                  ·gc.alloc.rate:                   1905.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3356620.640 ops/s
[info]                  ·gc.alloc.rate:                   1945.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     954.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3363175.845 ops/s
[info]                  ·gc.alloc.rate:                   1949.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson":
[info]   3338519.296 ±(99.9%) 114389.969 ops/s [Average]
[info]   (min, avg, max) = (3287922.313, 3338519.296, 3363175.845), stdev = 29706.712
[info]   CI (99.9%): [3224129.327, 3452909.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate":
[info]   1934.859 ±(99.9%) 66.468 MB/sec [Average]
[info]   (min, avg, max) = (1905.389, 1934.859, 1949.086), stdev = 17.262
[info]   CI (99.9%): [1868.390, 2001.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1960.835 ±(99.9%) 579.037 MB/sec [Average]
[info]   (min, avg, max) = (1692.465, 1960.835, 2038.703), stdev = 150.374
[info]   CI (99.9%): [1381.797, 2539.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   923.807 ±(99.9%) 245.003 B/op [Average]
[info]   (min, avg, max) = (810.086, 923.807, 954.499), stdev = 63.626
[info]   CI (99.9%): [678.804, 1168.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.051, 0.088), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter
[info] # Run progress: 17.46% complete, ETA 00:26:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13551941.325 ops/s
[info] # Warmup Iteration   2: 15962148.079 ops/s
[info] # Warmup Iteration   3: 17006358.074 ops/s
[info] # Warmup Iteration   4: 17044415.027 ops/s
[info] # Warmup Iteration   5: 16784763.818 ops/s
[info] Iteration   1: 16584665.405 ops/s
[info]                  ·gc.alloc.rate:                   758.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17024896.190 ops/s
[info]                  ·gc.alloc.rate:                   778.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16949607.542 ops/s
[info]                  ·gc.alloc.rate:                   775.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16432922.907 ops/s
[info]                  ·gc.alloc.rate:                   751.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16887647.499 ops/s
[info]                  ·gc.alloc.rate:                   772.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter":
[info]   16775947.909 ±(99.9%) 979580.016 ops/s [Average]
[info]   (min, avg, max) = (16432922.907, 16775947.909, 17024896.190), stdev = 254393.819
[info]   CI (99.9%): [15796367.893, 17755527.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   767.544 ±(99.9%) 44.913 MB/sec [Average]
[info]   (min, avg, max) = (751.839, 767.544, 778.900), stdev = 11.664
[info]   CI (99.9%): [722.631, 812.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   803.178 ±(99.9%) 708.645 MB/sec [Average]
[info]   (min, avg, max) = (666.837, 803.178, 1007.571), stdev = 184.033
[info]   CI (99.9%): [94.532, 1511.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   75.222 ±(99.9%) 63.487 B/op [Average]
[info]   (min, avg, max) = (62.131, 75.222, 93.899), stdev = 16.487
[info]   CI (99.9%): [11.735, 138.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay
[info] # Run progress: 18.25% complete, ETA 00:26:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141789.011 ops/s
[info] # Warmup Iteration   2: 463555.461 ops/s
[info] # Warmup Iteration   3: 467735.200 ops/s
[info] # Warmup Iteration   4: 470337.061 ops/s
[info] # Warmup Iteration   5: 467645.920 ops/s
[info] Iteration   1: 469927.194 ops/s
[info]                  ·gc.alloc.rate:                   1657.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5580.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 467755.691 ops/s
[info]                  ·gc.alloc.rate:                   1650.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5643.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 466954.582 ops/s
[info]                  ·gc.alloc.rate:                   1647.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4542.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 465562.571 ops/s
[info]                  ·gc.alloc.rate:                   1642.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5711.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 470213.770 ops/s
[info]                  ·gc.alloc.rate:                   1659.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5669.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay":
[info]   468082.762 ±(99.9%) 7622.488 ops/s [Average]
[info]   (min, avg, max) = (465562.571, 468082.762, 470213.770), stdev = 1979.536
[info]   CI (99.9%): [460460.273, 475705.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate":
[info]   1651.415 ±(99.9%) 27.244 MB/sec [Average]
[info]   (min, avg, max) = (1642.451, 1651.415, 1659.268), stdev = 7.075
[info]   CI (99.9%): [1624.171, 1678.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.001), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1615.188 ±(99.9%) 576.741 MB/sec [Average]
[info]   (min, avg, max) = (1347.974, 1615.188, 1694.448), stdev = 149.778
[info]   CI (99.9%): [1038.448, 2191.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5429.765 ±(99.9%) 1917.650 B/op [Average]
[info]   (min, avg, max) = (4542.959, 5429.765, 5711.767), stdev = 498.008
[info]   CI (99.9%): [3512.115, 7347.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.096, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.322 ±(99.9%) 0.620 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.322, 0.488), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce
[info] # Run progress: 19.05% complete, ETA 00:26:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 742.624 ops/s
[info] # Warmup Iteration   2: 901.017 ops/s
[info] # Warmup Iteration   3: 918.667 ops/s
[info] # Warmup Iteration   4: 916.635 ops/s
[info] # Warmup Iteration   5: 916.654 ops/s
[info] Iteration   1: 913.357 ops/s
[info]                  ·gc.alloc.rate:                   1183.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              2039048.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2299065.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 914.965 ops/s
[info]                  ·gc.alloc.rate:                   1185.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              2039049.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1726830.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 917.300 ops/s
[info]                  ·gc.alloc.rate:                   1188.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              2039048.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2304468.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392.645 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 923.367 ops/s
[info]                  ·gc.alloc.rate:                   1196.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              2039048.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1721525.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248.242 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 924.549 ops/s
[info]                  ·gc.alloc.rate:                   1198.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              2039036.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2298932.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 283.399 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce":
[info]   918.707 ±(99.9%) 19.296 ops/s [Average]
[info]   (min, avg, max) = (913.357, 918.707, 924.549), stdev = 5.011
[info]   CI (99.9%): [899.411, 938.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1190.616 ±(99.9%) 25.046 MB/sec [Average]
[info]   (min, avg, max) = (1183.632, 1190.616, 1198.102), stdev = 6.504
[info]   CI (99.9%): [1165.570, 1215.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2039046.466 ±(99.9%) 20.700 B/op [Average]
[info]   (min, avg, max) = (2039036.895, 2039046.466, 2039049.755), stdev = 5.376
[info]   CI (99.9%): [2039025.766, 2039067.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1208.704 ±(99.9%) 708.215 MB/sec [Average]
[info]   (min, avg, max) = (1004.264, 1208.704, 1350.812), stdev = 183.921
[info]   CI (99.9%): [500.489, 1916.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2070164.585 ±(99.9%) 1216242.706 B/op [Average]
[info]   (min, avg, max) = (1721525.749, 2070164.585, 2304468.497), stdev = 315854.368
[info]   CI (99.9%): [853921.879, 3286407.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.139 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (0.072, 0.139, 0.229), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   238.417 ±(99.9%) 421.531 B/op [Average]
[info]   (min, avg, max) = (124.393, 238.417, 392.645), stdev = 109.470
[info]   CI (99.9%): [≈ 0, 659.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson
[info] # Run progress: 19.84% complete, ETA 00:26:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2336.874 ops/s
[info] # Warmup Iteration   2: 3105.755 ops/s
[info] # Warmup Iteration   3: 3211.169 ops/s
[info] # Warmup Iteration   4: 3234.473 ops/s
[info] # Warmup Iteration   5: 3232.498 ops/s
[info] Iteration   1: 3237.086 ops/s
[info]                  ·gc.alloc.rate:                   1073.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              521832.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642811.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.479 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3241.862 ops/s
[info]                  ·gc.alloc.rate:                   1075.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              521832.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484032.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3202.660 ops/s
[info]                  ·gc.alloc.rate:                   1062.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              521832.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     491888.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.682 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3220.093 ops/s
[info]                  ·gc.alloc.rate:                   1067.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              521832.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     491082.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.173 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3255.998 ops/s
[info]                  ·gc.alloc.rate:                   1079.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              521832.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486942.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson":
[info]   3231.540 ±(99.9%) 79.397 ops/s [Average]
[info]   (min, avg, max) = (3202.660, 3231.540, 3255.998), stdev = 20.619
[info]   CI (99.9%): [3152.143, 3310.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   1071.594 ±(99.9%) 26.346 MB/sec [Average]
[info]   (min, avg, max) = (1062.027, 1071.594, 1079.745), stdev = 6.842
[info]   CI (99.9%): [1045.249, 1097.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   521832.134 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (521832.133, 521832.134, 521832.135), stdev = 0.001
[info]   CI (99.9%): [521832.130, 521832.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1066.578 ±(99.9%) 550.481 MB/sec [Average]
[info]   (min, avg, max) = (997.156, 1066.578, 1322.213), stdev = 142.958
[info]   CI (99.9%): [516.098, 1617.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   519351.451 ±(99.9%) 266039.400 B/op [Average]
[info]   (min, avg, max) = (484032.770, 519351.451, 642811.414), stdev = 69089.587
[info]   CI (99.9%): [253312.051, 785390.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.354 ±(99.9%) 44.516 B/op [Average]
[info]   (min, avg, max) = (10.173, 26.354, 40.479), stdev = 11.561
[info]   CI (99.9%): [≈ 0, 70.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter
[info] # Run progress: 20.63% complete, ETA 00:25:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2928.156 ops/s
[info] # Warmup Iteration   2: 3072.491 ops/s
[info] # Warmup Iteration   3: 2994.524 ops/s
[info] # Warmup Iteration   4: 3105.504 ops/s
[info] # Warmup Iteration   5: 3090.244 ops/s
[info] Iteration   1: 3097.850 ops/s
[info]                  ·gc.alloc.rate:                   438.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              223008.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     338528.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.721 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3099.164 ops/s
[info]                  ·gc.alloc.rate:               439.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          223008.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169125.161 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3108.051 ops/s
[info]                  ·gc.alloc.rate:                   440.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              223008.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168635.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 3089.775 ops/s
[info]                  ·gc.alloc.rate:                   437.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              223008.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     339235.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3085.593 ops/s
[info]                  ·gc.alloc.rate:               437.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          223008.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169837.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter":
[info]   3096.087 ±(99.9%) 33.661 ops/s [Average]
[info]   (min, avg, max) = (3085.593, 3096.087, 3108.051), stdev = 8.742
[info]   CI (99.9%): [3062.426, 3129.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   438.768 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (437.369, 438.768, 440.418), stdev = 1.192
[info]   CI (99.9%): [434.178, 443.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   223008.142 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (223008.139, 223008.142, 223008.150), stdev = 0.005
[info]   CI (99.9%): [223008.124, 223008.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   466.337 ±(99.9%) 702.715 MB/sec [Average]
[info]   (min, avg, max) = (333.037, 466.337, 666.400), stdev = 182.493
[info]   CI (99.9%): [≈ 0, 1169.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   237072.393 ±(99.9%) 357879.923 B/op [Average]
[info]   (min, avg, max) = (168635.574, 237072.393, 339235.199), stdev = 92940.280
[info]   CI (99.9%): [≈ 0, 594952.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   12.693 ±(99.9%) 53.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.693, 31.721), stdev = 13.796
[info]   CI (99.9%): [≈ 0, 65.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson
[info] # Run progress: 21.43% complete, ETA 00:25:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 981.569 ops/s
[info] # Warmup Iteration   2: 1591.297 ops/s
[info] # Warmup Iteration   3: 1584.253 ops/s
[info] # Warmup Iteration   4: 1589.221 ops/s
[info] # Warmup Iteration   5: 1607.269 ops/s
[info] Iteration   1: 1582.616 ops/s
[info]                  ·gc.alloc.rate:                   1331.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1324361.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1320159.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.800 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1595.821 ops/s
[info]                  ·gc.alloc.rate:                   1343.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              1324383.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1316465.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1591.322 ops/s
[info]                  ·gc.alloc.rate:                   1339.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1324369.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1327186.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.915 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1586.954 ops/s
[info]                  ·gc.alloc.rate:                   1335.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1324382.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1335151.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.270 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1590.906 ops/s
[info]                  ·gc.alloc.rate:                   1338.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              1324364.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1336407.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.749 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson":
[info]   1589.524 ±(99.9%) 19.168 ops/s [Average]
[info]   (min, avg, max) = (1582.616, 1589.524, 1595.821), stdev = 4.978
[info]   CI (99.9%): [1570.356, 1608.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   1337.774 ±(99.9%) 16.373 MB/sec [Average]
[info]   (min, avg, max) = (1331.882, 1337.774, 1343.230), stdev = 4.252
[info]   CI (99.9%): [1321.401, 1354.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1324372.482 ±(99.9%) 39.312 B/op [Average]
[info]   (min, avg, max) = (1324361.890, 1324372.482, 1324383.810), stdev = 10.209
[info]   CI (99.9%): [1324333.170, 1324411.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1340.500 ±(99.9%) 35.718 MB/sec [Average]
[info]   (min, avg, max) = (1327.656, 1340.500, 1351.115), stdev = 9.276
[info]   CI (99.9%): [1304.782, 1376.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1327073.942 ±(99.9%) 34048.023 B/op [Average]
[info]   (min, avg, max) = (1316465.172, 1327073.942, 1336407.477), stdev = 8842.164
[info]   CI (99.9%): [1293025.918, 1361121.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   74.161 ±(99.9%) 90.304 B/op [Average]
[info]   (min, avg, max) = (41.270, 74.161, 102.915), stdev = 23.452
[info]   CI (99.9%): [≈ 0, 164.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter
[info] # Run progress: 22.22% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1646.257 ops/s
[info] # Warmup Iteration   2: 1775.943 ops/s
[info] # Warmup Iteration   3: 1784.342 ops/s
[info] # Warmup Iteration   4: 1751.927 ops/s
[info] # Warmup Iteration   5: 1781.439 ops/s
[info] Iteration   1: 1789.217 ops/s
[info]                  ·gc.alloc.rate:                   1483.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304776.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1183016.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.918 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1781.587 ops/s
[info]                  ·gc.alloc.rate:                   1477.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304776.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1490190.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.912 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1780.315 ops/s
[info]                  ·gc.alloc.rate:                   1476.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304776.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1195765.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1785.783 ops/s
[info]                  ·gc.alloc.rate:                   1480.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304776.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1194097.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1768.505 ops/s
[info]                  ·gc.alloc.rate:                   1466.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304776.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1509736.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter":
[info]   1781.081 ±(99.9%) 30.276 ops/s [Average]
[info]   (min, avg, max) = (1768.505, 1781.081, 1789.217), stdev = 7.863
[info]   CI (99.9%): [1750.805, 1811.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1476.824 ±(99.9%) 24.995 MB/sec [Average]
[info]   (min, avg, max) = (1466.484, 1476.824, 1483.511), stdev = 6.491
[info]   CI (99.9%): [1451.829, 1501.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   1304776.250 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (1304776.242, 1304776.250, 1304776.262), stdev = 0.010
[info]   CI (99.9%): [1304776.210, 1304776.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   1487.403 ±(99.9%) 719.340 MB/sec [Average]
[info]   (min, avg, max) = (1345.072, 1487.403, 1696.845), stdev = 186.810
[info]   CI (99.9%): [768.063, 2206.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1314561.028 ±(99.9%) 652530.146 B/op [Average]
[info]   (min, avg, max) = (1183016.331, 1314561.028, 1509736.050), stdev = 169460.007
[info]   CI (99.9%): [662030.882, 1967091.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.156), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   77.252 ±(99.9%) 133.961 B/op [Average]
[info]   (min, avg, max) = (54.918, 77.252, 137.912), stdev = 34.789
[info]   CI (99.9%): [≈ 0, 211.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 23.02% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1663.521 ops/s
[info] # Warmup Iteration   2: 1828.611 ops/s
[info] # Warmup Iteration   3: 1830.787 ops/s
[info] # Warmup Iteration   4: 1830.011 ops/s
[info] # Warmup Iteration   5: 1838.458 ops/s
[info] Iteration   1: 1813.621 ops/s
[info]                  ·gc.alloc.rate:                   1370.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              1189440.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1455874.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.108 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1807.722 ops/s
[info]                  ·gc.alloc.rate:                   1366.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              1189440.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173268.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1832.198 ops/s
[info]                  ·gc.alloc.rate:                   1384.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              1189440.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1160698.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1823.398 ops/s
[info]                  ·gc.alloc.rate:                   1378.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              1189440.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1168725.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.860 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1823.281 ops/s
[info]                  ·gc.alloc.rate:                   1378.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              1189440.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1170449.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.895 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc":
[info]   1820.044 ±(99.9%) 36.659 ops/s [Average]
[info]   (min, avg, max) = (1807.722, 1820.044, 1832.198), stdev = 9.520
[info]   CI (99.9%): [1783.385, 1856.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1375.752 ±(99.9%) 27.776 MB/sec [Average]
[info]   (min, avg, max) = (1366.310, 1375.752, 1384.891), stdev = 7.213
[info]   CI (99.9%): [1347.976, 1403.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   1189440.237 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (1189440.236, 1189440.237, 1189440.239), stdev = 0.001
[info]   CI (99.9%): [1189440.232, 1189440.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   1417.563 ±(99.9%) 560.961 MB/sec [Average]
[info]   (min, avg, max) = (1347.733, 1417.563, 1678.100), stdev = 145.680
[info]   CI (99.9%): [856.602, 1978.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1225803.299 ±(99.9%) 495571.265 B/op [Average]
[info]   (min, avg, max) = (1160698.693, 1225803.299, 1455874.116), stdev = 128698.284
[info]   CI (99.9%): [730232.034, 1721374.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   79.247 ±(99.9%) 160.892 B/op [Average]
[info]   (min, avg, max) = (36.108, 79.247, 144.991), stdev = 41.783
[info]   CI (99.9%): [≈ 0, 240.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson
[info] # Run progress: 23.81% complete, ETA 00:24:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1291958.090 ops/s
[info] # Warmup Iteration   2: 2137440.910 ops/s
[info] # Warmup Iteration   3: 2156444.617 ops/s
[info] # Warmup Iteration   4: 2164903.793 ops/s
[info] # Warmup Iteration   5: 2166093.722 ops/s
[info] Iteration   1: 2169078.455 ops/s
[info]                  ·gc.alloc.rate:                   1378.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2157472.643 ops/s
[info]                  ·gc.alloc.rate:                   1371.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1217.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2148089.125 ops/s
[info]                  ·gc.alloc.rate:                   1365.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     983.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2129767.634 ops/s
[info]                  ·gc.alloc.rate:                   1353.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2162135.880 ops/s
[info]                  ·gc.alloc.rate:                   1374.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     983.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson":
[info]   2153308.747 ±(99.9%) 58568.043 ops/s [Average]
[info]   (min, avg, max) = (2129767.634, 2153308.747, 2169078.455), stdev = 15209.935
[info]   CI (99.9%): [2094740.705, 2211876.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate":
[info]   1368.511 ±(99.9%) 36.932 MB/sec [Average]
[info]   (min, avg, max) = (1353.682, 1368.511, 1378.263), stdev = 9.591
[info]   CI (99.9%): [1331.579, 1405.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1407.855 ±(99.9%) 565.330 MB/sec [Average]
[info]   (min, avg, max) = (1326.278, 1407.855, 1669.902), stdev = 146.814
[info]   CI (99.9%): [842.525, 1973.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1028.710 ±(99.9%) 409.565 B/op [Average]
[info]   (min, avg, max) = (962.283, 1028.710, 1217.731), stdev = 106.363
[info]   CI (99.9%): [619.146, 1438.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.073, 0.092), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter
[info] # Run progress: 24.60% complete, ETA 00:24:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6652267.304 ops/s
[info] # Warmup Iteration   2: 5084220.402 ops/s
[info] # Warmup Iteration   3: 5179868.710 ops/s
[info] # Warmup Iteration   4: 5179355.009 ops/s
[info] # Warmup Iteration   5: 5167159.105 ops/s
[info] Iteration   1: 5094270.684 ops/s
[info]                  ·gc.alloc.rate:                   673.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5153431.530 ops/s
[info]                  ·gc.alloc.rate:                   681.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5159168.067 ops/s
[info]                  ·gc.alloc.rate:                   681.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5160411.497 ops/s
[info]                  ·gc.alloc.rate:                   682.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5178949.055 ops/s
[info]                  ·gc.alloc.rate:                   684.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter":
[info]   5149246.167 ±(99.9%) 123958.311 ops/s [Average]
[info]   (min, avg, max) = (5094270.684, 5149246.167, 5178949.055), stdev = 32191.580
[info]   CI (99.9%): [5025287.855, 5273204.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   680.613 ±(99.9%) 16.486 MB/sec [Average]
[info]   (min, avg, max) = (673.300, 680.613, 684.528), stdev = 4.281
[info]   CI (99.9%): [664.126, 697.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   668.339 ±(99.9%) 6.313 MB/sec [Average]
[info]   (min, avg, max) = (666.174, 668.339, 670.203), stdev = 1.639
[info]   CI (99.9%): [662.026, 674.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   204.253 ±(99.9%) 3.404 B/op [Average]
[info]   (min, avg, max) = (203.647, 204.253, 205.799), stdev = 0.884
[info]   CI (99.9%): [200.849, 207.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.167), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.024, 0.051), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay
[info] # Run progress: 25.40% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128506.017 ops/s
[info] # Warmup Iteration   2: 347330.377 ops/s
[info] # Warmup Iteration   3: 368070.448 ops/s
[info] # Warmup Iteration   4: 367642.489 ops/s
[info] # Warmup Iteration   5: 367403.648 ops/s
[info] Iteration   1: 366079.950 ops/s
[info]                  ·gc.alloc.rate:                   1661.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7163.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 368702.099 ops/s
[info]                  ·gc.alloc.rate:                   1673.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7160.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.711 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 368772.675 ops/s
[info]                  ·gc.alloc.rate:                   1673.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7192.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 363007.321 ops/s
[info]                  ·gc.alloc.rate:                   1648.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7330.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 367965.919 ops/s
[info]                  ·gc.alloc.rate:                   1670.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7248.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.445 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay":
[info]   366905.593 ±(99.9%) 9376.126 ops/s [Average]
[info]   (min, avg, max) = (363007.321, 366905.593, 368772.675), stdev = 2434.950
[info]   CI (99.9%): [357529.467, 376281.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate":
[info]   1665.673 ±(99.9%) 41.934 MB/sec [Average]
[info]   (min, avg, max) = (1648.306, 1665.673, 1673.991), stdev = 10.890
[info]   CI (99.9%): [1623.739, 1707.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1683.100 ±(99.9%) 43.864 MB/sec [Average]
[info]   (min, avg, max) = (1666.433, 1683.100, 1694.886), stdev = 11.391
[info]   CI (99.9%): [1639.236, 1726.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   7219.018 ±(99.9%) 275.073 B/op [Average]
[info]   (min, avg, max) = (7160.039, 7219.018, 7330.054), stdev = 71.436
[info]   CI (99.9%): [6943.945, 7494.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.410 ±(99.9%) 0.706 B/op [Average]
[info]   (min, avg, max) = (0.267, 0.410, 0.711), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 1.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson
[info] # Run progress: 26.19% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1611481.161 ops/s
[info] # Warmup Iteration   2: 2602219.709 ops/s
[info] # Warmup Iteration   3: 2621444.244 ops/s
[info] # Warmup Iteration   4: 2634665.882 ops/s
[info] # Warmup Iteration   5: 2632050.053 ops/s
[info] Iteration   1: 2638668.892 ops/s
[info]                  ·gc.alloc.rate:                   1395.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     792.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2637272.477 ops/s
[info]                  ·gc.alloc.rate:                   1394.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     797.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2615473.151 ops/s
[info]                  ·gc.alloc.rate:                   1382.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     808.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2621923.134 ops/s
[info]                  ·gc.alloc.rate:                   1386.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     809.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2632797.663 ops/s
[info]                  ·gc.alloc.rate:                   1392.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     807.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson":
[info]   2629227.064 ±(99.9%) 38944.057 ops/s [Average]
[info]   (min, avg, max) = (2615473.151, 2629227.064, 2638668.892), stdev = 10113.648
[info]   CI (99.9%): [2590283.007, 2668171.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1390.031 ±(99.9%) 20.741 MB/sec [Average]
[info]   (min, avg, max) = (1382.691, 1390.031, 1395.041), stdev = 5.386
[info]   CI (99.9%): [1369.290, 1410.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1341.602 ±(99.9%) 35.064 MB/sec [Average]
[info]   (min, avg, max) = (1328.774, 1341.602, 1351.600), stdev = 9.106
[info]   CI (99.9%): [1306.538, 1376.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   803.031 ±(99.9%) 28.905 B/op [Average]
[info]   (min, avg, max) = (792.478, 803.031, 809.121), stdev = 7.507
[info]   CI (99.9%): [774.126, 831.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.052, 0.063), stdev = 0.010
[info]   CI (99.9%): [0.012, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter
[info] # Run progress: 26.98% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5968106.632 ops/s
[info] # Warmup Iteration   2: 6341090.873 ops/s
[info] # Warmup Iteration   3: 6566829.140 ops/s
[info] # Warmup Iteration   4: 6577864.503 ops/s
[info] # Warmup Iteration   5: 6543351.201 ops/s
[info] Iteration   1: 6555985.645 ops/s
[info]                  ·gc.alloc.rate:                   999.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6485274.807 ops/s
[info]                  ·gc.alloc.rate:                   989.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6508374.084 ops/s
[info]                  ·gc.alloc.rate:                   992.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6490734.027 ops/s
[info]                  ·gc.alloc.rate:                   990.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6527547.057 ops/s
[info]                  ·gc.alloc.rate:                   995.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter":
[info]   6513583.124 ±(99.9%) 111328.591 ops/s [Average]
[info]   (min, avg, max) = (6485274.807, 6513583.124, 6555985.645), stdev = 28911.682
[info]   CI (99.9%): [6402254.533, 6624911.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   993.454 ±(99.9%) 16.589 MB/sec [Average]
[info]   (min, avg, max) = (989.348, 993.454, 999.831), stdev = 4.308
[info]   CI (99.9%): [976.864, 1010.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   940.089 ±(99.9%) 571.046 MB/sec [Average]
[info]   (min, avg, max) = (674.854, 940.089, 1010.167), stdev = 148.299
[info]   CI (99.9%): [369.043, 1511.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   227.147 ±(99.9%) 138.870 B/op [Average]
[info]   (min, avg, max) = (162.694, 227.147, 244.877), stdev = 36.064
[info]   CI (99.9%): [88.277, 366.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.018, 0.030), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay
[info] # Run progress: 27.78% complete, ETA 00:23:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261469.826 ops/s
[info] # Warmup Iteration   2: 617024.235 ops/s
[info] # Warmup Iteration   3: 616200.311 ops/s
[info] # Warmup Iteration   4: 630820.930 ops/s
[info] # Warmup Iteration   5: 627817.643 ops/s
[info] Iteration   1: 630046.345 ops/s
[info]                  ·gc.alloc.rate:                   1864.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4179.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 626992.384 ops/s
[info]                  ·gc.alloc.rate:                   1855.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5070.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.470 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 628267.785 ops/s
[info]                  ·gc.alloc.rate:                   1858.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4232.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 628563.403 ops/s
[info]                  ·gc.alloc.rate:                   1859.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5090.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 628711.010 ops/s
[info]                  ·gc.alloc.rate:                   1860.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4250.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay":
[info]   628516.185 ±(99.9%) 4202.871 ops/s [Average]
[info]   (min, avg, max) = (626992.384, 628516.185, 630046.345), stdev = 1091.472
[info]   CI (99.9%): [624313.314, 632719.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate":
[info]   1859.598 ±(99.9%) 12.596 MB/sec [Average]
[info]   (min, avg, max) = (1855.014, 1859.598, 1864.067), stdev = 3.271
[info]   CI (99.9%): [1847.002, 1872.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1823.022 ±(99.9%) 716.967 MB/sec [Average]
[info]   (min, avg, max) = (1673.449, 1823.022, 2033.228), stdev = 186.194
[info]   CI (99.9%): [1106.055, 2539.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   4564.857 ±(99.9%) 1815.679 B/op [Average]
[info]   (min, avg, max) = (4179.881, 4564.857, 5090.620), stdev = 471.526
[info]   CI (99.9%): [2749.179, 6380.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.187), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.271 ±(99.9%) 0.610 B/op [Average]
[info]   (min, avg, max) = (0.156, 0.271, 0.470), stdev = 0.159
[info]   CI (99.9%): [≈ 0, 0.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 28.57% complete, ETA 00:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463949.702 ops/s
[info] # Warmup Iteration   2: 827017.497 ops/s
[info] # Warmup Iteration   3: 832008.636 ops/s
[info] # Warmup Iteration   4: 836634.190 ops/s
[info] # Warmup Iteration   5: 833507.139 ops/s
[info] Iteration   1: 834819.896 ops/s
[info]                  ·gc.alloc.rate:                   2762.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5117.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 832808.700 ops/s
[info]                  ·gc.alloc.rate:                   2756.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5136.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 827527.218 ops/s
[info]                  ·gc.alloc.rate:                   2738.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5178.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 833806.534 ops/s
[info]                  ·gc.alloc.rate:                   2759.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5139.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 823534.399 ops/s
[info]                  ·gc.alloc.rate:                   2725.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5204.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   830499.349 ±(99.9%) 18495.300 ops/s [Average]
[info]   (min, avg, max) = (823534.399, 830499.349, 834819.896), stdev = 4803.171
[info]   CI (99.9%): [812004.049, 848994.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2748.368 ±(99.9%) 61.285 MB/sec [Average]
[info]   (min, avg, max) = (2725.300, 2748.368, 2762.554), stdev = 15.916
[info]   CI (99.9%): [2687.083, 2809.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5208.001, 5208.001, 5208.001), stdev = 0.001
[info]   CI (99.9%): [5208.000, 5208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2720.528 ±(99.9%) 15.013 MB/sec [Average]
[info]   (min, avg, max) = (2714.594, 2720.528, 2723.373), stdev = 3.899
[info]   CI (99.9%): [2705.515, 2735.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5155.405 ±(99.9%) 135.387 B/op [Average]
[info]   (min, avg, max) = (5117.584, 5155.405, 5204.319), stdev = 35.160
[info]   CI (99.9%): [5020.018, 5290.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.187), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.245 ±(99.9%) 0.251 B/op [Average]
[info]   (min, avg, max) = (0.196, 0.245, 0.356), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson
[info] # Run progress: 29.37% complete, ETA 00:23:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347217.756 ops/s
[info] # Warmup Iteration   2: 963614.442 ops/s
[info] # Warmup Iteration   3: 965179.382 ops/s
[info] # Warmup Iteration   4: 973694.822 ops/s
[info] # Warmup Iteration   5: 998493.635 ops/s
[info] Iteration   1: 996211.817 ops/s
[info]                  ·gc.alloc.rate:                   1236.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2087.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1001149.440 ops/s
[info]                  ·gc.alloc.rate:                   1241.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2091.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 994765.869 ops/s
[info]                  ·gc.alloc.rate:                   1233.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1585.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1001455.764 ops/s
[info]                  ·gc.alloc.rate:                   1242.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2110.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 999794.113 ops/s
[info]                  ·gc.alloc.rate:                   1240.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2120.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson":
[info]   998675.401 ±(99.9%) 11624.942 ops/s [Average]
[info]   (min, avg, max) = (994765.869, 998675.401, 1001455.764), stdev = 3018.960
[info]   CI (99.9%): [987050.459, 1010300.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate":
[info]   1238.843 ±(99.9%) 14.173 MB/sec [Average]
[info]   (min, avg, max) = (1233.929, 1238.843, 1242.182), stdev = 3.681
[info]   CI (99.9%): [1224.670, 1253.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1269.023 ±(99.9%) 575.271 MB/sec [Average]
[info]   (min, avg, max) = (1002.360, 1269.023, 1346.932), stdev = 149.396
[info]   CI (99.9%): [693.752, 1844.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1999.135 ±(99.9%) 891.497 B/op [Average]
[info]   (min, avg, max) = (1585.673, 1999.135, 2120.197), stdev = 231.519
[info]   CI (99.9%): [1107.639, 2890.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.151, 0.295), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter
[info] # Run progress: 30.16% complete, ETA 00:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6898808.777 ops/s
[info] # Warmup Iteration   2: 7938397.316 ops/s
[info] # Warmup Iteration   3: 7972694.525 ops/s
[info] # Warmup Iteration   4: 7990511.660 ops/s
[info] # Warmup Iteration   5: 8018307.532 ops/s
[info] Iteration   1: 7650920.733 ops/s
[info]                  ·gc.alloc.rate:                   350.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8021364.857 ops/s
[info]                  ·gc.alloc.rate:               366.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65.873 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 8021628.988 ops/s
[info]                  ·gc.alloc.rate:                   367.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8028940.154 ops/s
[info]                  ·gc.alloc.rate:               367.351 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65.684 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 8031491.063 ops/s
[info]                  ·gc.alloc.rate:                   367.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter":
[info]   7950869.159 ±(99.9%) 645889.211 ops/s [Average]
[info]   (min, avg, max) = (7650920.733, 7950869.159, 8031491.063), stdev = 167735.377
[info]   CI (99.9%): [7304979.948, 8596758.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   363.768 ±(99.9%) 29.566 MB/sec [Average]
[info]   (min, avg, max) = (350.037, 363.768, 367.443), stdev = 7.678
[info]   CI (99.9%): [334.202, 393.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   402.396 ±(99.9%) 576.574 MB/sec [Average]
[info]   (min, avg, max) = (335.094, 402.396, 670.249), stdev = 149.734
[info]   CI (99.9%): [≈ 0, 978.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   79.553 ±(99.9%) 111.929 B/op [Average]
[info]   (min, avg, max) = (65.661, 79.553, 131.487), stdev = 29.068
[info]   CI (99.9%): [≈ 0, 191.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.311 ±(99.9%) 2.408 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.311, 1.428), stdev = 0.625
[info]   CI (99.9%): [≈ 0, 2.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.294), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay
[info] # Run progress: 30.95% complete, ETA 00:22:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55513.880 ops/s
[info] # Warmup Iteration   2: 306099.285 ops/s
[info] # Warmup Iteration   3: 319045.881 ops/s
[info] # Warmup Iteration   4: 321107.350 ops/s
[info] # Warmup Iteration   5: 320568.399 ops/s
[info] Iteration   1: 320470.764 ops/s
[info]                  ·gc.alloc.rate:                   1769.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              8688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9826.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.511 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 321056.020 ops/s
[info]                  ·gc.alloc.rate:                   1772.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              8688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8230.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 320570.199 ops/s
[info]                  ·gc.alloc.rate:                   1770.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              8688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8280.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 322589.023 ops/s
[info]                  ·gc.alloc.rate:                   1780.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              8688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8255.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 319877.827 ops/s
[info]                  ·gc.alloc.rate:                   1766.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              8688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10013.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.512 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay":
[info]   320912.767 ±(99.9%) 3952.390 ops/s [Average]
[info]   (min, avg, max) = (319877.827, 320912.767, 322589.023), stdev = 1026.423
[info]   CI (99.9%): [316960.377, 324865.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate":
[info]   1771.831 ±(99.9%) 21.518 MB/sec [Average]
[info]   (min, avg, max) = (1766.233, 1771.831, 1780.977), stdev = 5.588
[info]   CI (99.9%): [1750.313, 1793.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8688.001, 8688.001, 8688.001), stdev = 0.001
[info]   CI (99.9%): [8688.001, 8688.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1819.098 ±(99.9%) 702.348 MB/sec [Average]
[info]   (min, avg, max) = (1679.179, 1819.098, 2035.638), stdev = 182.398
[info]   CI (99.9%): [1116.750, 2521.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8921.356 ±(99.9%) 3520.394 B/op [Average]
[info]   (min, avg, max) = (8230.522, 8921.356, 10013.190), stdev = 914.235
[info]   CI (99.9%): [5400.962, 12441.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.511 ±(99.9%) 0.736 B/op [Average]
[info]   (min, avg, max) = (0.305, 0.511, 0.816), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 31.75% complete, ETA 00:22:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5455.768 ops/s
[info] # Warmup Iteration   2: 7750.013 ops/s
[info] # Warmup Iteration   3: 8085.708 ops/s
[info] # Warmup Iteration   4: 8084.066 ops/s
[info] # Warmup Iteration   5: 8108.508 ops/s
[info] Iteration   1: 8132.505 ops/s
[info]                  ·gc.alloc.rate:                   2093.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391588.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.148 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8085.076 ops/s
[info]                  ·gc.alloc.rate:                   2081.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     461207.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.769 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8007.130 ops/s
[info]                  ·gc.alloc.rate:                   2060.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              405004.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400105.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.928 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8065.860 ops/s
[info]                  ·gc.alloc.rate:                   2075.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              405047.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     397699.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.184 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8068.945 ops/s
[info]                  ·gc.alloc.rate:                   2076.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              405040.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     397552.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8071.903 ±(99.9%) 173.140 ops/s [Average]
[info]   (min, avg, max) = (8007.130, 8071.903, 8132.505), stdev = 44.964
[info]   CI (99.9%): [7898.764, 8245.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2077.543 ±(99.9%) 44.958 MB/sec [Average]
[info]   (min, avg, max) = (2060.578, 2077.543, 2093.036), stdev = 11.675
[info]   CI (99.9%): [2032.585, 2122.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405018.334 ±(99.9%) 89.733 B/op [Average]
[info]   (min, avg, max) = (405000.053, 405018.334, 405047.226), stdev = 23.303
[info]   CI (99.9%): [404928.601, 405108.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2101.257 ±(99.9%) 579.364 MB/sec [Average]
[info]   (min, avg, max) = (2023.726, 2101.257, 2370.189), stdev = 150.459
[info]   CI (99.9%): [1521.894, 2680.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   409630.796 ±(99.9%) 111679.266 B/op [Average]
[info]   (min, avg, max) = (391588.677, 409630.796, 461207.473), stdev = 29002.751
[info]   CI (99.9%): [297951.530, 521310.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.205 ±(99.9%) 0.415 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.205, 0.329), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   40.020 ±(99.9%) 80.518 B/op [Average]
[info]   (min, avg, max) = (12.184, 40.020, 64.071), stdev = 20.910
[info]   CI (99.9%): [≈ 0, 120.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson
[info] # Run progress: 32.54% complete, ETA 00:22:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7632.563 ops/s
[info] # Warmup Iteration   2: 13612.610 ops/s
[info] # Warmup Iteration   3: 13717.328 ops/s
[info] # Warmup Iteration   4: 13428.535 ops/s
[info] # Warmup Iteration   5: 13729.786 ops/s
[info] Iteration   1: 13680.486 ops/s
[info]                  ·gc.alloc.rate:                   368.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37320.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13602.460 ops/s
[info]                  ·gc.alloc.rate:               366.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          42424.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37534.474 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 13727.597 ops/s
[info]                  ·gc.alloc.rate:                   370.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74385.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13734.574 ops/s
[info]                  ·gc.alloc.rate:               370.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          42424.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37250.134 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 13758.775 ops/s
[info]                  ·gc.alloc.rate:                   370.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37185.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson":
[info]   13700.778 ±(99.9%) 238.176 ops/s [Average]
[info]   (min, avg, max) = (13602.460, 13700.778, 13758.775), stdev = 61.853
[info]   CI (99.9%): [13462.603, 13938.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   369.357 ±(99.9%) 6.424 MB/sec [Average]
[info]   (min, avg, max) = (366.709, 369.357, 370.920), stdev = 1.668
[info]   CI (99.9%): [362.933, 375.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   42424.034 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (42424.031, 42424.034, 42424.043), stdev = 0.005
[info]   CI (99.9%): [42424.015, 42424.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   389.603 ±(99.9%) 558.170 MB/sec [Average]
[info]   (min, avg, max) = (324.435, 389.603, 648.905), stdev = 144.955
[info]   CI (99.9%): [≈ 0, 947.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   44735.158 ±(99.9%) 63826.618 B/op [Average]
[info]   (min, avg, max) = (37185.167, 44735.158, 74385.508), stdev = 16575.570
[info]   CI (99.9%): [≈ 0, 108561.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.520 ±(99.9%) 4.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.520, 2.496), stdev = 1.105
[info]   CI (99.9%): [≈ 0, 4.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   59.815 ±(99.9%) 489.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.815, 287.152), stdev = 127.123
[info]   CI (99.9%): [≈ 0, 549.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter
[info] # Run progress: 33.33% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20614.367 ops/s
[info] # Warmup Iteration   2: 24391.676 ops/s
[info] # Warmup Iteration   3: 24272.449 ops/s
[info] # Warmup Iteration   4: 24310.180 ops/s
[info] # Warmup Iteration   5: 24338.907 ops/s
[info] Iteration   1: 24476.048 ops/s
[info]                  ·gc.alloc.rate:               457.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21374.159 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 24121.022 ops/s
[info]                  ·gc.alloc.rate:               451.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21686.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 24401.444 ops/s
[info]                  ·gc.alloc.rate:                   456.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42876.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23986.818 ops/s
[info]                  ·gc.alloc.rate:               448.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21831.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 24372.318 ops/s
[info]                  ·gc.alloc.rate:                   456.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42991.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter":
[info]   24271.530 ±(99.9%) 799.825 ops/s [Average]
[info]   (min, avg, max) = (23986.818, 24271.530, 24476.048), stdev = 207.712
[info]   CI (99.9%): [23471.706, 25071.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   454.169 ±(99.9%) 14.961 MB/sec [Average]
[info]   (min, avg, max) = (448.830, 454.169, 457.979), stdev = 3.885
[info]   CI (99.9%): [439.208, 469.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   29448.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (29448.018, 29448.018, 29448.019), stdev = 0.001
[info]   CI (99.9%): [29448.016, 29448.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   465.639 ±(99.9%) 701.883 MB/sec [Average]
[info]   (min, avg, max) = (332.410, 465.639, 665.786), stdev = 182.277
[info]   CI (99.9%): [≈ 0, 1167.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   30152.119 ±(99.9%) 44934.685 B/op [Average]
[info]   (min, avg, max) = (21374.159, 30152.119, 42991.702), stdev = 11669.395
[info]   CI (99.9%): [≈ 0, 75086.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.806 ±(99.9%) 4.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 2.685), stdev = 1.201
[info]   CI (99.9%): [≈ 0, 5.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay
[info] # Run progress: 34.13% complete, ETA 00:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1046.358 ops/s
[info] # Warmup Iteration   2: 2392.486 ops/s
[info] # Warmup Iteration   3: 2489.758 ops/s
[info] # Warmup Iteration   4: 2505.086 ops/s
[info] # Warmup Iteration   5: 2515.705 ops/s
[info] Iteration   1: 2528.101 ops/s
[info]                  ·gc.alloc.rate:               1583.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          985528.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1661.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1034271.582 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2522.780 ops/s
[info]                  ·gc.alloc.rate:                   1579.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1043798.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.965 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2521.008 ops/s
[info]                  ·gc.alloc.rate:                   1578.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     839858.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.993 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2510.344 ops/s
[info]                  ·gc.alloc.rate:               1572.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          985528.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1687.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1057971.842 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2514.718 ops/s
[info]                  ·gc.alloc.rate:               1574.947 MB/sec
[info]                  ·gc.alloc.rate.norm:          985528.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1692.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1058786.696 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay":
[info]   2519.390 ±(99.9%) 26.791 ops/s [Average]
[info]   (min, avg, max) = (2510.344, 2519.390, 2528.101), stdev = 6.958
[info]   CI (99.9%): [2492.599, 2546.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1577.851 ±(99.9%) 16.898 MB/sec [Average]
[info]   (min, avg, max) = (1572.106, 1577.851, 1583.325), stdev = 4.388
[info]   CI (99.9%): [1560.953, 1594.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   985528.174 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (985528.171, 985528.174, 985528.184), stdev = 0.006
[info]   CI (99.9%): [985528.152, 985528.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1612.049 ±(99.9%) 575.577 MB/sec [Average]
[info]   (min, avg, max) = (1345.524, 1612.049, 1692.020), stdev = 149.475
[info]   CI (99.9%): [1036.472, 2187.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   1006937.438 ±(99.9%) 361807.208 B/op [Average]
[info]   (min, avg, max) = (839858.652, 1006937.438, 1058786.696), stdev = 93960.183
[info]   CI (99.9%): [645130.230, 1368744.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   7.792 ±(99.9%) 44.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.792, 25.965), stdev = 11.613
[info]   CI (99.9%): [≈ 0, 52.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 34.92% complete, ETA 00:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6588.397 ops/s
[info] # Warmup Iteration   2: 8649.792 ops/s
[info] # Warmup Iteration   3: 8662.444 ops/s
[info] # Warmup Iteration   4: 8711.543 ops/s
[info] # Warmup Iteration   5: 8629.637 ops/s
[info] Iteration   1: 8741.837 ops/s
[info]                  ·gc.alloc.rate:                   2012.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364315.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.222 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8653.055 ops/s
[info]                  ·gc.alloc.rate:                   1992.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369394.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.406 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8726.279 ops/s
[info]                  ·gc.alloc.rate:                   2009.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              362304.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305874.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8725.870 ops/s
[info]                  ·gc.alloc.rate:                   2009.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              362320.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367626.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.280 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 8714.158 ops/s
[info]                  ·gc.alloc.rate:                   2006.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              362320.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368192.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.317 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8712.240 ±(99.9%) 132.910 ops/s [Average]
[info]   (min, avg, max) = (8653.055, 8712.240, 8741.837), stdev = 34.516
[info]   CI (99.9%): [8579.330, 8845.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2005.830 ±(99.9%) 30.444 MB/sec [Average]
[info]   (min, avg, max) = (1992.287, 2005.830, 2012.626), stdev = 7.906
[info]   CI (99.9%): [1975.387, 2036.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362297.776 ±(99.9%) 93.603 B/op [Average]
[info]   (min, avg, max) = (362272.049, 362297.776, 362320.050), stdev = 24.308
[info]   CI (99.9%): [362204.173, 362391.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1965.740 ±(99.9%) 580.859 MB/sec [Average]
[info]   (min, avg, max) = (1696.113, 1965.740, 2038.726), stdev = 150.847
[info]   CI (99.9%): [1384.881, 2546.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   355080.684 ±(99.9%) 106167.235 B/op [Average]
[info]   (min, avg, max) = (305874.713, 355080.684, 369394.364), stdev = 27571.294
[info]   CI (99.9%): [248913.450, 461247.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.145 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.145, 0.229), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26.248 ±(99.9%) 36.790 B/op [Average]
[info]   (min, avg, max) = (15.017, 26.248, 41.222), stdev = 9.554
[info]   CI (99.9%): [≈ 0, 63.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson
[info] # Run progress: 35.71% complete, ETA 00:21:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27042.723 ops/s
[info] # Warmup Iteration   2: 43498.436 ops/s
[info] # Warmup Iteration   3: 43707.826 ops/s
[info] # Warmup Iteration   4: 43962.962 ops/s
[info] # Warmup Iteration   5: 43975.258 ops/s
[info] Iteration   1: 44195.964 ops/s
[info]                  ·gc.alloc.rate:                   640.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23151.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 43990.238 ops/s
[info]                  ·gc.alloc.rate:                   637.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              22808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23331.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44055.888 ops/s
[info]                  ·gc.alloc.rate:                   638.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23344.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43470.521 ops/s
[info]                  ·gc.alloc.rate:                   630.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23753.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 43818.140 ops/s
[info]                  ·gc.alloc.rate:                   635.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23660.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson":
[info]   43906.150 ±(99.9%) 1073.706 ops/s [Average]
[info]   (min, avg, max) = (43470.521, 43906.150, 44195.964), stdev = 278.838
[info]   CI (99.9%): [42832.445, 44979.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   636.324 ±(99.9%) 15.502 MB/sec [Average]
[info]   (min, avg, max) = (630.030, 636.324, 640.505), stdev = 4.026
[info]   CI (99.9%): [620.822, 651.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   22807.847 ±(99.9%) 0.474 B/op [Average]
[info]   (min, avg, max) = (22807.699, 22807.847, 22808.025), stdev = 0.123
[info]   CI (99.9%): [22807.373, 22808.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   654.164 ±(99.9%) 13.056 MB/sec [Average]
[info]   (min, avg, max) = (650.157, 654.164, 658.806), stdev = 3.391
[info]   CI (99.9%): [641.107, 667.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   23448.479 ±(99.9%) 964.460 B/op [Average]
[info]   (min, avg, max) = (23151.457, 23448.479, 23753.993), stdev = 250.467
[info]   CI (99.9%): [22484.019, 24412.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.646 ±(99.9%) 3.795 B/op [Average]
[info]   (min, avg, max) = (0.741, 1.646, 3.014), stdev = 0.986
[info]   CI (99.9%): [≈ 0, 5.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter
[info] # Run progress: 36.51% complete, ETA 00:20:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63401.824 ops/s
[info] # Warmup Iteration   2: 68764.248 ops/s
[info] # Warmup Iteration   3: 69459.258 ops/s
[info] # Warmup Iteration   4: 69284.185 ops/s
[info] # Warmup Iteration   5: 69552.855 ops/s
[info] Iteration   1: 69863.588 ops/s
[info]                  ·gc.alloc.rate:                   526.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7488.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 69692.799 ops/s
[info]                  ·gc.alloc.rate:                   525.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15013.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 67869.872 ops/s
[info]                  ·gc.alloc.rate:               511.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7708.187 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 68683.858 ops/s
[info]                  ·gc.alloc.rate:                   517.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15249.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 69648.547 ops/s
[info]                  ·gc.alloc.rate:               524.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15060.513 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter":
[info]   69151.733 ±(99.9%) 3283.444 ops/s [Average]
[info]   (min, avg, max) = (67869.872, 69151.733, 69863.588), stdev = 852.700
[info]   CI (99.9%): [65868.288, 72435.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   520.984 ±(99.9%) 24.730 MB/sec [Average]
[info]   (min, avg, max) = (511.322, 520.984, 526.341), stdev = 6.422
[info]   CI (99.9%): [496.254, 545.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   11856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11856.006, 11856.006, 11856.007), stdev = 0.001
[info]   CI (99.9%): [11856.005, 11856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   532.373 ±(99.9%) 702.828 MB/sec [Average]
[info]   (min, avg, max) = (332.426, 532.373, 666.554), stdev = 182.522
[info]   CI (99.9%): [≈ 0, 1235.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   12103.814 ±(99.9%) 15844.717 B/op [Average]
[info]   (min, avg, max) = (7488.006, 12103.814, 15249.184), stdev = 4114.823
[info]   CI (99.9%): [≈ 0, 27948.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.849 ±(99.9%) 4.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 2.821), stdev = 1.171
[info]   CI (99.9%): [≈ 0, 5.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 37.30% complete, ETA 00:20:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79722.022 ops/s
[info] # Warmup Iteration   2: 84974.089 ops/s
[info] # Warmup Iteration   3: 84716.212 ops/s
[info] # Warmup Iteration   4: 78895.582 ops/s
[info] # Warmup Iteration   5: 84205.516 ops/s
[info] Iteration   1: 84327.013 ops/s
[info]                  ·gc.alloc.rate:      1.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 84550.225 ops/s
[info]                  ·gc.alloc.rate:      1.290 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 84460.649 ops/s
[info]                  ·gc.alloc.rate:      1.288 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 84319.121 ops/s
[info]                  ·gc.alloc.rate:      1.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 84528.002 ops/s
[info]                  ·gc.alloc.rate:      1.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc":
[info]   84437.002 ±(99.9%) 420.291 ops/s [Average]
[info]   (min, avg, max) = (84319.121, 84437.002, 84550.225), stdev = 109.148
[info]   CI (99.9%): [84016.711, 84857.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1.288 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (1.286, 1.288, 1.290), stdev = 0.002
[info]   CI (99.9%): [1.282, 1.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay
[info] # Run progress: 38.10% complete, ETA 00:20:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2867.600 ops/s
[info] # Warmup Iteration   2: 5909.107 ops/s
[info] # Warmup Iteration   3: 6063.951 ops/s
[info] # Warmup Iteration   4: 6083.059 ops/s
[info] # Warmup Iteration   5: 6075.738 ops/s
[info] Iteration   1: 6088.336 ops/s
[info]                  ·gc.alloc.rate:                   1819.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              470334.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     432257.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6092.145 ops/s
[info]                  ·gc.alloc.rate:                   1820.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              470336.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     521276.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.263 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6114.867 ops/s
[info]                  ·gc.alloc.rate:               1827.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          470334.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1688.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 434549.642 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 6008.616 ops/s
[info]                  ·gc.alloc.rate:                   1795.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              470336.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443507.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.904 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6112.689 ops/s
[info]                  ·gc.alloc.rate:                   1826.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524288.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.719 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay":
[info]   6083.331 ±(99.9%) 167.198 ops/s [Average]
[info]   (min, avg, max) = (6008.616, 6083.331, 6114.867), stdev = 43.421
[info]   CI (99.9%): [5916.132, 6250.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate":
[info]   1818.121 ±(99.9%) 50.113 MB/sec [Average]
[info]   (min, avg, max) = (1795.718, 1818.121, 1827.516), stdev = 13.014
[info]   CI (99.9%): [1768.008, 1868.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   470335.699 ±(99.9%) 3.930 B/op [Average]
[info]   (min, avg, max) = (470334.481, 470335.699, 470336.752), stdev = 1.021
[info]   CI (99.9%): [470331.769, 470339.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1821.716 ±(99.9%) 723.473 MB/sec [Average]
[info]   (min, avg, max) = (1672.362, 1821.716, 2036.524), stdev = 187.884
[info]   CI (99.9%): [1098.243, 2545.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   471175.959 ±(99.9%) 182170.849 B/op [Average]
[info]   (min, avg, max) = (432257.808, 471175.959, 524288.000), stdev = 47309.191
[info]   CI (99.9%): [289005.111, 653346.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   15.082 ±(99.9%) 47.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.082, 32.263), stdev = 12.254
[info]   CI (99.9%): [≈ 0, 62.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter
[info] # Run progress: 38.89% complete, ETA 00:20:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4580993.541 ops/s
[info] # Warmup Iteration   2: 4967531.266 ops/s
[info] # Warmup Iteration   3: 5075466.635 ops/s
[info] # Warmup Iteration   4: 5081384.075 ops/s
[info] # Warmup Iteration   5: 5125576.141 ops/s
[info] Iteration   1: 5136046.410 ops/s
[info]                  ·gc.alloc.rate:                   1540.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     515.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5097501.944 ops/s
[info]                  ·gc.alloc.rate:                   1529.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5086157.496 ops/s
[info]                  ·gc.alloc.rate:                   1525.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     523.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5128075.197 ops/s
[info]                  ·gc.alloc.rate:                   1538.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     519.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5082199.516 ops/s
[info]                  ·gc.alloc.rate:                   1524.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     420.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter":
[info]   5105996.113 ±(99.9%) 94762.343 ops/s [Average]
[info]   (min, avg, max) = (5082199.516, 5105996.113, 5136046.410), stdev = 24609.479
[info]   CI (99.9%): [5011233.770, 5200758.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1531.665 ±(99.9%) 29.139 MB/sec [Average]
[info]   (min, avg, max) = (1524.269, 1531.665, 1540.399), stdev = 7.567
[info]   CI (99.9%): [1502.527, 1560.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1555.942 ±(99.9%) 707.216 MB/sec [Average]
[info]   (min, avg, max) = (1350.700, 1555.942, 1694.533), stdev = 183.662
[info]   CI (99.9%): [848.726, 2263.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   479.361 ±(99.9%) 213.044 B/op [Average]
[info]   (min, avg, max) = (416.894, 479.361, 523.756), stdev = 55.327
[info]   CI (99.9%): [266.317, 692.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.027, 0.032), stdev = 0.005
[info]   CI (99.9%): [0.006, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay
[info] # Run progress: 39.68% complete, ETA 00:19:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139160.193 ops/s
[info] # Warmup Iteration   2: 359575.505 ops/s
[info] # Warmup Iteration   3: 365580.853 ops/s
[info] # Warmup Iteration   4: 366269.688 ops/s
[info] # Warmup Iteration   5: 363081.704 ops/s
[info] Iteration   1: 367942.151 ops/s
[info]                  ·gc.alloc.rate:                   1984.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8603.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.445 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 365477.949 ops/s
[info]                  ·gc.alloc.rate:                   1971.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8711.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.627 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 358383.358 ops/s
[info]                  ·gc.alloc.rate:                   1932.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8919.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 365524.246 ops/s
[info]                  ·gc.alloc.rate:                   1971.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7302.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 364200.622 ops/s
[info]                  ·gc.alloc.rate:                   1964.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8808.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.540 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay":
[info]   364305.665 ±(99.9%) 13772.173 ops/s [Average]
[info]   (min, avg, max) = (358383.358, 364305.665, 367942.151), stdev = 3576.590
[info]   CI (99.9%): [350533.492, 378077.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1964.847 ±(99.9%) 74.421 MB/sec [Average]
[info]   (min, avg, max) = (1932.862, 1964.847, 1984.523), stdev = 19.327
[info]   CI (99.9%): [1890.426, 2039.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8488.001, 8488.001, 8488.001), stdev = 0.001
[info]   CI (99.9%): [8488.001, 8488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1960.066 ±(99.9%) 569.668 MB/sec [Average]
[info]   (min, avg, max) = (1696.022, 1960.066, 2038.415), stdev = 147.941
[info]   CI (99.9%): [1390.398, 2529.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8469.180 ±(99.9%) 2551.312 B/op [Average]
[info]   (min, avg, max) = (7302.533, 8469.180, 8919.682), stdev = 662.568
[info]   CI (99.9%): [5917.868, 11020.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.431 ±(99.9%) 0.613 B/op [Average]
[info]   (min, avg, max) = (0.269, 0.431, 0.627), stdev = 0.159
[info]   CI (99.9%): [≈ 0, 1.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter
[info] # Run progress: 40.48% complete, ETA 00:19:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3061361.981 ops/s
[info] # Warmup Iteration   2: 3340716.606 ops/s
[info] # Warmup Iteration   3: 3402669.945 ops/s
[info] # Warmup Iteration   4: 3405519.585 ops/s
[info] # Warmup Iteration   5: 3387238.294 ops/s
[info] Iteration   1: 3404001.781 ops/s
[info]                  ·gc.alloc.rate:                   553.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 3421286.489 ops/s
[info]                  ·gc.alloc.rate:               556.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.060 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3399799.248 ops/s
[info]                  ·gc.alloc.rate:                   553.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3368702.731 ops/s
[info]                  ·gc.alloc.rate:                   548.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3353661.800 ops/s
[info]                  ·gc.alloc.rate:               545.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156.615 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter":
[info]   3389490.410 ±(99.9%) 106218.804 ops/s [Average]
[info]   (min, avg, max) = (3353661.800, 3389490.410, 3421286.489), stdev = 27584.686
[info]   CI (99.9%): [3283271.606, 3495709.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   551.400 ±(99.9%) 17.234 MB/sec [Average]
[info]   (min, avg, max) = (545.599, 551.400, 556.552), stdev = 4.476
[info]   CI (99.9%): [534.166, 568.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   533.101 ±(99.9%) 702.432 MB/sec [Average]
[info]   (min, avg, max) = (332.756, 533.101, 666.862), stdev = 182.419
[info]   CI (99.9%): [≈ 0, 1235.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   247.480 ±(99.9%) 325.731 B/op [Average]
[info]   (min, avg, max) = (153.060, 247.480, 311.522), stdev = 84.591
[info]   CI (99.9%): [≈ 0, 573.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.029), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay
[info] # Run progress: 41.27% complete, ETA 00:19:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101129.703 ops/s
[info] # Warmup Iteration   2: 347142.541 ops/s
[info] # Warmup Iteration   3: 356772.593 ops/s
[info] # Warmup Iteration   4: 357817.349 ops/s
[info] # Warmup Iteration   5: 356042.066 ops/s
[info] Iteration   1: 356055.673 ops/s
[info]                  ·gc.alloc.rate:                   1395.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7316.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 354679.522 ops/s
[info]                  ·gc.alloc.rate:                   1390.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5920.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 357008.413 ops/s
[info]                  ·gc.alloc.rate:                   1399.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5911.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 358453.317 ops/s
[info]                  ·gc.alloc.rate:                   1404.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5913.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 357257.695 ops/s
[info]                  ·gc.alloc.rate:                   1400.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5948.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay":
[info]   356690.924 ±(99.9%) 5437.915 ops/s [Average]
[info]   (min, avg, max) = (354679.522, 356690.924, 358453.317), stdev = 1412.209
[info]   CI (99.9%): [351253.009, 362128.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1398.006 ±(99.9%) 21.194 MB/sec [Average]
[info]   (min, avg, max) = (1390.157, 1398.006, 1404.870), stdev = 5.504
[info]   CI (99.9%): [1376.811, 1419.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6168.001, 6168.001, 6168.001), stdev = 0.001
[info]   CI (99.9%): [6168.001, 6168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1405.654 ±(99.9%) 538.332 MB/sec [Average]
[info]   (min, avg, max) = (1334.446, 1405.654, 1655.507), stdev = 139.803
[info]   CI (99.9%): [867.322, 1943.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   6202.237 ±(99.9%) 2400.261 B/op [Average]
[info]   (min, avg, max) = (5911.317, 6202.237, 7316.989), stdev = 623.340
[info]   CI (99.9%): [3801.977, 8602.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.294 ±(99.9%) 0.528 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.294, 0.462), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce
[info] # Run progress: 42.06% complete, ETA 00:19:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13678.274 ops/s
[info] # Warmup Iteration   2: 16215.560 ops/s
[info] # Warmup Iteration   3: 16334.175 ops/s
[info] # Warmup Iteration   4: 16189.177 ops/s
[info] # Warmup Iteration   5: 16335.404 ops/s
[info] Iteration   1: 16378.982 ops/s
[info]                  ·gc.alloc.rate:                   2151.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              206744.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194955.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.000 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16275.728 ops/s
[info]                  ·gc.alloc.rate:                   2138.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              206743.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229470.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.065 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 16431.465 ops/s
[info]                  ·gc.alloc.rate:                   2158.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              206744.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195212.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.970 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16263.726 ops/s
[info]                  ·gc.alloc.rate:                   2136.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              206744.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197292.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.073 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16279.908 ops/s
[info]                  ·gc.alloc.rate:                   2138.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              206744.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230287.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.036 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce":
[info]   16325.962 ±(99.9%) 288.540 ops/s [Average]
[info]   (min, avg, max) = (16263.726, 16325.962, 16431.465), stdev = 74.933
[info]   CI (99.9%): [16037.422, 16614.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   2144.831 ±(99.9%) 38.033 MB/sec [Average]
[info]   (min, avg, max) = (2136.629, 2144.831, 2158.716), stdev = 9.877
[info]   CI (99.9%): [2106.798, 2182.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206743.834 ±(99.9%) 1.659 B/op [Average]
[info]   (min, avg, max) = (206743.063, 206743.834, 206744.028), stdev = 0.431
[info]   CI (99.9%): [206742.175, 206745.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2172.398 ±(99.9%) 722.221 MB/sec [Average]
[info]   (min, avg, max) = (2029.159, 2172.398, 2382.296), stdev = 187.558
[info]   CI (99.9%): [1450.177, 2894.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   209443.841 ±(99.9%) 71925.986 B/op [Average]
[info]   (min, avg, max) = (194955.899, 209443.841, 230287.508), stdev = 18678.950
[info]   CI (99.9%): [137517.855, 281369.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.829 ±(99.9%) 6.904 B/op [Average]
[info]   (min, avg, max) = (6.036, 8.829, 10.073), stdev = 1.793
[info]   CI (99.9%): [1.925, 15.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson
[info] # Run progress: 42.86% complete, ETA 00:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30907.092 ops/s
[info] # Warmup Iteration   2: 40895.774 ops/s
[info] # Warmup Iteration   3: 40793.835 ops/s
[info] # Warmup Iteration   4: 41462.816 ops/s
[info] # Warmup Iteration   5: 41784.145 ops/s
[info] Iteration   1: 41373.762 ops/s
[info]                  ·gc.alloc.rate:               294.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          11208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9729.918 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 40656.638 ops/s
[info]                  ·gc.alloc.rate:                   289.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              11208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12673.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.847 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41802.237 ops/s
[info]                  ·gc.alloc.rate:                   297.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              11208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12326.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 41866.486 ops/s
[info]                  ·gc.alloc.rate:                   298.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              11208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12294.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.565 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41779.732 ops/s
[info]                  ·gc.alloc.rate:               297.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          11208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12320.247 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson":
[info]   41495.771 ±(99.9%) 1954.952 ops/s [Average]
[info]   (min, avg, max) = (40656.638, 41495.771, 41866.486), stdev = 507.695
[info]   CI (99.9%): [39540.819, 43450.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   295.537 ±(99.9%) 13.929 MB/sec [Average]
[info]   (min, avg, max) = (289.557, 295.537, 298.179), stdev = 3.617
[info]   CI (99.9%): [281.608, 309.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   11208.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (11208.010, 11208.011, 11208.011), stdev = 0.001
[info]   CI (99.9%): [11208.009, 11208.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   312.965 ±(99.9%) 123.030 MB/sec [Average]
[info]   (min, avg, max) = (255.811, 312.965, 327.431), stdev = 31.950
[info]   CI (99.9%): [189.935, 435.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   11868.897 ±(99.9%) 4643.423 B/op [Average]
[info]   (min, avg, max) = (9729.918, 11868.897, 12673.366), stdev = 1205.882
[info]   CI (99.9%): [7225.474, 16512.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.425 ±(99.9%) 3.526 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 2.063), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.439 ±(99.9%) 136.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.439, 79.847), stdev = 35.452
[info]   CI (99.9%): [≈ 0, 152.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter
[info] # Run progress: 43.65% complete, ETA 00:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78576.637 ops/s
[info] # Warmup Iteration   2: 80787.238 ops/s
[info] # Warmup Iteration   3: 81098.936 ops/s
[info] # Warmup Iteration   4: 80926.398 ops/s
[info] # Warmup Iteration   5: 81682.605 ops/s
[info] Iteration   1: 81444.804 ops/s
[info]                  ·gc.alloc.rate:                   634.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12872.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 80807.843 ops/s
[info]                  ·gc.alloc.rate:                   629.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12973.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 81342.878 ops/s
[info]                  ·gc.alloc.rate:                   633.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12914.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 77270.793 ops/s
[info]                  ·gc.alloc.rate:                   601.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13608.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80992.559 ops/s
[info]                  ·gc.alloc.rate:                   630.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13008.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter":
[info]   80371.776 ±(99.9%) 6748.534 ops/s [Average]
[info]   (min, avg, max) = (77270.793, 80371.776, 81444.804), stdev = 1752.573
[info]   CI (99.9%): [73623.241, 87120.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   625.978 ±(99.9%) 52.346 MB/sec [Average]
[info]   (min, avg, max) = (601.918, 625.978, 634.275), stdev = 13.594
[info]   CI (99.9%): [573.632, 678.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   12256.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12256.005, 12256.005, 12256.006), stdev = 0.001
[info]   CI (99.9%): [12256.005, 12256.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   667.574 ±(99.9%) 5.722 MB/sec [Average]
[info]   (min, avg, max) = (666.183, 667.574, 669.665), stdev = 1.486
[info]   CI (99.9%): [661.852, 673.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   13075.640 ±(99.9%) 1164.815 B/op [Average]
[info]   (min, avg, max) = (12872.597, 13075.640, 13608.531), stdev = 302.499
[info]   CI (99.9%): [11910.825, 14240.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1.223 ±(99.9%) 2.902 B/op [Average]
[info]   (min, avg, max) = (0.405, 1.223, 2.417), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 4.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay
[info] # Run progress: 44.44% complete, ETA 00:18:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5549.892 ops/s
[info] # Warmup Iteration   2: 8781.013 ops/s
[info] # Warmup Iteration   3: 8956.330 ops/s
[info] # Warmup Iteration   4: 8970.546 ops/s
[info] # Warmup Iteration   5: 8668.626 ops/s
[info] Iteration   1: 8575.275 ops/s
[info]                  ·gc.alloc.rate:                   2963.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              543676.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     498250.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.640 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 8478.801 ops/s
[info]                  ·gc.alloc.rate:                   2929.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              543656.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567561.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.182 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 8630.300 ops/s
[info]                  ·gc.alloc.rate:                   2981.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              543659.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     558540.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.591 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8696.481 ops/s
[info]                  ·gc.alloc.rate:                   3004.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              543656.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492766.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.902 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 8697.105 ops/s
[info]                  ·gc.alloc.rate:                   3004.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              543656.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554298.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.299 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay":
[info]   8615.593 ±(99.9%) 353.658 ops/s [Average]
[info]   (min, avg, max) = (8478.801, 8615.593, 8697.105), stdev = 91.844
[info]   CI (99.9%): [8261.935, 8969.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   2976.721 ±(99.9%) 121.751 MB/sec [Average]
[info]   (min, avg, max) = (2929.381, 2976.721, 3004.643), stdev = 31.618
[info]   CI (99.9%): [2854.970, 3098.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   543660.842 ±(99.9%) 34.423 B/op [Average]
[info]   (min, avg, max) = (543656.050, 543660.842, 543676.616), stdev = 8.939
[info]   CI (99.9%): [543626.419, 543695.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2924.806 ±(99.9%) 722.055 MB/sec [Average]
[info]   (min, avg, max) = (2715.637, 2924.806, 3063.522), stdev = 187.515
[info]   CI (99.9%): [2202.751, 3646.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   534283.629 ±(99.9%) 137743.369 B/op [Average]
[info]   (min, avg, max) = (492766.834, 534283.629, 567561.388), stdev = 35771.515
[info]   CI (99.9%): [396540.260, 672026.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.187), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   16.723 ±(99.9%) 44.414 B/op [Average]
[info]   (min, avg, max) = (7.591, 16.723, 33.902), stdev = 11.534
[info]   CI (99.9%): [≈ 0, 61.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.200, 12.000), stdev = 1.643
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce
[info] # Run progress: 45.24% complete, ETA 00:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18471.162 ops/s
[info] # Warmup Iteration   2: 18558.950 ops/s
[info] # Warmup Iteration   3: 20624.490 ops/s
[info] # Warmup Iteration   4: 23816.368 ops/s
[info] # Warmup Iteration   5: 24026.342 ops/s
[info] Iteration   1: 22585.634 ops/s
[info]                  ·gc.alloc.rate:                   1378.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              96035.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116583.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.352 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 22593.963 ops/s
[info]                  ·gc.alloc.rate:                   1379.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              96024.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93637.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 22183.427 ops/s
[info]                  ·gc.alloc.rate:                   1354.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              96024.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95675.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23006.137 ops/s
[info]                  ·gc.alloc.rate:                   1404.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              96024.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92508.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.270 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23756.598 ops/s
[info]                  ·gc.alloc.rate:                   1449.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              96024.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89749.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.516 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce":
[info]   22825.152 ±(99.9%) 2296.689 ops/s [Average]
[info]   (min, avg, max) = (22183.427, 22825.152, 23756.598), stdev = 596.443
[info]   CI (99.9%): [20528.463, 25121.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   1393.272 ±(99.9%) 139.803 MB/sec [Average]
[info]   (min, avg, max) = (1354.090, 1393.272, 1449.918), stdev = 36.307
[info]   CI (99.9%): [1253.469, 1533.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   96026.319 ±(99.9%) 19.807 B/op [Average]
[info]   (min, avg, max) = (96024.018, 96026.319, 96035.521), stdev = 5.144
[info]   CI (99.9%): [96006.512, 96046.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1415.203 ±(99.9%) 556.941 MB/sec [Average]
[info]   (min, avg, max) = (1344.929, 1415.203, 1673.843), stdev = 144.636
[info]   CI (99.9%): [858.262, 1972.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97630.720 ±(99.9%) 41620.964 B/op [Average]
[info]   (min, avg, max) = (89749.351, 97630.720, 116583.232), stdev = 10808.832
[info]   CI (99.9%): [56009.756, 139251.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.131 ±(99.9%) 0.281 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.131, 0.229), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.087 ±(99.9%) 20.199 B/op [Average]
[info]   (min, avg, max) = (4.352, 9.087, 16.245), stdev = 5.246
[info]   CI (99.9%): [≈ 0, 29.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson
[info] # Run progress: 46.03% complete, ETA 00:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75275.452 ops/s
[info] # Warmup Iteration   2: 101135.078 ops/s
[info] # Warmup Iteration   3: 97680.864 ops/s
[info] # Warmup Iteration   4: 102087.560 ops/s
[info] # Warmup Iteration   5: 102314.348 ops/s
[info] Iteration   1: 103112.655 ops/s
[info]                  ·gc.alloc.rate:               811.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          12392.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10040.910 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 101450.411 ops/s
[info]                  ·gc.alloc.rate:                   798.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10230.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 102387.434 ops/s
[info]                  ·gc.alloc.rate:                   806.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15261.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 100322.432 ops/s
[info]                  ·gc.alloc.rate:                   789.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10418.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 98998.675 ops/s
[info]                  ·gc.alloc.rate:                   779.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15909.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.655 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson":
[info]   101254.321 ±(99.9%) 6307.349 ops/s [Average]
[info]   (min, avg, max) = (98998.675, 101254.321, 103112.655), stdev = 1637.999
[info]   CI (99.9%): [94946.972, 107561.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   797.375 ±(99.9%) 49.858 MB/sec [Average]
[info]   (min, avg, max) = (779.559, 797.375, 811.986), stdev = 12.948
[info]   CI (99.9%): [747.517, 847.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   12392.247 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (12392.238, 12392.247, 12392.257), stdev = 0.008
[info]   CI (99.9%): [12392.216, 12392.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   795.119 ±(99.9%) 709.808 MB/sec [Average]
[info]   (min, avg, max) = (657.918, 795.119, 1000.838), stdev = 184.335
[info]   CI (99.9%): [85.311, 1504.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   12372.126 ±(99.9%) 11341.656 B/op [Average]
[info]   (min, avg, max) = (10040.910, 12372.126, 15909.816), stdev = 2945.392
[info]   CI (99.9%): [1030.470, 23713.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.042 ±(99.9%) 3.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.042, 1.655), stdev = 0.812
[info]   CI (99.9%): [≈ 0, 4.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter
[info] # Run progress: 46.83% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113803.345 ops/s
[info] # Warmup Iteration   2: 115544.362 ops/s
[info] # Warmup Iteration   3: 116138.423 ops/s
[info] # Warmup Iteration   4: 117393.007 ops/s
[info] # Warmup Iteration   5: 117819.388 ops/s
[info] Iteration   1: 115246.619 ops/s
[info]                  ·gc.alloc.rate:                   478.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              6536.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9096.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 114223.910 ops/s
[info]                  ·gc.alloc.rate:               474.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          6536.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4589.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 117397.083 ops/s
[info]                  ·gc.alloc.rate:                   487.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              6536.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8930.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 117720.752 ops/s
[info]                  ·gc.alloc.rate:               488.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          6536.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4452.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 116709.255 ops/s
[info]                  ·gc.alloc.rate:               484.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          6536.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9000.498 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter":
[info]   116259.524 ±(99.9%) 5711.814 ops/s [Average]
[info]   (min, avg, max) = (114223.910, 116259.524, 117720.752), stdev = 1483.340
[info]   CI (99.9%): [110547.710, 121971.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   482.864 ±(99.9%) 23.648 MB/sec [Average]
[info]   (min, avg, max) = (474.377, 482.864, 488.907), stdev = 6.141
[info]   CI (99.9%): [459.216, 506.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   6536.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6536.004, 6536.004, 6536.004), stdev = 0.001
[info]   CI (99.9%): [6536.003, 6536.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   533.224 ±(99.9%) 703.537 MB/sec [Average]
[info]   (min, avg, max) = (333.071, 533.224, 667.484), stdev = 182.706
[info]   CI (99.9%): [≈ 0, 1236.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   7213.853 ±(99.9%) 9470.292 B/op [Average]
[info]   (min, avg, max) = (4452.703, 7213.853, 9096.695), stdev = 2459.405
[info]   CI (99.9%): [≈ 0, 16684.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.449 ±(99.9%) 2.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.449, 1.674), stdev = 0.728
[info]   CI (99.9%): [≈ 0, 3.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 47.62% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138493.961 ops/s
[info] # Warmup Iteration   2: 128828.408 ops/s
[info] # Warmup Iteration   3: 143189.328 ops/s
[info] # Warmup Iteration   4: 128269.404 ops/s
[info] # Warmup Iteration   5: 143496.977 ops/s
[info] Iteration   1: 143997.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 143531.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 143878.401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 142244.194 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 143241.233 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc":
[info]   143378.458 ±(99.9%) 2696.483 ops/s [Average]
[info]   (min, avg, max) = (142244.194, 143378.458, 143997.181), stdev = 700.268
[info]   CI (99.9%): [140681.975, 146074.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay
[info] # Run progress: 48.41% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2692.768 ops/s
[info] # Warmup Iteration   2: 3558.708 ops/s
[info] # Warmup Iteration   3: 3739.246 ops/s
[info] # Warmup Iteration   4: 3750.889 ops/s
[info] # Warmup Iteration   5: 3749.155 ops/s
[info] Iteration   1: 3757.363 ops/s
[info]                  ·gc.alloc.rate:               1608.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          673440.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1674.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 701095.762 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 3749.047 ops/s
[info]                  ·gc.alloc.rate:                   1604.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              673440.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     564832.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3753.122 ops/s
[info]                  ·gc.alloc.rate:                   1606.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              673440.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     707523.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.729 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3749.185 ops/s
[info]                  ·gc.alloc.rate:                   1604.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              673440.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710325.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.151 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3755.629 ops/s
[info]                  ·gc.alloc.rate:                   1607.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              673439.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710307.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.722 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay":
[info]   3752.869 ±(99.9%) 14.414 ops/s [Average]
[info]   (min, avg, max) = (3749.047, 3752.869, 3757.363), stdev = 3.743
[info]   CI (99.9%): [3738.455, 3767.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate":
[info]   1606.086 ±(99.9%) 6.306 MB/sec [Average]
[info]   (min, avg, max) = (1604.363, 1606.086, 1608.140), stdev = 1.638
[info]   CI (99.9%): [1599.780, 1612.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   673440.416 ±(99.9%) 1.309 B/op [Average]
[info]   (min, avg, max) = (673439.943, 673440.416, 673440.889), stdev = 0.340
[info]   CI (99.9%): [673439.108, 673441.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1618.978 ±(99.9%) 589.241 MB/sec [Average]
[info]   (min, avg, max) = (1345.623, 1618.978, 1695.244), stdev = 153.024
[info]   CI (99.9%): [1029.736, 2208.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   678817.099 ±(99.9%) 245787.755 B/op [Average]
[info]   (min, avg, max) = (564832.939, 678817.099, 710325.677), stdev = 63830.299
[info]   CI (99.9%): [433029.344, 924604.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   19.216 ±(99.9%) 93.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.216, 61.151), stdev = 24.243
[info]   CI (99.9%): [≈ 0, 112.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 49.21% complete, ETA 00:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 509543.871 ops/s
[info] # Warmup Iteration   2: 724814.551 ops/s
[info] # Warmup Iteration   3: 722167.573 ops/s
[info] # Warmup Iteration   4: 726529.745 ops/s
[info] # Warmup Iteration   5: 731601.001 ops/s
[info] Iteration   1: 725743.835 ops/s
[info]                  ·gc.alloc.rate:                   2645.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5883.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 725449.902 ops/s
[info]                  ·gc.alloc.rate:                   2644.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5896.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.452 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 732765.997 ops/s
[info]                  ·gc.alloc.rate:                   2670.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5845.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 722957.278 ops/s
[info]                  ·gc.alloc.rate:                   2635.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5187.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 721471.957 ops/s
[info]                  ·gc.alloc.rate:                   2629.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5197.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   725677.794 ±(99.9%) 16716.982 ops/s [Average]
[info]   (min, avg, max) = (721471.957, 725677.794, 732765.997), stdev = 4341.347
[info]   CI (99.9%): [708960.812, 742394.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2644.956 ±(99.9%) 60.932 MB/sec [Average]
[info]   (min, avg, max) = (2629.636, 2644.956, 2670.806), stdev = 15.824
[info]   CI (99.9%): [2584.024, 2705.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2583.810 ±(99.9%) 706.393 MB/sec [Average]
[info]   (min, avg, max) = (2382.876, 2583.810, 2721.891), stdev = 183.448
[info]   CI (99.9%): [1877.417, 3290.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5602.154 ±(99.9%) 1442.206 B/op [Average]
[info]   (min, avg, max) = (5187.058, 5602.154, 5896.495), stdev = 374.536
[info]   CI (99.9%): [4159.949, 7044.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.137, 0.208), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.298 ±(99.9%) 0.438 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.298, 0.452), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson
[info] # Run progress: 50.00% complete, ETA 00:16:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297820.335 ops/s
[info] # Warmup Iteration   2: 646837.632 ops/s
[info] # Warmup Iteration   3: 643984.207 ops/s
[info] # Warmup Iteration   4: 646357.910 ops/s
[info] # Warmup Iteration   5: 643904.638 ops/s
[info] Iteration   1: 638405.666 ops/s
[info]                  ·gc.alloc.rate:                   743.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2404.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 634289.843 ops/s
[info]                  ·gc.alloc.rate:               738.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1621.407 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 645760.623 ops/s
[info]                  ·gc.alloc.rate:                   751.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1597.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 636948.453 ops/s
[info]                  ·gc.alloc.rate:                   741.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1624.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 642718.665 ops/s
[info]                  ·gc.alloc.rate:                   748.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2428.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson":
[info]   639624.650 ±(99.9%) 17680.622 ops/s [Average]
[info]   (min, avg, max) = (634289.843, 639624.650, 645760.623), stdev = 4591.601
[info]   CI (99.9%): [621944.028, 657305.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate":
[info]   744.614 ±(99.9%) 20.494 MB/sec [Average]
[info]   (min, avg, max) = (738.396, 744.614, 751.709), stdev = 5.322
[info]   CI (99.9%): [724.120, 765.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   786.787 ±(99.9%) 692.542 MB/sec [Average]
[info]   (min, avg, max) = (653.515, 786.787, 991.594), stdev = 179.851
[info]   CI (99.9%): [94.245, 1479.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1935.305 ±(99.9%) 1692.217 B/op [Average]
[info]   (min, avg, max) = (1597.543, 1935.305, 2428.041), stdev = 439.463
[info]   CI (99.9%): [243.088, 3627.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.123 ±(99.9%) 0.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.203), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter
[info] # Run progress: 50.79% complete, ETA 00:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3462105.800 ops/s
[info] # Warmup Iteration   2: 4517742.428 ops/s
[info] # Warmup Iteration   3: 4427965.946 ops/s
[info] # Warmup Iteration   4: 4550686.820 ops/s
[info] # Warmup Iteration   5: 4543570.068 ops/s
[info] Iteration   1: 4530428.486 ops/s
[info]                  ·gc.alloc.rate:                   1796.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     586.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4519607.295 ops/s
[info]                  ·gc.alloc.rate:                   1792.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     589.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4542027.572 ops/s
[info]                  ·gc.alloc.rate:                   1801.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     705.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4517594.253 ops/s
[info]                  ·gc.alloc.rate:                   1791.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     591.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4563448.371 ops/s
[info]                  ·gc.alloc.rate:                   1809.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     586.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter":
[info]   4534621.195 ±(99.9%) 72520.346 ops/s [Average]
[info]   (min, avg, max) = (4517594.253, 4534621.195, 4563448.371), stdev = 18833.304
[info]   CI (99.9%): [4462100.849, 4607141.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1798.173 ±(99.9%) 28.832 MB/sec [Average]
[info]   (min, avg, max) = (1791.293, 1798.173, 1809.516), stdev = 7.488
[info]   CI (99.9%): [1769.341, 1827.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1762.895 ±(99.9%) 587.082 MB/sec [Average]
[info]   (min, avg, max) = (1687.780, 1762.895, 2035.494), stdev = 152.463
[info]   CI (99.9%): [1175.813, 2349.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   611.725 ±(99.9%) 201.391 B/op [Average]
[info]   (min, avg, max) = (586.076, 611.725, 705.183), stdev = 52.300
[info]   CI (99.9%): [410.334, 813.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.039, 0.058), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay
[info] # Run progress: 51.59% complete, ETA 00:15:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71088.050 ops/s
[info] # Warmup Iteration   2: 247895.244 ops/s
[info] # Warmup Iteration   3: 257167.072 ops/s
[info] # Warmup Iteration   4: 256346.982 ops/s
[info] # Warmup Iteration   5: 256647.498 ops/s
[info] Iteration   1: 257631.571 ops/s
[info]                  ·gc.alloc.rate:                   1789.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10195.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 255264.325 ops/s
[info]                  ·gc.alloc.rate:                   1772.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12430.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.898 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 255115.357 ops/s
[info]                  ·gc.alloc.rate:                   1771.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10409.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.899 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 253730.856 ops/s
[info]                  ·gc.alloc.rate:                   1762.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10498.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 256663.587 ops/s
[info]                  ·gc.alloc.rate:                   1782.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10399.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay":
[info]   255681.139 ±(99.9%) 5797.372 ops/s [Average]
[info]   (min, avg, max) = (253730.856, 255681.139, 257631.571), stdev = 1505.559
[info]   CI (99.9%): [249883.767, 261478.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1775.495 ±(99.9%) 40.010 MB/sec [Average]
[info]   (min, avg, max) = (1762.077, 1775.495, 1789.022), stdev = 10.390
[info]   CI (99.9%): [1735.485, 1815.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10928.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10928.002, 10928.002, 10928.002), stdev = 0.001
[info]   CI (99.9%): [10928.002, 10928.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1752.382 ±(99.9%) 569.752 MB/sec [Average]
[info]   (min, avg, max) = (1669.079, 1752.382, 2016.405), stdev = 147.963
[info]   CI (99.9%): [1182.630, 2322.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   10786.858 ±(99.9%) 3564.045 B/op [Average]
[info]   (min, avg, max) = (10195.342, 10786.858, 12430.582), stdev = 925.571
[info]   CI (99.9%): [7222.813, 14350.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.590 ±(99.9%) 1.140 B/op [Average]
[info]   (min, avg, max) = (0.255, 0.590, 0.899), stdev = 0.296
[info]   CI (99.9%): [≈ 0, 1.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 52.38% complete, ETA 00:15:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 647135.372 ops/s
[info] # Warmup Iteration   2: 921003.350 ops/s
[info] # Warmup Iteration   3: 937904.593 ops/s
[info] # Warmup Iteration   4: 931130.553 ops/s
[info] # Warmup Iteration   5: 929716.958 ops/s
[info] Iteration   1: 938094.694 ops/s
[info]                  ·gc.alloc.rate:                   2260.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3404.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 935726.425 ops/s
[info]                  ·gc.alloc.rate:                   2254.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3993.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 917656.845 ops/s
[info]                  ·gc.alloc.rate:                   2211.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3495.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 933897.690 ops/s
[info]                  ·gc.alloc.rate:                   2250.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4011.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 935163.076 ops/s
[info]                  ·gc.alloc.rate:                   2253.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4010.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   932107.746 ±(99.9%) 31654.182 ops/s [Average]
[info]   (min, avg, max) = (917656.845, 932107.746, 938094.694), stdev = 8220.491
[info]   CI (99.9%): [900453.564, 963761.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2246.025 ±(99.9%) 76.397 MB/sec [Average]
[info]   (min, avg, max) = (2211.129, 2246.025, 2260.315), stdev = 19.840
[info]   CI (99.9%): [2169.628, 2322.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3792.000, 3792.000, 3792.000), stdev = 0.001
[info]   CI (99.9%): [3792.000, 3792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2241.254 ±(99.9%) 728.717 MB/sec [Average]
[info]   (min, avg, max) = (2029.489, 2241.254, 2383.367), stdev = 189.245
[info]   CI (99.9%): [1512.537, 2969.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3783.131 ±(99.9%) 1176.587 B/op [Average]
[info]   (min, avg, max) = (3404.758, 3783.131, 4011.124), stdev = 305.556
[info]   CI (99.9%): [2606.545, 4959.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.211 ±(99.9%) 0.289 B/op [Average]
[info]   (min, avg, max) = (0.140, 0.211, 0.315), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson
[info] # Run progress: 53.17% complete, ETA 00:15:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 988121.317 ops/s
[info] # Warmup Iteration   2: 1809788.088 ops/s
[info] # Warmup Iteration   3: 1875063.274 ops/s
[info] # Warmup Iteration   4: 1836943.522 ops/s
[info] # Warmup Iteration   5: 1864993.376 ops/s
[info] Iteration   1: 1848174.297 ops/s
[info]                  ·gc.alloc.rate:                   1249.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1124.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1808037.532 ops/s
[info]                  ·gc.alloc.rate:                   1222.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1156.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1865916.738 ops/s
[info]                  ·gc.alloc.rate:                   1261.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1127.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1859614.032 ops/s
[info]                  ·gc.alloc.rate:                   1257.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     852.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1799670.977 ops/s
[info]                  ·gc.alloc.rate:                   1217.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1177.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson":
[info]   1836282.715 ±(99.9%) 117146.706 ops/s [Average]
[info]   (min, avg, max) = (1799670.977, 1836282.715, 1865916.738), stdev = 30422.628
[info]   CI (99.9%): [1719136.009, 1953429.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1241.862 ±(99.9%) 78.797 MB/sec [Average]
[info]   (min, avg, max) = (1217.187, 1241.862, 1261.584), stdev = 20.463
[info]   CI (99.9%): [1163.065, 1320.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1268.326 ±(99.9%) 563.301 MB/sec [Average]
[info]   (min, avg, max) = (1007.240, 1268.326, 1347.582), stdev = 146.287
[info]   CI (99.9%): [705.025, 1831.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1087.668 ±(99.9%) 514.060 B/op [Average]
[info]   (min, avg, max) = (852.122, 1087.668, 1177.985), stdev = 133.500
[info]   CI (99.9%): [573.608, 1601.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.104 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.104, 0.145), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter
[info] # Run progress: 53.97% complete, ETA 00:15:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6354213.078 ops/s
[info] # Warmup Iteration   2: 7207438.768 ops/s
[info] # Warmup Iteration   3: 7393310.015 ops/s
[info] # Warmup Iteration   4: 7409330.597 ops/s
[info] # Warmup Iteration   5: 7384699.750 ops/s
[info] Iteration   1: 7070256.213 ops/s
[info]                  ·gc.alloc.rate:                   862.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7180747.261 ops/s
[info]                  ·gc.alloc.rate:                   876.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7091613.062 ops/s
[info]                  ·gc.alloc.rate:                   865.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7245161.252 ops/s
[info]                  ·gc.alloc.rate:                   883.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7310709.630 ops/s
[info]                  ·gc.alloc.rate:               891.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144.916 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter":
[info]   7179697.484 ±(99.9%) 390736.236 ops/s [Average]
[info]   (min, avg, max) = (7070256.213, 7179697.484, 7310709.630), stdev = 101472.960
[info]   CI (99.9%): [6788961.247, 7570433.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   876.005 ±(99.9%) 47.424 MB/sec [Average]
[info]   (min, avg, max) = (862.827, 876.005, 891.937), stdev = 12.316
[info]   CI (99.9%): [828.581, 923.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   871.264 ±(99.9%) 703.918 MB/sec [Average]
[info]   (min, avg, max) = (668.863, 871.264, 1008.021), stdev = 182.805
[info]   CI (99.9%): [167.345, 1575.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   191.253 ±(99.9%) 160.075 B/op [Average]
[info]   (min, avg, max) = (144.916, 191.253, 223.023), stdev = 41.571
[info]   CI (99.9%): [31.178, 351.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.167), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.037), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay
[info] # Run progress: 54.76% complete, ETA 00:14:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204074.124 ops/s
[info] # Warmup Iteration   2: 549644.375 ops/s
[info] # Warmup Iteration   3: 556145.136 ops/s
[info] # Warmup Iteration   4: 556928.262 ops/s
[info] # Warmup Iteration   5: 560220.815 ops/s
[info] Iteration   1: 559835.622 ops/s
[info]                  ·gc.alloc.rate:                   1949.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5654.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 558917.974 ops/s
[info]                  ·gc.alloc.rate:                   1946.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4745.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 557297.868 ops/s
[info]                  ·gc.alloc.rate:                   1940.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5730.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 557307.869 ops/s
[info]                  ·gc.alloc.rate:                   1940.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5747.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.353 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 552961.935 ops/s
[info]                  ·gc.alloc.rate:                   1925.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5801.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay":
[info]   557264.254 ±(99.9%) 10162.291 ops/s [Average]
[info]   (min, avg, max) = (552961.935, 557264.254, 559835.622), stdev = 2639.115
[info]   CI (99.9%): [547101.963, 567426.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1940.580 ±(99.9%) 35.047 MB/sec [Average]
[info]   (min, avg, max) = (1925.808, 1940.580, 1949.486), stdev = 9.102
[info]   CI (99.9%): [1905.534, 1975.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5480.001, 5480.001, 5480.001), stdev = 0.001
[info]   CI (99.9%): [5480.001, 5480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1960.089 ±(99.9%) 592.489 MB/sec [Average]
[info]   (min, avg, max) = (1685.478, 1960.089, 2038.921), stdev = 153.867
[info]   CI (99.9%): [1367.600, 2552.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5535.859 ±(99.9%) 1713.543 B/op [Average]
[info]   (min, avg, max) = (4745.401, 5535.859, 5801.869), stdev = 445.002
[info]   CI (99.9%): [3822.315, 7249.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.306 ±(99.9%) 0.186 B/op [Average]
[info]   (min, avg, max) = (0.237, 0.306, 0.353), stdev = 0.048
[info]   CI (99.9%): [0.119, 0.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 55.56% complete, ETA 00:14:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452742.871 ops/s
[info] # Warmup Iteration   2: 682626.374 ops/s
[info] # Warmup Iteration   3: 687781.000 ops/s
[info] # Warmup Iteration   4: 692988.763 ops/s
[info] # Warmup Iteration   5: 692740.523 ops/s
[info] Iteration   1: 694799.006 ops/s
[info]                  ·gc.alloc.rate:                   2468.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6137.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 694736.818 ops/s
[info]                  ·gc.alloc.rate:                   2468.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5385.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 690129.511 ops/s
[info]                  ·gc.alloc.rate:                   2452.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5426.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 692269.501 ops/s
[info]                  ·gc.alloc.rate:                   2459.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5417.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 693230.989 ops/s
[info]                  ·gc.alloc.rate:                   2463.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5409.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   693033.165 ±(99.9%) 7475.148 ops/s [Average]
[info]   (min, avg, max) = (690129.511, 693033.165, 694799.006), stdev = 1941.272
[info]   CI (99.9%): [685558.017, 700508.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2462.565 ±(99.9%) 26.729 MB/sec [Average]
[info]   (min, avg, max) = (2452.202, 2462.565, 2468.854), stdev = 6.941
[info]   CI (99.9%): [2435.836, 2489.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5592.001, 5592.001, 5592.001), stdev = 0.001
[info]   CI (99.9%): [5592.001, 5592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2446.531 ±(99.9%) 566.396 MB/sec [Average]
[info]   (min, avg, max) = (2377.564, 2446.531, 2709.623), stdev = 147.091
[info]   CI (99.9%): [1880.135, 3012.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5555.246 ±(99.9%) 1254.373 B/op [Average]
[info]   (min, avg, max) = (5385.647, 5555.246, 6137.349), stdev = 325.757
[info]   CI (99.9%): [4300.873, 6809.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.199 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (0.142, 0.199, 0.237), stdev = 0.040
[info]   CI (99.9%): [0.046, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter
[info] # Run progress: 56.35% complete, ETA 00:14:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4440467.298 ops/s
[info] # Warmup Iteration   2: 4286127.876 ops/s
[info] # Warmup Iteration   3: 4415260.771 ops/s
[info] # Warmup Iteration   4: 4352159.497 ops/s
[info] # Warmup Iteration   5: 4375154.820 ops/s
[info] Iteration   1: 4397595.649 ops/s
[info]                  ·gc.alloc.rate:                   1095.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4322717.297 ops/s
[info]                  ·gc.alloc.rate:                   1076.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4413949.332 ops/s
[info]                  ·gc.alloc.rate:                   1099.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4389006.882 ops/s
[info]                  ·gc.alloc.rate:                   1093.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1011.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4396228.081 ops/s
[info]                  ·gc.alloc.rate:                   1094.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter":
[info]   4383899.448 ±(99.9%) 136302.980 ops/s [Average]
[info]   (min, avg, max) = (4322717.297, 4383899.448, 4413949.332), stdev = 35397.451
[info]   CI (99.9%): [4247596.468, 4520202.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1091.999 ±(99.9%) 33.675 MB/sec [Average]
[info]   (min, avg, max) = (1076.895, 1091.999, 1099.463), stdev = 8.745
[info]   CI (99.9%): [1058.324, 1125.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1143.895 ±(99.9%) 708.852 MB/sec [Average]
[info]   (min, avg, max) = (1006.714, 1143.895, 1352.270), stdev = 184.087
[info]   CI (99.9%): [435.043, 1852.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   410.504 ±(99.9%) 250.092 B/op [Average]
[info]   (min, avg, max) = (360.064, 410.504, 484.110), stdev = 64.948
[info]   CI (99.9%): [160.412, 660.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.039, 0.053), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay
[info] # Run progress: 57.14% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153897.646 ops/s
[info] # Warmup Iteration   2: 370522.808 ops/s
[info] # Warmup Iteration   3: 376725.568 ops/s
[info] # Warmup Iteration   4: 373488.638 ops/s
[info] # Warmup Iteration   5: 375573.400 ops/s
[info] Iteration   1: 376031.590 ops/s
[info]                  ·gc.alloc.rate:                   1963.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8418.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 373295.374 ops/s
[info]                  ·gc.alloc.rate:                   1949.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8529.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.527 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 372176.894 ops/s
[info]                  ·gc.alloc.rate:                   1942.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8588.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 377366.101 ops/s
[info]                  ·gc.alloc.rate:                   1970.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7073.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 372883.882 ops/s
[info]                  ·gc.alloc.rate:                   1946.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8603.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay":
[info]   374350.768 ±(99.9%) 8590.634 ops/s [Average]
[info]   (min, avg, max) = (372176.894, 374350.768, 377366.101), stdev = 2230.960
[info]   CI (99.9%): [365760.134, 382941.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1954.450 ±(99.9%) 44.724 MB/sec [Average]
[info]   (min, avg, max) = (1942.948, 1954.450, 1970.083), stdev = 11.615
[info]   CI (99.9%): [1909.726, 1999.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8216.001, 8216.001, 8216.001), stdev = 0.001
[info]   CI (99.9%): [8216.001, 8216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1960.205 ±(99.9%) 569.801 MB/sec [Average]
[info]   (min, avg, max) = (1696.101, 1960.205, 2038.517), stdev = 147.976
[info]   CI (99.9%): [1390.404, 2530.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8242.751 ±(99.9%) 2532.770 B/op [Average]
[info]   (min, avg, max) = (7073.391, 8242.751, 8603.597), stdev = 657.752
[info]   CI (99.9%): [5709.981, 10775.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.438 ±(99.9%) 0.538 B/op [Average]
[info]   (min, avg, max) = (0.260, 0.438, 0.615), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 57.94% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284062.454 ops/s
[info] # Warmup Iteration   2: 534516.237 ops/s
[info] # Warmup Iteration   3: 545362.698 ops/s
[info] # Warmup Iteration   4: 544892.321 ops/s
[info] # Warmup Iteration   5: 550935.007 ops/s
[info] Iteration   1: 548871.568 ops/s
[info]                  ·gc.alloc.rate:                   1484.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4800.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 540408.121 ops/s
[info]                  ·gc.alloc.rate:                   1461.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3918.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 541447.338 ops/s
[info]                  ·gc.alloc.rate:                   1464.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3922.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 549126.586 ops/s
[info]                  ·gc.alloc.rate:                   1485.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4848.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 547732.939 ops/s
[info]                  ·gc.alloc.rate:                   1481.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3896.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   545517.310 ±(99.9%) 16320.486 ops/s [Average]
[info]   (min, avg, max) = (540408.121, 545517.310, 549126.586), stdev = 4238.378
[info]   CI (99.9%): [529196.824, 561837.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1475.453 ±(99.9%) 44.057 MB/sec [Average]
[info]   (min, avg, max) = (1461.877, 1475.453, 1485.041), stdev = 11.441
[info]   CI (99.9%): [1431.396, 1519.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4256.001, 4256.001, 4256.001), stdev = 0.001
[info]   CI (99.9%): [4256.001, 4256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1483.681 ±(99.9%) 702.361 MB/sec [Average]
[info]   (min, avg, max) = (1346.023, 1483.681, 1691.787), stdev = 182.401
[info]   CI (99.9%): [781.320, 2186.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4277.432 ±(99.9%) 1925.178 B/op [Average]
[info]   (min, avg, max) = (3896.120, 4277.432, 4848.517), stdev = 499.963
[info]   CI (99.9%): [2352.255, 6202.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.277 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (0.179, 0.277, 0.364), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter
[info] # Run progress: 58.73% complete, ETA 00:13:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2892281.245 ops/s
[info] # Warmup Iteration   2: 3204471.792 ops/s
[info] # Warmup Iteration   3: 3213888.768 ops/s
[info] # Warmup Iteration   4: 3210701.574 ops/s
[info] # Warmup Iteration   5: 3239396.535 ops/s
[info] Iteration   1: 3231350.104 ops/s
[info]                  ·gc.alloc.rate:                   492.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3243579.104 ops/s
[info]                  ·gc.alloc.rate:               494.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3232182.038 ops/s
[info]                  ·gc.alloc.rate:                   492.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3237083.054 ops/s
[info]                  ·gc.alloc.rate:               493.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161.929 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 3229831.638 ops/s
[info]                  ·gc.alloc.rate:                   492.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter":
[info]   3234805.188 ±(99.9%) 21588.089 ops/s [Average]
[info]   (min, avg, max) = (3229831.638, 3234805.188, 3243579.104), stdev = 5606.358
[info]   CI (99.9%): [3213217.098, 3256393.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   493.332 ±(99.9%) 3.313 MB/sec [Average]
[info]   (min, avg, max) = (492.559, 493.332, 494.681), stdev = 0.860
[info]   CI (99.9%): [490.019, 496.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   533.085 ±(99.9%) 702.969 MB/sec [Average]
[info]   (min, avg, max) = (333.082, 533.085, 666.799), stdev = 182.559
[info]   CI (99.9%): [≈ 0, 1236.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   259.451 ±(99.9%) 343.352 B/op [Average]
[info]   (min, avg, max) = (161.618, 259.451, 324.899), stdev = 89.168
[info]   CI (99.9%): [≈ 0, 602.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay
[info] # Run progress: 59.52% complete, ETA 00:13:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112041.188 ops/s
[info] # Warmup Iteration   2: 361157.110 ops/s
[info] # Warmup Iteration   3: 374204.461 ops/s
[info] # Warmup Iteration   4: 376852.415 ops/s
[info] # Warmup Iteration   5: 375459.719 ops/s
[info] Iteration   1: 375280.107 ops/s
[info]                  ·gc.alloc.rate:                   1365.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5550.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 372570.051 ops/s
[info]                  ·gc.alloc.rate:                   1356.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5628.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 375180.238 ops/s
[info]                  ·gc.alloc.rate:                   1365.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5617.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.611 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 374725.377 ops/s
[info]                  ·gc.alloc.rate:                   1364.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5651.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 373418.344 ops/s
[info]                  ·gc.alloc.rate:                   1359.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5688.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay":
[info]   374234.823 ±(99.9%) 4582.579 ops/s [Average]
[info]   (min, avg, max) = (372570.051, 374234.823, 375280.107), stdev = 1190.081
[info]   CI (99.9%): [369652.244, 378817.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1362.184 ±(99.9%) 16.904 MB/sec [Average]
[info]   (min, avg, max) = (1356.027, 1362.184, 1365.869), stdev = 4.390
[info]   CI (99.9%): [1345.280, 1379.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5728.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5728.001, 5728.001, 5728.001), stdev = 0.001
[info]   CI (99.9%): [5728.001, 5728.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1338.233 ±(99.9%) 40.429 MB/sec [Average]
[info]   (min, avg, max) = (1323.660, 1338.233, 1349.711), stdev = 10.499
[info]   CI (99.9%): [1297.804, 1378.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5627.350 ±(99.9%) 194.635 B/op [Average]
[info]   (min, avg, max) = (5550.992, 5627.350, 5688.376), stdev = 50.546
[info]   CI (99.9%): [5432.715, 5821.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.167), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.438 ±(99.9%) 0.863 B/op [Average]
[info]   (min, avg, max) = (0.175, 0.438, 0.704), stdev = 0.224
[info]   CI (99.9%): [≈ 0, 1.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 60.32% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1041529.947 ops/s
[info] # Warmup Iteration   2: 1931190.898 ops/s
[info] # Warmup Iteration   3: 1968013.822 ops/s
[info] # Warmup Iteration   4: 1968342.808 ops/s
[info] # Warmup Iteration   5: 1973569.913 ops/s
[info] Iteration   1: 1952048.225 ops/s
[info]                  ·gc.alloc.rate:                   3155.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2465.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1951654.327 ops/s
[info]                  ·gc.alloc.rate:                   3154.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2744.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1956664.447 ops/s
[info]                  ·gc.alloc.rate:                   3163.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2464.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1972278.056 ops/s
[info]                  ·gc.alloc.rate:                   3188.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2444.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1975212.724 ops/s
[info]                  ·gc.alloc.rate:                   3193.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2712.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1961571.556 ±(99.9%) 43643.086 ops/s [Average]
[info]   (min, avg, max) = (1951654.327, 1961571.556, 1975212.724), stdev = 11333.971
[info]   CI (99.9%): [1917928.469, 2005214.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3171.294 ±(99.9%) 71.182 MB/sec [Average]
[info]   (min, avg, max) = (3154.989, 3171.294, 3193.772), stdev = 18.486
[info]   CI (99.9%): [3100.112, 3242.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2544.000, 2544.000, 2544.000), stdev = 0.001
[info]   CI (99.9%): [2544.000, 2544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3199.051 ±(99.9%) 722.083 MB/sec [Average]
[info]   (min, avg, max) = (3057.997, 3199.051, 3405.058), stdev = 187.523
[info]   CI (99.9%): [2476.968, 3921.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2566.226 ±(99.9%) 572.933 B/op [Average]
[info]   (min, avg, max) = (2444.620, 2566.226, 2744.664), stdev = 148.789
[info]   CI (99.9%): [1993.293, 3139.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.077, 0.101), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson
[info] # Run progress: 61.11% complete, ETA 00:12:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85890.933 ops/s
[info] # Warmup Iteration   2: 299853.671 ops/s
[info] # Warmup Iteration   3: 305719.301 ops/s
[info] # Warmup Iteration   4: 309100.737 ops/s
[info] # Warmup Iteration   5: 309537.749 ops/s
[info] Iteration   1: 309215.428 ops/s
[info]                  ·gc.alloc.rate:                   723.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4989.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.424 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 310553.023 ops/s
[info]                  ·gc.alloc.rate:                   726.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3321.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 305344.332 ops/s
[info]                  ·gc.alloc.rate:               714.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3388.739 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 308646.894 ops/s
[info]                  ·gc.alloc.rate:                   721.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3364.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 304033.820 ops/s
[info]                  ·gc.alloc.rate:                   710.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3425.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson":
[info]   307558.699 ±(99.9%) 10584.560 ops/s [Average]
[info]   (min, avg, max) = (304033.820, 307558.699, 310553.023), stdev = 2748.777
[info]   CI (99.9%): [296974.139, 318143.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate":
[info]   719.198 ±(99.9%) 24.764 MB/sec [Average]
[info]   (min, avg, max) = (710.941, 719.198, 726.201), stdev = 6.431
[info]   CI (99.9%): [694.434, 743.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   3680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3680.001, 3680.001, 3680.001), stdev = 0.001
[info]   CI (99.9%): [3680.001, 3680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   723.003 ±(99.9%) 553.904 MB/sec [Average]
[info]   (min, avg, max) = (655.522, 723.003, 980.289), stdev = 143.847
[info]   CI (99.9%): [169.099, 1276.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3697.976 ±(99.9%) 2782.921 B/op [Average]
[info]   (min, avg, max) = (3321.836, 3697.976, 4989.038), stdev = 722.716
[info]   CI (99.9%): [915.055, 6480.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.167), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.403 ±(99.9%) 1.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 0.844), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter
[info] # Run progress: 61.90% complete, ETA 00:12:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 653905.869 ops/s
[info] # Warmup Iteration   2: 693644.159 ops/s
[info] # Warmup Iteration   3: 703841.413 ops/s
[info] # Warmup Iteration   4: 705595.241 ops/s
[info] # Warmup Iteration   5: 701674.151 ops/s
[info] Iteration   1: 705141.559 ops/s
[info]                  ·gc.alloc.rate:                   638.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1495.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 704901.825 ops/s
[info]                  ·gc.alloc.rate:                   637.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1496.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 705591.469 ops/s
[info]                  ·gc.alloc.rate:                   638.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 699374.756 ops/s
[info]                  ·gc.alloc.rate:                   632.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1509.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 658113.893 ops/s
[info]                  ·gc.alloc.rate:                   595.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1605.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter":
[info]   694624.700 ±(99.9%) 79198.295 ops/s [Average]
[info]   (min, avg, max) = (658113.893, 694624.700, 705591.469), stdev = 20567.546
[info]   CI (99.9%): [615426.406, 773822.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate":
[info]   628.569 ±(99.9%) 71.688 MB/sec [Average]
[info]   (min, avg, max) = (595.504, 628.569, 638.441), stdev = 18.617
[info]   CI (99.9%): [556.881, 700.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1424.001, 1424.001, 1424.001), stdev = 0.001
[info]   CI (99.9%): [1424.001, 1424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   670.599 ±(99.9%) 2.385 MB/sec [Average]
[info]   (min, avg, max) = (670.155, 670.599, 671.496), stdev = 0.619
[info]   CI (99.9%): [668.215, 672.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1520.359 ±(99.9%) 185.221 B/op [Average]
[info]   (min, avg, max) = (1494.737, 1520.359, 1605.717), stdev = 48.101
[info]   CI (99.9%): [1335.138, 1705.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.170 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.170, 0.234), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 62.70% complete, ETA 00:12:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3317036.712 ops/s
[info] # Warmup Iteration   2: 3643448.792 ops/s
[info] # Warmup Iteration   3: 3732441.250 ops/s
[info] # Warmup Iteration   4: 3750332.809 ops/s
[info] # Warmup Iteration   5: 3720459.837 ops/s
[info] Iteration   1: 3681489.092 ops/s
[info]                  ·gc.alloc.rate:                   2245.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1015.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3703214.954 ops/s
[info]                  ·gc.alloc.rate:                   2259.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     866.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3757248.106 ops/s
[info]                  ·gc.alloc.rate:                   2291.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     997.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3722744.626 ops/s
[info]                  ·gc.alloc.rate:                   2270.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1007.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3740963.344 ops/s
[info]                  ·gc.alloc.rate:                   2281.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     859.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3721132.024 ±(99.9%) 115404.327 ops/s [Average]
[info]   (min, avg, max) = (3681489.092, 3721132.024, 3757248.106), stdev = 29970.137
[info]   CI (99.9%): [3605727.697, 3836536.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2269.946 ±(99.9%) 70.147 MB/sec [Average]
[info]   (min, avg, max) = (2245.723, 2269.946, 2291.891), stdev = 18.217
[info]   CI (99.9%): [2199.799, 2340.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   960.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (960.000, 960.000, 960.000), stdev = 0.001
[info]   CI (99.9%): [960.000, 960.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2243.989 ±(99.9%) 715.057 MB/sec [Average]
[info]   (min, avg, max) = (2038.723, 2243.989, 2382.921), stdev = 185.698
[info]   CI (99.9%): [1528.931, 2959.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   949.083 ±(99.9%) 304.548 B/op [Average]
[info]   (min, avg, max) = (859.251, 949.083, 1015.245), stdev = 79.090
[info]   CI (99.9%): [644.534, 1253.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.035, 0.062), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 63.49% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4566681.473 ops/s
[info] # Warmup Iteration   2: 4801945.899 ops/s
[info] # Warmup Iteration   3: 4878612.022 ops/s
[info] # Warmup Iteration   4: 4865128.513 ops/s
[info] # Warmup Iteration   5: 4878786.831 ops/s
[info] Iteration   1: 4886579.601 ops/s
[info]                  ·gc.alloc.rate:                   571.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4846468.552 ops/s
[info]                  ·gc.alloc.rate:                   566.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4871366.560 ops/s
[info]                  ·gc.alloc.rate:                   569.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4601508.708 ops/s
[info]                  ·gc.alloc.rate:               538.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114.604 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 4886385.864 ops/s
[info]                  ·gc.alloc.rate:                   571.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   4818461.857 ±(99.9%) 471234.692 ops/s [Average]
[info]   (min, avg, max) = (4601508.708, 4818461.857, 4886579.601), stdev = 122378.153
[info]   CI (99.9%): [4347227.165, 5289696.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   563.406 ±(99.9%) 54.864 MB/sec [Average]
[info]   (min, avg, max) = (538.147, 563.406, 571.339), stdev = 14.248
[info]   CI (99.9%): [508.542, 618.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   603.318 ±(99.9%) 577.180 MB/sec [Average]
[info]   (min, avg, max) = (335.184, 603.318, 670.840), stdev = 149.892
[info]   CI (99.9%): [26.138, 1180.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   196.123 ±(99.9%) 175.496 B/op [Average]
[info]   (min, avg, max) = (114.604, 196.123, 217.615), stdev = 45.576
[info]   CI (99.9%): [20.627, 371.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.034), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay
[info] # Run progress: 64.29% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21312.310 ops/s
[info] # Warmup Iteration   2: 176484.116 ops/s
[info] # Warmup Iteration   3: 187987.832 ops/s
[info] # Warmup Iteration   4: 192922.026 ops/s
[info] # Warmup Iteration   5: 190649.596 ops/s
[info] Iteration   1: 186226.575 ops/s
[info]                  ·gc.alloc.rate:               1553.537 MB/sec
[info]                  ·gc.alloc.rate.norm:          13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11219.503 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 188149.970 ops/s
[info]                  ·gc.alloc.rate:                   1569.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13971.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 188467.493 ops/s
[info]                  ·gc.alloc.rate:                   1572.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14034.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 190567.291 ops/s
[info]                  ·gc.alloc.rate:                   1589.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11145.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 189472.152 ops/s
[info]                  ·gc.alloc.rate:                   1580.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14048.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay":
[info]   188576.696 ±(99.9%) 6233.227 ops/s [Average]
[info]   (min, avg, max) = (186226.575, 188576.696, 190567.291), stdev = 1618.749
[info]   CI (99.9%): [182343.469, 194809.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate":
[info]   1573.108 ±(99.9%) 51.932 MB/sec [Average]
[info]   (min, avg, max) = (1553.537, 1573.108, 1589.716), stdev = 13.486
[info]   CI (99.9%): [1521.176, 1625.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13128.002, 13128.002, 13128.002), stdev = 0.001
[info]   CI (99.9%): [13128.002, 13128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1543.976 ±(99.9%) 722.891 MB/sec [Average]
[info]   (min, avg, max) = (1327.690, 1543.976, 1691.342), stdev = 187.732
[info]   CI (99.9%): [821.085, 2266.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   12883.939 ±(99.9%) 5982.942 B/op [Average]
[info]   (min, avg, max) = (11145.349, 12883.939, 14048.295), stdev = 1553.751
[info]   CI (99.9%): [6900.997, 18866.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.589 ±(99.9%) 1.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.589, 1.031), stdev = 0.416
[info]   CI (99.9%): [≈ 0, 2.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 65.08% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 513791.991 ops/s
[info] # Warmup Iteration   2: 750444.822 ops/s
[info] # Warmup Iteration   3: 759785.086 ops/s
[info] # Warmup Iteration   4: 763096.607 ops/s
[info] # Warmup Iteration   5: 769146.670 ops/s
[info] Iteration   1: 762591.134 ops/s
[info]                  ·gc.alloc.rate:                   2938.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6307.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 764096.090 ops/s
[info]                  ·gc.alloc.rate:                   2944.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5603.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 759451.302 ops/s
[info]                  ·gc.alloc.rate:                   2926.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6348.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 763232.654 ops/s
[info]                  ·gc.alloc.rate:                   2940.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6317.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 762290.222 ops/s
[info]                  ·gc.alloc.rate:                   2937.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5622.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   762332.280 ±(99.9%) 6749.758 ops/s [Average]
[info]   (min, avg, max) = (759451.302, 762332.280, 764096.090), stdev = 1752.891
[info]   CI (99.9%): [755582.522, 769082.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2937.524 ±(99.9%) 26.215 MB/sec [Average]
[info]   (min, avg, max) = (2926.249, 2937.524, 2944.292), stdev = 6.808
[info]   CI (99.9%): [2911.309, 2963.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.001, 6064.001, 6064.001), stdev = 0.001
[info]   CI (99.9%): [6064.000, 6064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2925.642 ±(99.9%) 715.326 MB/sec [Average]
[info]   (min, avg, max) = (2720.670, 2925.642, 3063.770), stdev = 185.768
[info]   CI (99.9%): [2210.315, 3640.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6039.831 ±(99.9%) 1502.252 B/op [Average]
[info]   (min, avg, max) = (5603.433, 6039.831, 6348.982), stdev = 390.130
[info]   CI (99.9%): [4537.579, 7542.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.167), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 0.302 B/op [Average]
[info]   (min, avg, max) = (0.172, 0.275, 0.345), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter
[info] # Run progress: 65.87% complete, ETA 00:11:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2956815.657 ops/s
[info] # Warmup Iteration   2: 2660952.669 ops/s
[info] # Warmup Iteration   3: 2647179.652 ops/s
[info] # Warmup Iteration   4: 2668556.390 ops/s
[info] # Warmup Iteration   5: 2685440.777 ops/s
[info] Iteration   1: 2679010.836 ops/s
[info]                  ·gc.alloc.rate:                   1729.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     991.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2666395.069 ops/s
[info]                  ·gc.alloc.rate:                   1721.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1198.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2682596.653 ops/s
[info]                  ·gc.alloc.rate:                   1731.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     995.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2683722.067 ops/s
[info]                  ·gc.alloc.rate:                   1733.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2665023.577 ops/s
[info]                  ·gc.alloc.rate:                   1720.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter":
[info]   2675349.641 ±(99.9%) 34593.328 ops/s [Average]
[info]   (min, avg, max) = (2665023.577, 2675349.641, 2683722.067), stdev = 8983.777
[info]   CI (99.9%): [2640756.313, 2709942.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1727.287 ±(99.9%) 22.759 MB/sec [Average]
[info]   (min, avg, max) = (1720.513, 1727.287, 1733.042), stdev = 5.910
[info]   CI (99.9%): [1704.528, 1750.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1762.392 ±(99.9%) 577.432 MB/sec [Average]
[info]   (min, avg, max) = (1687.129, 1762.392, 2030.500), stdev = 149.957
[info]   CI (99.9%): [1184.961, 2339.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1036.794 ±(99.9%) 348.329 B/op [Average]
[info]   (min, avg, max) = (991.064, 1036.794, 1198.421), stdev = 90.460
[info]   CI (99.9%): [688.465, 1385.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.054, 0.098), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay
[info] # Run progress: 66.67% complete, ETA 00:10:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65915.667 ops/s
[info] # Warmup Iteration   2: 277587.670 ops/s
[info] # Warmup Iteration   3: 291102.319 ops/s
[info] # Warmup Iteration   4: 288437.680 ops/s
[info] # Warmup Iteration   5: 291197.725 ops/s
[info] Iteration   1: 290031.900 ops/s
[info]                  ·gc.alloc.rate:                   2055.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10914.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 289894.756 ops/s
[info]                  ·gc.alloc.rate:                   2054.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10983.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.791 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 287890.069 ops/s
[info]                  ·gc.alloc.rate:                   2040.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12940.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 288440.310 ops/s
[info]                  ·gc.alloc.rate:                   2044.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11111.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 292083.331 ops/s
[info]                  ·gc.alloc.rate:                   2069.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10983.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.561 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay":
[info]   289668.073 ±(99.9%) 6293.749 ops/s [Average]
[info]   (min, avg, max) = (287890.069, 289668.073, 292083.331), stdev = 1634.467
[info]   CI (99.9%): [283374.324, 295961.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   2053.077 ±(99.9%) 43.264 MB/sec [Average]
[info]   (min, avg, max) = (2040.901, 2053.077, 2069.778), stdev = 11.235
[info]   CI (99.9%): [2009.813, 2096.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   11152.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11152.001, 11152.002, 11152.002), stdev = 0.001
[info]   CI (99.9%): [11152.001, 11152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2095.825 ±(99.9%) 587.931 MB/sec [Average]
[info]   (min, avg, max) = (2011.554, 2095.825, 2368.240), stdev = 152.684
[info]   CI (99.9%): [1507.895, 2683.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   11386.648 ±(99.9%) 3356.366 B/op [Average]
[info]   (min, avg, max) = (10914.421, 11386.648, 12940.668), stdev = 871.638
[info]   CI (99.9%): [8030.281, 14743.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.166), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.634 ±(99.9%) 0.855 B/op [Average]
[info]   (min, avg, max) = (0.339, 0.634, 0.909), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 1.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 67.46% complete, ETA 00:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 584277.141 ops/s
[info] # Warmup Iteration   2: 894465.278 ops/s
[info] # Warmup Iteration   3: 901148.128 ops/s
[info] # Warmup Iteration   4: 903545.547 ops/s
[info] # Warmup Iteration   5: 902080.095 ops/s
[info] Iteration   1: 899605.389 ops/s
[info]                  ·gc.alloc.rate:                   2076.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3543.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 906512.874 ops/s
[info]                  ·gc.alloc.rate:                   2092.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3528.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 893793.437 ops/s
[info]                  ·gc.alloc.rate:                   2063.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3585.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 889032.232 ops/s
[info]                  ·gc.alloc.rate:                   2051.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4210.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 885721.677 ops/s
[info]                  ·gc.alloc.rate:                   2044.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3628.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   894933.122 ±(99.9%) 32037.429 ops/s [Average]
[info]   (min, avg, max) = (885721.677, 894933.122, 906512.874), stdev = 8320.019
[info]   CI (99.9%): [862895.693, 926970.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2065.466 ±(99.9%) 74.011 MB/sec [Average]
[info]   (min, avg, max) = (2044.113, 2065.466, 2092.179), stdev = 19.220
[info]   CI (99.9%): [1991.455, 2139.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.000, 3632.000, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.000, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2103.176 ±(99.9%) 593.336 MB/sec [Average]
[info]   (min, avg, max) = (2025.909, 2103.176, 2378.613), stdev = 154.087
[info]   CI (99.9%): [1509.840, 2696.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3699.417 ±(99.9%) 1110.244 B/op [Average]
[info]   (min, avg, max) = (3528.429, 3699.417, 4210.478), stdev = 288.327
[info]   CI (99.9%): [2589.172, 4809.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.175 ±(99.9%) 0.301 B/op [Average]
[info]   (min, avg, max) = (0.110, 0.175, 0.291), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 8.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson
[info] # Run progress: 68.25% complete, ETA 00:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 919408.957 ops/s
[info] # Warmup Iteration   2: 1762537.956 ops/s
[info] # Warmup Iteration   3: 1773168.258 ops/s
[info] # Warmup Iteration   4: 1738815.662 ops/s
[info] # Warmup Iteration   5: 1721541.478 ops/s
[info] Iteration   1: 1760685.447 ops/s
[info]                  ·gc.alloc.rate:                   1011.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     878.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1767065.364 ops/s
[info]                  ·gc.alloc.rate:                   1015.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     881.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1754899.655 ops/s
[info]                  ·gc.alloc.rate:                   1008.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     890.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1756729.423 ops/s
[info]                  ·gc.alloc.rate:                   1009.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     894.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1766993.392 ops/s
[info]                  ·gc.alloc.rate:                   1015.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     892.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson":
[info]   1761274.656 ±(99.9%) 21772.590 ops/s [Average]
[info]   (min, avg, max) = (1754899.655, 1761274.656, 1767065.364), stdev = 5654.272
[info]   CI (99.9%): [1739502.066, 1783047.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1011.870 ±(99.9%) 12.488 MB/sec [Average]
[info]   (min, avg, max) = (1008.075, 1011.870, 1015.256), stdev = 3.243
[info]   CI (99.9%): [999.382, 1024.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   993.493 ±(99.9%) 29.369 MB/sec [Average]
[info]   (min, avg, max) = (983.208, 993.493, 1002.320), stdev = 7.627
[info]   CI (99.9%): [964.123, 1022.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   887.589 ±(99.9%) 28.106 B/op [Average]
[info]   (min, avg, max) = (878.602, 887.589, 894.896), stdev = 7.299
[info]   CI (99.9%): [859.483, 915.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.067, 0.093), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter
[info] # Run progress: 69.05% complete, ETA 00:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4096135.527 ops/s
[info] # Warmup Iteration   2: 4444143.371 ops/s
[info] # Warmup Iteration   3: 4475457.054 ops/s
[info] # Warmup Iteration   4: 4467533.140 ops/s
[info] # Warmup Iteration   5: 4407643.933 ops/s
[info] Iteration   1: 4348117.664 ops/s
[info]                  ·gc.alloc.rate:                   331.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4390077.830 ops/s
[info]                  ·gc.alloc.rate:               334.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119.401 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 4475739.368 ops/s
[info]                  ·gc.alloc.rate:               341.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116.881 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 4468608.014 ops/s
[info]                  ·gc.alloc.rate:               340.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.072 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 4471765.889 ops/s
[info]                  ·gc.alloc.rate:                   340.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter":
[info]   4430861.753 ±(99.9%) 224709.419 ops/s [Average]
[info]   (min, avg, max) = (4348117.664, 4430861.753, 4475739.368), stdev = 58356.323
[info]   CI (99.9%): [4206152.334, 4655571.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   337.855 ±(99.9%) 17.134 MB/sec [Average]
[info]   (min, avg, max) = (331.543, 337.855, 341.283), stdev = 4.450
[info]   CI (99.9%): [320.721, 354.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   332.683 ±(99.9%) 1.411 MB/sec [Average]
[info]   (min, avg, max) = (332.411, 332.683, 333.090), stdev = 0.366
[info]   CI (99.9%): [331.272, 334.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   118.181 ±(99.9%) 6.525 B/op [Average]
[info]   (min, avg, max) = (116.881, 118.181, 120.560), stdev = 1.694
[info]   CI (99.9%): [111.656, 124.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.329 ±(99.9%) 2.660 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.329, 1.563), stdev = 0.691
[info]   CI (99.9%): [≈ 0, 2.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.566), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay
[info] # Run progress: 69.84% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196640.902 ops/s
[info] # Warmup Iteration   2: 477238.634 ops/s
[info] # Warmup Iteration   3: 483863.776 ops/s
[info] # Warmup Iteration   4: 486980.253 ops/s
[info] # Warmup Iteration   5: 485434.967 ops/s
[info] Iteration   1: 490553.599 ops/s
[info]                  ·gc.alloc.rate:                   1698.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5354.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 490247.140 ops/s
[info]                  ·gc.alloc.rate:                   1697.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5389.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.535 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 487309.741 ops/s
[info]                  ·gc.alloc.rate:                   1686.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5448.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 479870.052 ops/s
[info]                  ·gc.alloc.rate:                   1661.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5550.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 490038.449 ops/s
[info]                  ·gc.alloc.rate:                   1696.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5445.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay":
[info]   487603.796 ±(99.9%) 17382.726 ops/s [Average]
[info]   (min, avg, max) = (479870.052, 487603.796, 490553.599), stdev = 4514.239
[info]   CI (99.9%): [470221.070, 504986.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1687.992 ±(99.9%) 60.204 MB/sec [Average]
[info]   (min, avg, max) = (1661.219, 1687.992, 1698.151), stdev = 15.635
[info]   CI (99.9%): [1627.788, 1748.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1684.691 ±(99.9%) 41.471 MB/sec [Average]
[info]   (min, avg, max) = (1669.071, 1684.691, 1695.817), stdev = 10.770
[info]   CI (99.9%): [1643.221, 1726.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5437.851 ±(99.9%) 285.775 B/op [Average]
[info]   (min, avg, max) = (5354.708, 5437.851, 5550.281), stdev = 74.215
[info]   CI (99.9%): [5152.076, 5723.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.167), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.309 ±(99.9%) 0.565 B/op [Average]
[info]   (min, avg, max) = (0.134, 0.309, 0.535), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter
[info] # Run progress: 70.63% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3432143.785 ops/s
[info] # Warmup Iteration   2: 3854545.025 ops/s
[info] # Warmup Iteration   3: 3807066.628 ops/s
[info] # Warmup Iteration   4: 3871003.730 ops/s
[info] # Warmup Iteration   5: 3927561.445 ops/s
[info] Iteration   1: 3921619.038 ops/s
[info]                  ·gc.alloc.rate:                   1854.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3913025.095 ops/s
[info]                  ·gc.alloc.rate:                   1849.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     817.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3918810.692 ops/s
[info]                  ·gc.alloc.rate:                   1852.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     681.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3905892.865 ops/s
[info]                  ·gc.alloc.rate:                   1847.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3886028.876 ops/s
[info]                  ·gc.alloc.rate:                   1837.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1700.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     688.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter":
[info]   3909075.313 ±(99.9%) 54761.438 ops/s [Average]
[info]   (min, avg, max) = (3886028.876, 3909075.313, 3921619.038), stdev = 14221.372
[info]   CI (99.9%): [3854313.875, 3963836.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1848.284 ±(99.9%) 26.116 MB/sec [Average]
[info]   (min, avg, max) = (1837.203, 1848.284, 1854.455), stdev = 6.782
[info]   CI (99.9%): [1822.168, 1874.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1831.617 ±(99.9%) 717.962 MB/sec [Average]
[info]   (min, avg, max) = (1689.196, 1831.617, 2039.042), stdev = 186.453
[info]   CI (99.9%): [1113.655, 2549.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   737.294 ±(99.9%) 288.919 B/op [Average]
[info]   (min, avg, max) = (677.699, 737.294, 821.294), stdev = 75.031
[info]   CI (99.9%): [448.375, 1026.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.032, 0.042), stdev = 0.007
[info]   CI (99.9%): [0.005, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay
[info] # Run progress: 71.43% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123014.923 ops/s
[info] # Warmup Iteration   2: 296191.133 ops/s
[info] # Warmup Iteration   3: 300159.114 ops/s
[info] # Warmup Iteration   4: 303196.718 ops/s
[info] # Warmup Iteration   5: 303827.978 ops/s
[info] Iteration   1: 304264.284 ops/s
[info]                  ·gc.alloc.rate:                   1642.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8619.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 302602.512 ops/s
[info]                  ·gc.alloc.rate:                   1633.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8724.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 300713.130 ops/s
[info]                  ·gc.alloc.rate:                   1623.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8820.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 304170.838 ops/s
[info]                  ·gc.alloc.rate:                   1642.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6996.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 304120.836 ops/s
[info]                  ·gc.alloc.rate:                   1642.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8766.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay":
[info]   303174.320 ±(99.9%) 5922.167 ops/s [Average]
[info]   (min, avg, max) = (300713.130, 303174.320, 304264.284), stdev = 1537.968
[info]   CI (99.9%): [297252.153, 309096.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1636.747 ±(99.9%) 32.232 MB/sec [Average]
[info]   (min, avg, max) = (1623.363, 1636.747, 1642.477), stdev = 8.370
[info]   CI (99.9%): [1604.515, 1668.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8496.001, 8496.001, 8496.002), stdev = 0.001
[info]   CI (99.9%): [8496.001, 8496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1615.206 ±(99.9%) 567.200 MB/sec [Average]
[info]   (min, avg, max) = (1352.357, 1615.206, 1694.438), stdev = 147.300
[info]   CI (99.9%): [1048.006, 2182.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8385.531 ±(99.9%) 3002.965 B/op [Average]
[info]   (min, avg, max) = (6996.734, 8385.531, 8820.763), stdev = 779.860
[info]   CI (99.9%): [5382.566, 11388.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.455 ±(99.9%) 0.696 B/op [Average]
[info]   (min, avg, max) = (0.323, 0.455, 0.763), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 1.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 72.22% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290240.219 ops/s
[info] # Warmup Iteration   2: 502572.170 ops/s
[info] # Warmup Iteration   3: 521042.918 ops/s
[info] # Warmup Iteration   4: 506724.765 ops/s
[info] # Warmup Iteration   5: 518391.460 ops/s
[info] Iteration   1: 518290.525 ops/s
[info]                  ·gc.alloc.rate:                   1401.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4061.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 515980.564 ops/s
[info]                  ·gc.alloc.rate:                   1395.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4095.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 518664.066 ops/s
[info]                  ·gc.alloc.rate:                   1403.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5114.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 518995.734 ops/s
[info]                  ·gc.alloc.rate:                   1403.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4100.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 518725.545 ops/s
[info]                  ·gc.alloc.rate:                   1402.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4110.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   518131.287 ±(99.9%) 4729.882 ops/s [Average]
[info]   (min, avg, max) = (515980.564, 518131.287, 518995.734), stdev = 1228.335
[info]   CI (99.9%): [513401.405, 522861.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1401.379 ±(99.9%) 12.304 MB/sec [Average]
[info]   (min, avg, max) = (1395.802, 1401.379, 1403.571), stdev = 3.195
[info]   CI (99.9%): [1389.075, 1413.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4256.001, 4256.001, 4256.001), stdev = 0.001
[info]   CI (99.9%): [4256.001, 4256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1414.822 ±(99.9%) 584.129 MB/sec [Average]
[info]   (min, avg, max) = (1337.629, 1414.822, 1685.901), stdev = 151.696
[info]   CI (99.9%): [830.693, 1998.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4296.585 ±(99.9%) 1761.109 B/op [Average]
[info]   (min, avg, max) = (4061.606, 4296.585, 5114.058), stdev = 457.354
[info]   CI (99.9%): [2535.476, 6057.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.329 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (0.252, 0.329, 0.442), stdev = 0.083
[info]   CI (99.9%): [0.010, 0.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter
[info] # Run progress: 73.02% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2637485.568 ops/s
[info] # Warmup Iteration   2: 2963829.808 ops/s
[info] # Warmup Iteration   3: 2866729.911 ops/s
[info] # Warmup Iteration   4: 2981975.908 ops/s
[info] # Warmup Iteration   5: 2982158.637 ops/s
[info] Iteration   1: 2978898.543 ops/s
[info]                  ·gc.alloc.rate:                   560.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2922358.037 ops/s
[info]                  ·gc.alloc.rate:                   549.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2986660.468 ops/s
[info]                  ·gc.alloc.rate:               561.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 2977175.542 ops/s
[info]                  ·gc.alloc.rate:                   559.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2910170.797 ops/s
[info]                  ·gc.alloc.rate:                   547.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter":
[info]   2955052.678 ±(99.9%) 138039.295 ops/s [Average]
[info]   (min, avg, max) = (2910170.797, 2955052.678, 2986660.468), stdev = 35848.367
[info]   CI (99.9%): [2817013.383, 3093091.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   555.805 ±(99.9%) 25.984 MB/sec [Average]
[info]   (min, avg, max) = (547.343, 555.805, 561.743), stdev = 6.748
[info]   CI (99.9%): [529.821, 581.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   599.952 ±(99.9%) 574.468 MB/sec [Average]
[info]   (min, avg, max) = (333.079, 599.952, 667.497), stdev = 149.188
[info]   CI (99.9%): [25.484, 1174.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   319.930 ±(99.9%) 311.240 B/op [Average]
[info]   (min, avg, max) = (175.510, 319.930, 360.979), stdev = 80.828
[info]   CI (99.9%): [8.690, 631.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.079), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay
[info] # Run progress: 73.81% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114694.817 ops/s
[info] # Warmup Iteration   2: 351600.373 ops/s
[info] # Warmup Iteration   3: 363009.733 ops/s
[info] # Warmup Iteration   4: 363632.288 ops/s
[info] # Warmup Iteration   5: 364928.337 ops/s
[info] Iteration   1: 364008.105 ops/s
[info]                  ·gc.alloc.rate:                   1408.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5731.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 359345.915 ops/s
[info]                  ·gc.alloc.rate:                   1390.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5843.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 362092.675 ops/s
[info]                  ·gc.alloc.rate:                   1400.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5828.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.814 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 363307.584 ops/s
[info]                  ·gc.alloc.rate:                   1405.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5834.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.541 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 363487.122 ops/s
[info]                  ·gc.alloc.rate:                   1406.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5846.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay":
[info]   362448.280 ±(99.9%) 7204.352 ops/s [Average]
[info]   (min, avg, max) = (359345.915, 362448.280, 364008.105), stdev = 1870.947
[info]   CI (99.9%): [355243.928, 369652.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1402.108 ±(99.9%) 27.759 MB/sec [Average]
[info]   (min, avg, max) = (1390.154, 1402.108, 1408.138), stdev = 7.209
[info]   CI (99.9%): [1374.349, 1429.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1339.651 ±(99.9%) 38.029 MB/sec [Average]
[info]   (min, avg, max) = (1325.687, 1339.651, 1350.242), stdev = 9.876
[info]   CI (99.9%): [1301.622, 1377.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5816.908 ±(99.9%) 185.801 B/op [Average]
[info]   (min, avg, max) = (5731.529, 5816.908, 5846.204), stdev = 48.252
[info]   CI (99.9%): [5631.107, 6002.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.507 ±(99.9%) 0.805 B/op [Average]
[info]   (min, avg, max) = (0.270, 0.507, 0.814), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 74.60% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227311.594 ops/s
[info] # Warmup Iteration   2: 667783.183 ops/s
[info] # Warmup Iteration   3: 684609.601 ops/s
[info] # Warmup Iteration   4: 684561.085 ops/s
[info] # Warmup Iteration   5: 686361.531 ops/s
[info] Iteration   1: 682519.153 ops/s
[info]                  ·gc.alloc.rate:                   2179.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5450.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 683706.070 ops/s
[info]                  ·gc.alloc.rate:                   2182.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4678.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.335 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 679656.532 ops/s
[info]                  ·gc.alloc.rate:                   2169.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5503.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 678190.931 ops/s
[info]                  ·gc.alloc.rate:                   2165.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4730.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 682442.522 ops/s
[info]                  ·gc.alloc.rate:                   2178.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4708.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   681303.042 ±(99.9%) 8812.028 ops/s [Average]
[info]   (min, avg, max) = (678190.931, 681303.042, 683706.070), stdev = 2288.456
[info]   CI (99.9%): [672491.014, 690115.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2175.093 ±(99.9%) 28.582 MB/sec [Average]
[info]   (min, avg, max) = (2165.051, 2175.093, 2182.685), stdev = 7.423
[info]   CI (99.9%): [2146.511, 2203.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5024.001, 5024.001, 5024.001), stdev = 0.001
[info]   CI (99.9%): [5024.001, 5024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2170.796 ±(99.9%) 702.754 MB/sec [Average]
[info]   (min, avg, max) = (2032.457, 2170.796, 2376.717), stdev = 182.503
[info]   CI (99.9%): [1468.042, 2873.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5014.217 ±(99.9%) 1630.077 B/op [Average]
[info]   (min, avg, max) = (4678.213, 5014.217, 5503.575), stdev = 423.326
[info]   CI (99.9%): [3384.139, 6644.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.146), stdev = 0.017
[info]   CI (99.9%): [0.062, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.298 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (0.240, 0.298, 0.336), stdev = 0.040
[info]   CI (99.9%): [0.145, 0.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson
[info] # Run progress: 75.40% complete, ETA 00:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548987.325 ops/s
[info] # Warmup Iteration   2: 1399967.346 ops/s
[info] # Warmup Iteration   3: 1480101.317 ops/s
[info] # Warmup Iteration   4: 1457346.089 ops/s
[info] # Warmup Iteration   5: 1451874.742 ops/s
[info] Iteration   1: 1483226.873 ops/s
[info]                  ·gc.alloc.rate:                   1123.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1049.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1472206.413 ops/s
[info]                  ·gc.alloc.rate:                   1115.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1415.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1454569.067 ops/s
[info]                  ·gc.alloc.rate:                   1101.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1081.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1448394.705 ops/s
[info]                  ·gc.alloc.rate:                   1097.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1091.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1474383.777 ops/s
[info]                  ·gc.alloc.rate:                   1116.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1075.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson":
[info]   1466556.167 ±(99.9%) 55954.987 ops/s [Average]
[info]   (min, avg, max) = (1448394.705, 1466556.167, 1483226.873), stdev = 14531.332
[info]   CI (99.9%): [1410601.180, 1522511.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate":
[info]   1110.950 ±(99.9%) 42.313 MB/sec [Average]
[info]   (min, avg, max) = (1097.275, 1110.950, 1123.443), stdev = 10.989
[info]   CI (99.9%): [1068.637, 1153.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1065.125 ±(99.9%) 559.519 MB/sec [Average]
[info]   (min, avg, max) = (989.247, 1065.125, 1324.759), stdev = 145.305
[info]   CI (99.9%): [505.607, 1624.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1142.656 ±(99.9%) 590.319 B/op [Average]
[info]   (min, avg, max) = (1049.615, 1142.656, 1415.509), stdev = 153.304
[info]   CI (99.9%): [552.336, 1732.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.103 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.103, 0.156), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter
[info] # Run progress: 76.19% complete, ETA 00:07:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4753606.894 ops/s
[info] # Warmup Iteration   2: 5092709.923 ops/s
[info] # Warmup Iteration   3: 5220609.475 ops/s
[info] # Warmup Iteration   4: 5212425.975 ops/s
[info] # Warmup Iteration   5: 4974616.537 ops/s
[info] Iteration   1: 5203522.762 ops/s
[info]                  ·gc.alloc.rate:      158.703 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5224593.965 ops/s
[info]                  ·gc.alloc.rate:               159.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 5228015.684 ops/s
[info]                  ·gc.alloc.rate:                   159.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5184254.692 ops/s
[info]                  ·gc.alloc.rate:      158.122 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5198497.196 ops/s
[info]                  ·gc.alloc.rate:               158.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter":
[info]   5207776.860 ±(99.9%) 70738.931 ops/s [Average]
[info]   (min, avg, max) = (5184254.692, 5207776.860, 5228015.684), stdev = 18370.676
[info]   CI (99.9%): [5137037.929, 5278515.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   158.834 ±(99.9%) 2.152 MB/sec [Average]
[info]   (min, avg, max) = (158.122, 158.834, 159.451), stdev = 0.559
[info]   CI (99.9%): [156.682, 160.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   153.481 ±(99.9%) 539.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.481, 255.805), stdev = 140.108
[info]   CI (99.9%): [≈ 0, 692.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   46.301 ±(99.9%) 162.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.301, 77.443), stdev = 42.267
[info]   CI (99.9%): [≈ 0, 209.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay
[info] # Run progress: 76.98% complete, ETA 00:07:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46008.518 ops/s
[info] # Warmup Iteration   2: 230093.562 ops/s
[info] # Warmup Iteration   3: 236155.251 ops/s
[info] # Warmup Iteration   4: 236254.198 ops/s
[info] # Warmup Iteration   5: 236861.362 ops/s
[info] Iteration   1: 236756.947 ops/s
[info]                  ·gc.alloc.rate:                   1648.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11064.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.830 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 235415.671 ops/s
[info]                  ·gc.alloc.rate:                   1639.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11198.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 236235.591 ops/s
[info]                  ·gc.alloc.rate:                   1645.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11221.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 233237.394 ops/s
[info]                  ·gc.alloc.rate:                   1624.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11401.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 234875.574 ops/s
[info]                  ·gc.alloc.rate:                   1635.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9079.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.558 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay":
[info]   235304.235 ±(99.9%) 5253.623 ops/s [Average]
[info]   (min, avg, max) = (233237.394, 235304.235, 236756.947), stdev = 1364.349
[info]   CI (99.9%): [230050.612, 240557.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate":
[info]   1638.899 ±(99.9%) 35.801 MB/sec [Average]
[info]   (min, avg, max) = (1624.954, 1638.899, 1648.939), stdev = 9.297
[info]   CI (99.9%): [1603.098, 1674.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.002, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1613.962 ±(99.9%) 558.455 MB/sec [Average]
[info]   (min, avg, max) = (1355.113, 1613.962, 1690.393), stdev = 145.029
[info]   CI (99.9%): [1055.507, 2172.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   10792.918 ±(99.9%) 3717.027 B/op [Average]
[info]   (min, avg, max) = (9079.546, 10792.918, 11401.376), stdev = 965.300
[info]   CI (99.9%): [7075.891, 14509.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.612 ±(99.9%) 0.806 B/op [Average]
[info]   (min, avg, max) = (0.416, 0.612, 0.835), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 77.78% complete, ETA 00:07:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 474545.503 ops/s
[info] # Warmup Iteration   2: 920977.789 ops/s
[info] # Warmup Iteration   3: 957304.731 ops/s
[info] # Warmup Iteration   4: 966928.624 ops/s
[info] # Warmup Iteration   5: 968891.483 ops/s
[info] Iteration   1: 969141.944 ops/s
[info]                  ·gc.alloc.rate:                   1689.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2727.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 968448.313 ops/s
[info]                  ·gc.alloc.rate:                   1689.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2740.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 967290.939 ops/s
[info]                  ·gc.alloc.rate:                   1686.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2752.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 970716.588 ops/s
[info]                  ·gc.alloc.rate:                   1692.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2748.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 971184.444 ops/s
[info]                  ·gc.alloc.rate:                   1693.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2752.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   969356.445 ±(99.9%) 6187.626 ops/s [Average]
[info]   (min, avg, max) = (967290.939, 969356.445, 971184.444), stdev = 1606.907
[info]   CI (99.9%): [963168.820, 975544.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1690.270 ±(99.9%) 10.421 MB/sec [Average]
[info]   (min, avg, max) = (1686.562, 1690.270, 1693.269), stdev = 2.706
[info]   CI (99.9%): [1679.849, 1700.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2744.000, 2744.000, 2744.000), stdev = 0.001
[info]   CI (99.9%): [2744.000, 2744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1690.437 ±(99.9%) 28.072 MB/sec [Average]
[info]   (min, avg, max) = (1679.883, 1690.437, 1698.619), stdev = 7.290
[info]   CI (99.9%): [1662.365, 1718.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2744.269 ±(99.9%) 40.254 B/op [Average]
[info]   (min, avg, max) = (2727.728, 2744.269, 2752.669), stdev = 10.454
[info]   CI (99.9%): [2704.015, 2784.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.142 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.142, 0.237), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson
[info] # Run progress: 78.57% complete, ETA 00:07:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 961186.009 ops/s
[info] # Warmup Iteration   2: 2503989.106 ops/s
[info] # Warmup Iteration   3: 2541463.218 ops/s
[info] # Warmup Iteration   4: 2528883.113 ops/s
[info] # Warmup Iteration   5: 2555703.849 ops/s
[info] Iteration   1: 2555910.466 ops/s
[info]                  ·gc.alloc.rate:                   1130.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     609.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2543563.922 ops/s
[info]                  ·gc.alloc.rate:                   1124.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     820.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2552072.052 ops/s
[info]                  ·gc.alloc.rate:                   1128.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     616.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2539100.774 ops/s
[info]                  ·gc.alloc.rate:                   1122.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2495367.114 ops/s
[info]                  ·gc.alloc.rate:                   1103.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson":
[info]   2537202.866 ±(99.9%) 93638.013 ops/s [Average]
[info]   (min, avg, max) = (2495367.114, 2537202.866, 2555910.466), stdev = 24317.495
[info]   CI (99.9%): [2443564.852, 2630840.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1122.095 ±(99.9%) 41.490 MB/sec [Average]
[info]   (min, avg, max) = (1103.556, 1122.095, 1130.363), stdev = 10.775
[info]   CI (99.9%): [1080.605, 1163.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1132.668 ±(99.9%) 704.330 MB/sec [Average]
[info]   (min, avg, max) = (989.242, 1132.668, 1339.632), stdev = 182.912
[info]   CI (99.9%): [428.338, 1836.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   702.500 ±(99.9%) 433.791 B/op [Average]
[info]   (min, avg, max) = (609.107, 702.500, 830.317), stdev = 112.654
[info]   CI (99.9%): [268.710, 1136.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.057, 0.077), stdev = 0.014
[info]   CI (99.9%): [0.001, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter
[info] # Run progress: 79.37% complete, ETA 00:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4741416.649 ops/s
[info] # Warmup Iteration   2: 6431682.686 ops/s
[info] # Warmup Iteration   3: 6496058.715 ops/s
[info] # Warmup Iteration   4: 6510192.164 ops/s
[info] # Warmup Iteration   5: 6609577.719 ops/s
[info] Iteration   1: 6341001.743 ops/s
[info]                  ·gc.alloc.rate:               515.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82.671 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 6512992.735 ops/s
[info]                  ·gc.alloc.rate:                   529.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6637026.096 ops/s
[info]                  ·gc.alloc.rate:               539.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79.062 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 6547107.290 ops/s
[info]                  ·gc.alloc.rate:                   532.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6575381.206 ops/s
[info]                  ·gc.alloc.rate:                   534.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter":
[info]   6522701.814 ±(99.9%) 428573.249 ops/s [Average]
[info]   (min, avg, max) = (6341001.743, 6522701.814, 6637026.096), stdev = 111299.112
[info]   CI (99.9%): [6094128.565, 6951275.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   530.540 ±(99.9%) 34.815 MB/sec [Average]
[info]   (min, avg, max) = (515.766, 530.540, 539.823), stdev = 9.041
[info]   CI (99.9%): [495.725, 565.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   533.642 ±(99.9%) 704.325 MB/sec [Average]
[info]   (min, avg, max) = (333.115, 533.642, 668.181), stdev = 182.911
[info]   CI (99.9%): [≈ 0, 1237.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   128.601 ±(99.9%) 167.872 B/op [Average]
[info]   (min, avg, max) = (79.062, 128.601, 160.977), stdev = 43.596
[info]   CI (99.9%): [≈ 0, 296.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc
[info] # Run progress: 80.16% complete, ETA 00:06:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5086068.156 ops/s
[info] # Warmup Iteration   2: 6816443.440 ops/s
[info] # Warmup Iteration   3: 7007406.700 ops/s
[info] # Warmup Iteration   4: 6995458.960 ops/s
[info] # Warmup Iteration   5: 6974624.038 ops/s
[info] Iteration   1: 7022113.907 ops/s
[info]                  ·gc.alloc.rate:      214.179 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7021315.975 ops/s
[info]                  ·gc.alloc.rate:                   214.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6992075.726 ops/s
[info]                  ·gc.alloc.rate:                   213.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6984672.942 ops/s
[info]                  ·gc.alloc.rate:                   213.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7000304.116 ops/s
[info]                  ·gc.alloc.rate:      213.573 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc":
[info]   7004096.533 ±(99.9%) 65497.547 ops/s [Average]
[info]   (min, avg, max) = (6984672.942, 7004096.533, 7022113.907), stdev = 17009.505
[info]   CI (99.9%): [6938598.987, 7069594.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   213.653 ±(99.9%) 1.960 MB/sec [Average]
[info]   (min, avg, max) = (213.049, 213.653, 214.179), stdev = 0.509
[info]   CI (99.9%): [211.693, 215.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   169.025 ±(99.9%) 606.541 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 169.025, 333.441), stdev = 157.517
[info]   CI (99.9%): [≈ 0, 775.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   38.008 ±(99.9%) 136.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.008, 75.124), stdev = 35.438
[info]   CI (99.9%): [≈ 0, 174.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.319 ±(99.9%) 2.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.564), stdev = 0.696
[info]   CI (99.9%): [≈ 0, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.352), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay
[info] # Run progress: 80.95% complete, ETA 00:06:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49992.766 ops/s
[info] # Warmup Iteration   2: 306854.696 ops/s
[info] # Warmup Iteration   3: 320012.993 ops/s
[info] # Warmup Iteration   4: 317209.239 ops/s
[info] # Warmup Iteration   5: 319106.303 ops/s
[info] Iteration   1: 320588.994 ops/s
[info]                  ·gc.alloc.rate:                   1649.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8170.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 317478.672 ops/s
[info]                  ·gc.alloc.rate:                   1633.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8303.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.516 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 315255.005 ops/s
[info]                  ·gc.alloc.rate:                   1621.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6724.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 320475.582 ops/s
[info]                  ·gc.alloc.rate:                   1648.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8293.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 318260.754 ops/s
[info]                  ·gc.alloc.rate:                   1637.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8376.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay":
[info]   318411.801 ±(99.9%) 8579.739 ops/s [Average]
[info]   (min, avg, max) = (315255.005, 318411.801, 320588.994), stdev = 2228.131
[info]   CI (99.9%): [309832.062, 326991.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate":
[info]   1638.074 ±(99.9%) 44.213 MB/sec [Average]
[info]   (min, avg, max) = (1621.849, 1638.074, 1649.342), stdev = 11.482
[info]   CI (99.9%): [1593.861, 1682.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.001), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1613.946 ±(99.9%) 576.096 MB/sec [Average]
[info]   (min, avg, max) = (1347.121, 1613.946, 1694.042), stdev = 149.610
[info]   CI (99.9%): [1037.850, 2190.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   7973.831 ±(99.9%) 2704.149 B/op [Average]
[info]   (min, avg, max) = (6724.604, 7973.831, 8376.802), stdev = 702.259
[info]   CI (99.9%): [5269.682, 10677.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.433 ±(99.9%) 0.662 B/op [Average]
[info]   (min, avg, max) = (0.204, 0.433, 0.624), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 1.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce
[info] # Run progress: 81.75% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 332933.929 ops/s
[info] # Warmup Iteration   2: 470654.926 ops/s
[info] # Warmup Iteration   3: 474462.876 ops/s
[info] # Warmup Iteration   4: 474234.364 ops/s
[info] # Warmup Iteration   5: 467932.871 ops/s
[info] Iteration   1: 470547.204 ops/s
[info]                  ·gc.alloc.rate:                   1834.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5638.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 473912.108 ops/s
[info]                  ·gc.alloc.rate:                   1847.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6740.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.691 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 473003.889 ops/s
[info]                  ·gc.alloc.rate:                   1844.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5641.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 474785.748 ops/s
[info]                  ·gc.alloc.rate:                   1851.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6755.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 469508.379 ops/s
[info]                  ·gc.alloc.rate:                   1831.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5693.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce":
[info]   472351.466 ±(99.9%) 8637.273 ops/s [Average]
[info]   (min, avg, max) = (469508.379, 472351.466, 474785.748), stdev = 2243.072
[info]   CI (99.9%): [463714.193, 480988.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate":
[info]   1841.817 ±(99.9%) 33.134 MB/sec [Average]
[info]   (min, avg, max) = (1831.028, 1841.817, 1851.196), stdev = 8.605
[info]   CI (99.9%): [1808.683, 1874.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm":
[info]   6136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6136.001, 6136.001, 6136.001), stdev = 0.001
[info]   CI (99.9%): [6136.001, 6136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1829.799 ±(99.9%) 718.157 MB/sec [Average]
[info]   (min, avg, max) = (1686.063, 1829.799, 2038.116), stdev = 186.503
[info]   CI (99.9%): [1111.642, 2547.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6094.176 ±(99.9%) 2300.584 B/op [Average]
[info]   (min, avg, max) = (5638.751, 6094.176, 6755.569), stdev = 597.454
[info]   CI (99.9%): [3793.592, 8394.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.117, 0.208), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.388 ±(99.9%) 0.873 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.388, 0.691), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 1.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson
[info] # Run progress: 82.54% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 502357.153 ops/s
[info] # Warmup Iteration   2: 1006711.311 ops/s
[info] # Warmup Iteration   3: 1015007.255 ops/s
[info] # Warmup Iteration   4: 1007894.400 ops/s
[info] # Warmup Iteration   5: 1007319.935 ops/s
[info] Iteration   1: 1012089.409 ops/s
[info]                  ·gc.alloc.rate:                   2120.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3143.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1012050.382 ops/s
[info]                  ·gc.alloc.rate:                   2119.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3156.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1009781.018 ops/s
[info]                  ·gc.alloc.rate:                   2114.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3701.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1015531.563 ops/s
[info]                  ·gc.alloc.rate:                   2126.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3158.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 981246.480 ops/s
[info]                  ·gc.alloc.rate:                   2055.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3273.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson":
[info]   1006139.770 ±(99.9%) 54165.364 ops/s [Average]
[info]   (min, avg, max) = (981246.480, 1006139.770, 1015531.563), stdev = 14066.573
[info]   CI (99.9%): [951974.407, 1060305.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate":
[info]   2107.328 ±(99.9%) 113.801 MB/sec [Average]
[info]   (min, avg, max) = (2055.031, 2107.328, 2126.927), stdev = 29.554
[info]   CI (99.9%): [1993.528, 2221.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm":
[info]   3296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3296.000, 3296.000, 3296.000), stdev = 0.001
[info]   CI (99.9%): [3296.000, 3296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   2101.324 ±(99.9%) 589.281 MB/sec [Average]
[info]   (min, avg, max) = (2022.412, 2101.324, 2374.762), stdev = 153.034
[info]   CI (99.9%): [1512.043, 2690.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3286.818 ±(99.9%) 914.724 B/op [Average]
[info]   (min, avg, max) = (3143.887, 3286.818, 3701.231), stdev = 237.551
[info]   CI (99.9%): [2372.095, 4201.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.208), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (0.129, 0.189, 0.324), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter
[info] # Run progress: 83.33% complete, ETA 00:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1093924.575 ops/s
[info] # Warmup Iteration   2: 1175588.148 ops/s
[info] # Warmup Iteration   3: 1169130.695 ops/s
[info] # Warmup Iteration   4: 1178229.314 ops/s
[info] # Warmup Iteration   5: 1185194.784 ops/s
[info] Iteration   1: 1165823.472 ops/s
[info]                  ·gc.alloc.rate:                   1961.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2742.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1175098.246 ops/s
[info]                  ·gc.alloc.rate:                   1977.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2726.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1160717.351 ops/s
[info]                  ·gc.alloc.rate:                   1953.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2303.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1182405.439 ops/s
[info]                  ·gc.alloc.rate:                   1989.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1700.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2263.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1180077.476 ops/s
[info]                  ·gc.alloc.rate:                   1985.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2723.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter":
[info]   1172824.397 ±(99.9%) 35769.944 ops/s [Average]
[info]   (min, avg, max) = (1160717.351, 1172824.397, 1182405.439), stdev = 9289.341
[info]   CI (99.9%): [1137054.453, 1208594.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate":
[info]   1973.551 ±(99.9%) 60.291 MB/sec [Average]
[info]   (min, avg, max) = (1953.121, 1973.551, 1989.525), stdev = 15.657
[info]   CI (99.9%): [1913.260, 2033.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm":
[info]   2648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2648.000, 2648.000, 2648.000), stdev = 0.001
[info]   CI (99.9%): [2648.000, 2648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   1902.061 ±(99.9%) 711.254 MB/sec [Average]
[info]   (min, avg, max) = (1698.794, 1902.061, 2042.530), stdev = 184.710
[info]   CI (99.9%): [1190.808, 2613.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   2551.976 ±(99.9%) 945.998 B/op [Average]
[info]   (min, avg, max) = (2263.632, 2551.976, 2742.835), stdev = 245.673
[info]   CI (99.9%): [1605.979, 3497.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.187), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.140 ±(99.9%) 0.273 B/op [Average]
[info]   (min, avg, max) = (0.056, 0.140, 0.251), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce
[info] # Run progress: 84.13% complete, ETA 00:05:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1117976.299 ops/s
[info] # Warmup Iteration   2: 1555175.985 ops/s
[info] # Warmup Iteration   3: 1616104.494 ops/s
[info] # Warmup Iteration   4: 1605942.280 ops/s
[info] # Warmup Iteration   5: 1584744.717 ops/s
[info] Iteration   1: 1591672.273 ops/s
[info]                  ·gc.alloc.rate:                   1950.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1668.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1600817.278 ops/s
[info]                  ·gc.alloc.rate:                   1961.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1998.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1589648.621 ops/s
[info]                  ·gc.alloc.rate:                   1947.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2016.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1602016.000 ops/s
[info]                  ·gc.alloc.rate:                   1962.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2002.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1596802.507 ops/s
[info]                  ·gc.alloc.rate:                   1956.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1701.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1676.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce":
[info]   1596191.336 ±(99.9%) 20996.484 ops/s [Average]
[info]   (min, avg, max) = (1589648.621, 1596191.336, 1602016.000), stdev = 5452.720
[info]   CI (99.9%): [1575194.852, 1617187.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate":
[info]   1955.642 ±(99.9%) 26.026 MB/sec [Average]
[info]   (min, avg, max) = (1947.453, 1955.642, 1962.667), stdev = 6.759
[info]   CI (99.9%): [1929.617, 1981.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1928.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1928.000, 1928.000, 1928.000), stdev = 0.001
[info]   CI (99.9%): [1928.000, 1928.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1899.359 ±(99.9%) 720.402 MB/sec [Average]
[info]   (min, avg, max) = (1687.413, 1899.359, 2038.544), stdev = 187.086
[info]   CI (99.9%): [1178.956, 2619.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1872.367 ±(99.9%) 703.030 B/op [Average]
[info]   (min, avg, max) = (1668.366, 1872.367, 2016.156), stdev = 182.575
[info]   CI (99.9%): [1169.337, 2575.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.098 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (0.082, 0.098, 0.143), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson
[info] # Run progress: 84.92% complete, ETA 00:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 623688.392 ops/s
[info] # Warmup Iteration   2: 1209247.694 ops/s
[info] # Warmup Iteration   3: 1209765.575 ops/s
[info] # Warmup Iteration   4: 1227676.196 ops/s
[info] # Warmup Iteration   5: 1206341.655 ops/s
[info] Iteration   1: 1227580.439 ops/s
[info]                  ·gc.alloc.rate:                   761.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1262.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1215215.855 ops/s
[info]                  ·gc.alloc.rate:                   753.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     853.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1201969.879 ops/s
[info]                  ·gc.alloc.rate:                   745.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     865.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1227687.619 ops/s
[info]                  ·gc.alloc.rate:                   761.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1275.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1216702.601 ops/s
[info]                  ·gc.alloc.rate:                   754.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     860.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson":
[info]   1217831.278 ±(99.9%) 40928.013 ops/s [Average]
[info]   (min, avg, max) = (1201969.879, 1217831.278, 1227687.619), stdev = 10628.875
[info]   CI (99.9%): [1176903.266, 1258759.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate":
[info]   755.311 ±(99.9%) 25.406 MB/sec [Average]
[info]   (min, avg, max) = (745.447, 755.311, 761.460), stdev = 6.598
[info]   CI (99.9%): [729.904, 780.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   793.000 ±(99.9%) 692.123 MB/sec [Average]
[info]   (min, avg, max) = (658.969, 793.000, 995.067), stdev = 179.742
[info]   CI (99.9%): [100.877, 1485.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1023.397 ±(99.9%) 863.125 B/op [Average]
[info]   (min, avg, max) = (853.265, 1023.397, 1275.426), stdev = 224.151
[info]   CI (99.9%): [160.272, 1886.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.070, 0.136), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter
[info] # Run progress: 85.71% complete, ETA 00:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2053037.834 ops/s
[info] # Warmup Iteration   2: 2168663.093 ops/s
[info] # Warmup Iteration   3: 2185041.545 ops/s
[info] # Warmup Iteration   4: 2188998.857 ops/s
[info] # Warmup Iteration   5: 2154084.596 ops/s
[info] Iteration   1: 2190064.995 ops/s
[info]                  ·gc.alloc.rate:                   356.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2178942.829 ops/s
[info]                  ·gc.alloc.rate:                   354.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2193111.510 ops/s
[info]                  ·gc.alloc.rate:                   356.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2054121.413 ops/s
[info]                  ·gc.alloc.rate:               334.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 256.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 2139476.845 ops/s
[info]                  ·gc.alloc.rate:                   348.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter":
[info]   2151143.518 ±(99.9%) 224515.950 ops/s [Average]
[info]   (min, avg, max) = (2054121.413, 2151143.518, 2193111.510), stdev = 58306.079
[info]   CI (99.9%): [1926627.568, 2375659.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate":
[info]   349.959 ±(99.9%) 36.352 MB/sec [Average]
[info]   (min, avg, max) = (334.257, 349.959, 356.761), stdev = 9.441
[info]   CI (99.9%): [313.607, 386.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   335.397 ±(99.9%) 1.317 MB/sec [Average]
[info]   (min, avg, max) = (335.106, 335.397, 335.772), stdev = 0.342
[info]   CI (99.9%): [334.079, 336.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   245.492 ±(99.9%) 25.790 B/op [Average]
[info]   (min, avg, max) = (240.462, 245.492, 256.733), stdev = 6.698
[info]   CI (99.9%): [219.702, 271.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.300 ±(99.9%) 2.406 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.418), stdev = 0.625
[info]   CI (99.9%): [≈ 0, 2.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.216 ±(99.9%) 1.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 1.019), stdev = 0.449
[info]   CI (99.9%): [≈ 0, 1.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce
[info] # Run progress: 86.51% complete, ETA 00:04:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182792.570 ops/s
[info] # Warmup Iteration   2: 271520.998 ops/s
[info] # Warmup Iteration   3: 276630.324 ops/s
[info] # Warmup Iteration   4: 274210.534 ops/s
[info] # Warmup Iteration   5: 276257.472 ops/s
[info] Iteration   1: 272991.847 ops/s
[info]                  ·gc.alloc.rate:                   1393.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7724.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 275735.218 ops/s
[info]                  ·gc.alloc.rate:                   1407.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7674.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.594 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 276372.021 ops/s
[info]                  ·gc.alloc.rate:                   1410.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7683.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 276389.458 ops/s
[info]                  ·gc.alloc.rate:                   1410.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7703.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 273978.237 ops/s
[info]                  ·gc.alloc.rate:                   1398.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9734.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.598 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce":
[info]   275093.356 ±(99.9%) 5898.742 ops/s [Average]
[info]   (min, avg, max) = (272991.847, 275093.356, 276389.458), stdev = 1531.885
[info]   CI (99.9%): [269194.614, 280992.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate":
[info]   1404.182 ±(99.9%) 29.947 MB/sec [Average]
[info]   (min, avg, max) = (1393.610, 1404.182, 1410.697), stdev = 7.777
[info]   CI (99.9%): [1374.235, 1434.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm":
[info]   8032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8032.002, 8032.002, 8032.002), stdev = 0.001
[info]   CI (99.9%): [8032.001, 8032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1416.491 ±(99.9%) 599.227 MB/sec [Average]
[info]   (min, avg, max) = (1340.289, 1416.491, 1694.738), stdev = 155.617
[info]   CI (99.9%): [817.264, 2015.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8104.173 ±(99.9%) 3510.603 B/op [Average]
[info]   (min, avg, max) = (7674.473, 8104.173, 9734.689), stdev = 911.692
[info]   CI (99.9%): [4593.571, 11614.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.500 ±(99.9%) 0.594 B/op [Average]
[info]   (min, avg, max) = (0.240, 0.500, 0.598), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 1.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson
[info] # Run progress: 87.30% complete, ETA 00:04:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446213.397 ops/s
[info] # Warmup Iteration   2: 789491.290 ops/s
[info] # Warmup Iteration   3: 792067.927 ops/s
[info] # Warmup Iteration   4: 804326.377 ops/s
[info] # Warmup Iteration   5: 805851.725 ops/s
[info] Iteration   1: 804550.687 ops/s
[info]                  ·gc.alloc.rate:               814.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      987.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1930.521 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 804465.186 ops/s
[info]                  ·gc.alloc.rate:                   813.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1290.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 805180.492 ops/s
[info]                  ·gc.alloc.rate:                   814.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1941.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 789418.439 ops/s
[info]                  ·gc.alloc.rate:                   798.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1325.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 801227.671 ops/s
[info]                  ·gc.alloc.rate:                   810.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1309.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson":
[info]   800968.495 ±(99.9%) 25561.927 ops/s [Average]
[info]   (min, avg, max) = (789418.439, 800968.495, 805180.492), stdev = 6638.351
[info]   CI (99.9%): [775406.568, 826530.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate":
[info]   810.296 ±(99.9%) 25.981 MB/sec [Average]
[info]   (min, avg, max) = (798.563, 810.296, 814.546), stdev = 6.747
[info]   CI (99.9%): [784.315, 836.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.000, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   794.375 ±(99.9%) 688.499 MB/sec [Average]
[info]   (min, avg, max) = (659.821, 794.375, 993.268), stdev = 178.801
[info]   CI (99.9%): [105.876, 1482.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1559.545 ±(99.9%) 1323.911 B/op [Average]
[info]   (min, avg, max) = (1290.786, 1559.545, 1941.306), stdev = 343.815
[info]   CI (99.9%): [235.634, 2883.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.115 ±(99.9%) 0.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.203), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter
[info] # Run progress: 88.10% complete, ETA 00:03:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 778040.222 ops/s
[info] # Warmup Iteration   2: 1025145.740 ops/s
[info] # Warmup Iteration   3: 1032544.287 ops/s
[info] # Warmup Iteration   4: 1031645.130 ops/s
[info] # Warmup Iteration   5: 1031684.473 ops/s
[info] Iteration   1: 1035238.462 ops/s
[info]                  ·gc.alloc.rate:                   873.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1521.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1030970.914 ops/s
[info]                  ·gc.alloc.rate:                   869.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1530.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1023622.733 ops/s
[info]                  ·gc.alloc.rate:                   863.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1030.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1038906.274 ops/s
[info]                  ·gc.alloc.rate:                   876.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1525.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1019937.187 ops/s
[info]                  ·gc.alloc.rate:                   860.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1038.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter":
[info]   1029735.114 ±(99.9%) 30398.437 ops/s [Average]
[info]   (min, avg, max) = (1019937.187, 1029735.114, 1038906.274), stdev = 7894.378
[info]   CI (99.9%): [999336.677, 1060133.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate":
[info]   868.938 ±(99.9%) 25.627 MB/sec [Average]
[info]   (min, avg, max) = (860.649, 868.938, 876.660), stdev = 6.655
[info]   CI (99.9%): [843.311, 894.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   870.761 ±(99.9%) 700.504 MB/sec [Average]
[info]   (min, avg, max) = (670.197, 870.761, 1006.915), stdev = 181.919
[info]   CI (99.9%): [170.256, 1571.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1329.275 ±(99.9%) 1037.232 B/op [Average]
[info]   (min, avg, max) = (1030.340, 1329.275, 1530.985), stdev = 269.366
[info]   CI (99.9%): [292.043, 2366.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 0.236 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.134, 0.222), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc
[info] # Run progress: 88.89% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 843281.802 ops/s
[info] # Warmup Iteration   2: 1066164.829 ops/s
[info] # Warmup Iteration   3: 1065403.876 ops/s
[info] # Warmup Iteration   4: 1066794.175 ops/s
[info] # Warmup Iteration   5: 1067009.649 ops/s
[info] Iteration   1: 1064054.164 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1066417.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1069297.383 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1068947.999 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1048663.913 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc":
[info]   1063476.217 ±(99.9%) 32912.117 ops/s [Average]
[info]   (min, avg, max) = (1048663.913, 1063476.217, 1069297.383), stdev = 8547.172
[info]   CI (99.9%): [1030564.100, 1096388.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay
[info] # Run progress: 89.68% complete, ETA 00:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 696238.343 ops/s
[info] # Warmup Iteration   2: 899698.029 ops/s
[info] # Warmup Iteration   3: 913819.094 ops/s
[info] # Warmup Iteration   4: 914028.435 ops/s
[info] # Warmup Iteration   5: 909541.558 ops/s
[info] Iteration   1: 920591.049 ops/s
[info]                  ·gc.alloc.rate:                   982.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1703.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 910427.763 ops/s
[info]                  ·gc.alloc.rate:                   971.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1729.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 919858.478 ops/s
[info]                  ·gc.alloc.rate:                   981.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1716.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 923084.105 ops/s
[info]                  ·gc.alloc.rate:                   985.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1716.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 893241.171 ops/s
[info]                  ·gc.alloc.rate:                   953.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1777.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay":
[info]   913440.513 ±(99.9%) 47255.160 ops/s [Average]
[info]   (min, avg, max) = (893241.171, 913440.513, 923084.105), stdev = 12272.015
[info]   CI (99.9%): [866185.353, 960695.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate":
[info]   975.115 ±(99.9%) 50.674 MB/sec [Average]
[info]   (min, avg, max) = (953.464, 975.115, 985.514), stdev = 13.160
[info]   CI (99.9%): [924.441, 1025.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm":
[info]   1680.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.000, 1680.000, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.000, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   1003.258 ±(99.9%) 19.040 MB/sec [Average]
[info]   (min, avg, max) = (996.645, 1003.258, 1008.829), stdev = 4.945
[info]   CI (99.9%): [984.219, 1022.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   1728.786 ±(99.9%) 110.510 B/op [Average]
[info]   (min, avg, max) = (1703.729, 1728.786, 1777.554), stdev = 28.699
[info]   CI (99.9%): [1618.277, 1839.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.136 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (0.071, 0.136, 0.252), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce
[info] # Run progress: 90.48% complete, ETA 00:03:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 986399.497 ops/s
[info] # Warmup Iteration   2: 1437592.750 ops/s
[info] # Warmup Iteration   3: 1496978.751 ops/s
[info] # Warmup Iteration   4: 1497859.867 ops/s
[info] # Warmup Iteration   5: 1495137.506 ops/s
[info] Iteration   1: 1496465.123 ops/s
[info]                  ·gc.alloc.rate:                   973.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1049.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1482661.645 ops/s
[info]                  ·gc.alloc.rate:                   964.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     707.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1490899.941 ops/s
[info]                  ·gc.alloc.rate:                   970.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1059.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1493259.083 ops/s
[info]                  ·gc.alloc.rate:                   971.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1494967.560 ops/s
[info]                  ·gc.alloc.rate:                   972.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1062.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce":
[info]   1491650.671 ±(99.9%) 20926.210 ops/s [Average]
[info]   (min, avg, max) = (1482661.645, 1491650.671, 1496465.123), stdev = 5434.470
[info]   CI (99.9%): [1470724.460, 1512576.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate":
[info]   970.590 ±(99.9%) 13.632 MB/sec [Average]
[info]   (min, avg, max) = (964.738, 970.590, 973.729), stdev = 3.540
[info]   CI (99.9%): [956.958, 984.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1024.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.000, 1024.000, 1024.000), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   936.784 ±(99.9%) 581.241 MB/sec [Average]
[info]   (min, avg, max) = (666.870, 936.784, 1008.954), stdev = 150.946
[info]   CI (99.9%): [355.543, 1518.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   987.915 ±(99.9%) 603.224 B/op [Average]
[info]   (min, avg, max) = (707.835, 987.915, 1062.116), stdev = 156.655
[info]   CI (99.9%): [384.691, 1591.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.084, 0.133), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson
[info] # Run progress: 91.27% complete, ETA 00:02:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1571544.287 ops/s
[info] # Warmup Iteration   2: 3038127.793 ops/s
[info] # Warmup Iteration   3: 3028352.346 ops/s
[info] # Warmup Iteration   4: 3018536.344 ops/s
[info] # Warmup Iteration   5: 3071052.863 ops/s
[info] Iteration   1: 3052869.000 ops/s
[info]                  ·gc.alloc.rate:                   1257.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     684.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3064795.935 ops/s
[info]                  ·gc.alloc.rate:                   1262.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     685.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3067538.725 ops/s
[info]                  ·gc.alloc.rate:                   1263.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3069589.524 ops/s
[info]                  ·gc.alloc.rate:                   1263.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     689.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3028311.942 ops/s
[info]                  ·gc.alloc.rate:                   1247.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     701.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson":
[info]   3056621.025 ±(99.9%) 65847.395 ops/s [Average]
[info]   (min, avg, max) = (3028311.942, 3056621.025, 3069589.524), stdev = 17100.359
[info]   CI (99.9%): [2990773.631, 3122468.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate":
[info]   1258.712 ±(99.9%) 26.907 MB/sec [Average]
[info]   (min, avg, max) = (1247.112, 1258.712, 1263.943), stdev = 6.988
[info]   CI (99.9%): [1231.805, 1285.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   1272.897 ±(99.9%) 575.423 MB/sec [Average]
[info]   (min, avg, max) = (1006.024, 1272.897, 1349.822), stdev = 149.435
[info]   CI (99.9%): [697.474, 1848.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   655.450 ±(99.9%) 301.160 B/op [Average]
[info]   (min, avg, max) = (516.059, 655.450, 701.368), stdev = 78.210
[info]   CI (99.9%): [354.290, 956.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.047, 0.096), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter
[info] # Run progress: 92.06% complete, ETA 00:02:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2436990.594 ops/s
[info] # Warmup Iteration   2: 3062856.680 ops/s
[info] # Warmup Iteration   3: 3096659.842 ops/s
[info] # Warmup Iteration   4: 3122388.072 ops/s
[info] # Warmup Iteration   5: 3129702.493 ops/s
[info] Iteration   1: 3119173.294 ops/s
[info]                  ·gc.alloc.rate:                   618.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3052817.090 ops/s
[info]                  ·gc.alloc.rate:                   605.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3153577.717 ops/s
[info]                  ·gc.alloc.rate:               625.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166.549 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 3139636.769 ops/s
[info]                  ·gc.alloc.rate:                   622.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     334.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3143243.688 ops/s
[info]                  ·gc.alloc.rate:                   623.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     335.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter":
[info]   3121689.712 ±(99.9%) 155859.374 ops/s [Average]
[info]   (min, avg, max) = (3052817.090, 3121689.712, 3153577.717), stdev = 40476.184
[info]   CI (99.9%): [2965830.338, 3277549.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate":
[info]   618.998 ±(99.9%) 30.952 MB/sec [Average]
[info]   (min, avg, max) = (605.355, 618.998, 625.382), stdev = 8.038
[info]   CI (99.9%): [588.046, 649.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   600.928 ±(99.9%) 574.953 MB/sec [Average]
[info]   (min, avg, max) = (333.836, 600.928, 669.228), stdev = 149.314
[info]   CI (99.9%): [25.975, 1175.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   303.279 ±(99.9%) 294.658 B/op [Average]
[info]   (min, avg, max) = (166.549, 303.279, 343.756), stdev = 76.522
[info]   CI (99.9%): [8.621, 597.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.075), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc
[info] # Run progress: 92.86% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2612779.758 ops/s
[info] # Warmup Iteration   2: 3328056.002 ops/s
[info] # Warmup Iteration   3: 3355622.548 ops/s
[info] # Warmup Iteration   4: 3352275.714 ops/s
[info] # Warmup Iteration   5: 3322539.015 ops/s
[info] Iteration   1: 3351191.953 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3353621.029 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3351063.535 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3353946.281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3349290.478 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc":
[info]   3351822.655 ±(99.9%) 7488.959 ops/s [Average]
[info]   (min, avg, max) = (3349290.478, 3351822.655, 3353946.281), stdev = 1944.859
[info]   CI (99.9%): [3344333.696, 3359311.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay
[info] # Run progress: 93.65% complete, ETA 00:02:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2284023.796 ops/s
[info] # Warmup Iteration   2: 2935812.868 ops/s
[info] # Warmup Iteration   3: 3006387.904 ops/s
[info] # Warmup Iteration   4: 2976047.231 ops/s
[info] # Warmup Iteration   5: 3001216.650 ops/s
[info] Iteration   1: 3000183.631 ops/s
[info]                  ·gc.alloc.rate:                   1265.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     700.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2969905.740 ops/s
[info]                  ·gc.alloc.rate:                   1253.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2994576.276 ops/s
[info]                  ·gc.alloc.rate:                   1263.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     530.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2931433.355 ops/s
[info]                  ·gc.alloc.rate:                   1237.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2979754.673 ops/s
[info]                  ·gc.alloc.rate:                   1257.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay":
[info]   2975170.735 ±(99.9%) 104818.019 ops/s [Average]
[info]   (min, avg, max) = (2931433.355, 2975170.735, 3000183.631), stdev = 27220.907
[info]   CI (99.9%): [2870352.716, 3079988.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate":
[info]   1255.438 ±(99.9%) 43.817 MB/sec [Average]
[info]   (min, avg, max) = (1237.229, 1255.438, 1265.846), stdev = 11.379
[info]   CI (99.9%): [1211.621, 1299.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   1278.023 ±(99.9%) 579.261 MB/sec [Average]
[info]   (min, avg, max) = (1009.192, 1278.023, 1353.055), stdev = 150.432
[info]   CI (99.9%): [698.762, 1857.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   676.241 ±(99.9%) 315.983 B/op [Average]
[info]   (min, avg, max) = (530.237, 676.241, 724.572), stdev = 82.060
[info]   CI (99.9%): [360.258, 992.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.057, 0.077), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 94.44% complete, ETA 00:01:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6222.115 ops/s
[info] # Warmup Iteration   2: 11173.928 ops/s
[info] # Warmup Iteration   3: 12245.971 ops/s
[info] # Warmup Iteration   4: 12929.750 ops/s
[info] # Warmup Iteration   5: 12860.091 ops/s
[info] Iteration   1: 12888.157 ops/s
[info]                  ·gc.alloc.rate:                   1818.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              221989.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205062.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.252 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12611.097 ops/s
[info]                  ·gc.alloc.rate:                   1779.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210396.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.586 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12938.990 ops/s
[info]                  ·gc.alloc.rate:                   1825.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246971.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.257 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12856.623 ops/s
[info]                  ·gc.alloc.rate:                   1813.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207513.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.836 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12851.042 ops/s
[info]                  ·gc.alloc.rate:                   1813.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              221988.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249234.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.091 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12829.182 ±(99.9%) 488.318 ops/s [Average]
[info]   (min, avg, max) = (12611.097, 12829.182, 12938.990), stdev = 126.815
[info]   CI (99.9%): [12340.864, 13317.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1810.002 ±(99.9%) 68.952 MB/sec [Average]
[info]   (min, avg, max) = (1779.124, 1810.002, 1825.380), stdev = 17.907
[info]   CI (99.9%): [1741.050, 1878.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   222000.318 ±(99.9%) 40.749 B/op [Average]
[info]   (min, avg, max) = (221988.065, 222000.318, 222008.046), stdev = 10.582
[info]   CI (99.9%): [221959.569, 222041.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1825.555 ±(99.9%) 731.168 MB/sec [Average]
[info]   (min, avg, max) = (1679.435, 1825.555, 2036.278), stdev = 189.882
[info]   CI (99.9%): [1094.387, 2556.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   223835.773 ±(99.9%) 85667.257 B/op [Average]
[info]   (min, avg, max) = (205062.408, 223835.773, 249234.314), stdev = 22247.515
[info]   CI (99.9%): [138168.516, 309503.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.121, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.804 ±(99.9%) 22.295 B/op [Average]
[info]   (min, avg, max) = (5.091, 14.804, 20.257), stdev = 5.790
[info]   CI (99.9%): [≈ 0, 37.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson
[info] # Run progress: 95.24% complete, ETA 00:01:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6666.568 ops/s
[info] # Warmup Iteration   2: 16332.217 ops/s
[info] # Warmup Iteration   3: 16686.153 ops/s
[info] # Warmup Iteration   4: 16571.797 ops/s
[info] # Warmup Iteration   5: 15870.560 ops/s
[info] Iteration   1: 16499.254 ops/s
[info]                  ·gc.alloc.rate:                   261.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              24896.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24397.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.975 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16383.475 ops/s
[info]                  ·gc.alloc.rate:               259.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          24896.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24570.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 16442.454 ops/s
[info]                  ·gc.alloc.rate:                   259.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              24874.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30952.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16805.660 ops/s
[info]                  ·gc.alloc.rate:               265.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          24864.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30284.572 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 16804.734 ops/s
[info]                  ·gc.alloc.rate:               265.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          24864.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30317.564 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson":
[info]   16587.115 ±(99.9%) 782.628 ops/s [Average]
[info]   (min, avg, max) = (16383.475, 16587.115, 16805.660), stdev = 203.246
[info]   CI (99.9%): [15804.488, 17369.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   262.224 ±(99.9%) 11.830 MB/sec [Average]
[info]   (min, avg, max) = (259.173, 262.224, 265.533), stdev = 3.072
[info]   CI (99.9%): [250.394, 274.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   24879.004 ±(99.9%) 62.250 B/op [Average]
[info]   (min, avg, max) = (24864.026, 24879.004, 24896.036), stdev = 16.166
[info]   CI (99.9%): [24816.755, 24941.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   296.424 ±(99.9%) 142.846 MB/sec [Average]
[info]   (min, avg, max) = (255.779, 296.424, 323.719), stdev = 37.097
[info]   CI (99.9%): [153.578, 439.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   28104.485 ±(99.9%) 12771.162 B/op [Average]
[info]   (min, avg, max) = (24397.309, 28104.485, 30952.979), stdev = 3316.630
[info]   CI (99.9%): [15333.323, 40875.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.570 ±(99.9%) 4.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.821), stdev = 1.258
[info]   CI (99.9%): [≈ 0, 5.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   54.596 ±(99.9%) 463.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.596, 270.005), stdev = 120.424
[info]   CI (99.9%): [≈ 0, 518.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter
[info] # Run progress: 96.03% complete, ETA 00:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19352.000 ops/s
[info] # Warmup Iteration   2: 23124.991 ops/s
[info] # Warmup Iteration   3: 39602.580 ops/s
[info] # Warmup Iteration   4: 38083.736 ops/s
[info] # Warmup Iteration   5: 40297.396 ops/s
[info] Iteration   1: 39675.815 ops/s
[info]                  ·gc.alloc.rate:                   440.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26423.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39947.019 ops/s
[info]                  ·gc.alloc.rate:               443.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13095.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 40393.268 ops/s
[info]                  ·gc.alloc.rate:                   448.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12950.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40517.597 ops/s
[info]                  ·gc.alloc.rate:                   450.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25822.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 39537.836 ops/s
[info]                  ·gc.alloc.rate:               439.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13245.087 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter":
[info]   40014.307 ±(99.9%) 1659.625 ops/s [Average]
[info]   (min, avg, max) = (39537.836, 40014.307, 40517.597), stdev = 430.999
[info]   CI (99.9%): [38354.682, 41673.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   444.696 ±(99.9%) 18.337 MB/sec [Average]
[info]   (min, avg, max) = (439.466, 444.696, 450.262), stdev = 4.762
[info]   CI (99.9%): [426.360, 463.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   17488.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (17488.011, 17488.011, 17488.012), stdev = 0.001
[info]   CI (99.9%): [17488.009, 17488.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   465.746 ±(99.9%) 702.196 MB/sec [Average]
[info]   (min, avg, max) = (332.408, 465.746, 666.170), stdev = 182.358
[info]   CI (99.9%): [≈ 0, 1167.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   18307.307 ±(99.9%) 27487.566 B/op [Average]
[info]   (min, avg, max) = (12950.509, 18307.307, 26423.143), stdev = 7138.434
[info]   CI (99.9%): [≈ 0, 45794.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 2.803 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.647), stdev = 0.728
[info]   CI (99.9%): [≈ 0, 3.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   13.716 ±(99.9%) 111.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.716, 65.344), stdev = 28.878
[info]   CI (99.9%): [≈ 0, 124.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay
[info] # Run progress: 96.83% complete, ETA 00:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1071.569 ops/s
[info] # Warmup Iteration   2: 3150.947 ops/s
[info] # Warmup Iteration   3: 2997.641 ops/s
[info] # Warmup Iteration   4: 3642.905 ops/s
[info] # Warmup Iteration   5: 3781.146 ops/s
[info] Iteration   1: 3765.596 ops/s
[info]                  ·gc.alloc.rate:                   1213.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              507112.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553933.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.096 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3770.305 ops/s
[info]                  ·gc.alloc.rate:                   1215.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              507112.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     556812.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.687 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3745.484 ops/s
[info]                  ·gc.alloc.rate:               1207.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          507112.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1006.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 422564.654 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3789.032 ops/s
[info]                  ·gc.alloc.rate:               1221.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          507112.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 558871.641 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3788.500 ops/s
[info]                  ·gc.alloc.rate:               1221.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          507112.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1012.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 420537.077 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay":
[info]   3771.783 ±(99.9%) 69.661 ops/s [Average]
[info]   (min, avg, max) = (3745.484, 3771.783, 3789.032), stdev = 18.091
[info]   CI (99.9%): [3702.122, 3841.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1215.625 ±(99.9%) 22.466 MB/sec [Average]
[info]   (min, avg, max) = (1207.301, 1215.625, 1221.227), stdev = 5.834
[info]   CI (99.9%): [1193.159, 1238.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   507112.118 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (507112.114, 507112.118, 507112.124), stdev = 0.005
[info]   CI (99.9%): [507112.098, 507112.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1204.826 ±(99.9%) 687.791 MB/sec [Average]
[info]   (min, avg, max) = (1006.016, 1204.826, 1345.874), stdev = 178.617
[info]   CI (99.9%): [517.035, 1892.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   502543.860 ±(99.9%) 284795.270 B/op [Average]
[info]   (min, avg, max) = (420537.077, 502543.860, 558871.641), stdev = 73960.427
[info]   CI (99.9%): [217748.590, 787339.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   6.957 ±(99.9%) 43.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.957, 26.096), stdev = 11.341
[info]   CI (99.9%): [≈ 0, 50.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson
[info] # Run progress: 97.62% complete, ETA 00:00:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29433.739 ops/s
[info] # Warmup Iteration   2: 59958.716 ops/s
[info] # Warmup Iteration   3: 57977.912 ops/s
[info] # Warmup Iteration   4: 60517.564 ops/s
[info] # Warmup Iteration   5: 60623.554 ops/s
[info] Iteration   1: 60510.729 ops/s
[info]                  ·gc.alloc.rate:                   772.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16892.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 60186.285 ops/s
[info]                  ·gc.alloc.rate:                   768.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17052.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59129.147 ops/s
[info]                  ·gc.alloc.rate:                   755.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26177.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.770 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60267.108 ops/s
[info]                  ·gc.alloc.rate:                   769.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17187.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60801.934 ops/s
[info]                  ·gc.alloc.rate:                   776.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17086.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson":
[info]   60179.041 ±(99.9%) 2441.516 ops/s [Average]
[info]   (min, avg, max) = (59129.147, 60179.041, 60801.934), stdev = 634.054
[info]   CI (99.9%): [57737.525, 62620.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   768.621 ±(99.9%) 31.157 MB/sec [Average]
[info]   (min, avg, max) = (755.235, 768.621, 776.605), stdev = 8.091
[info]   CI (99.9%): [737.464, 799.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   20099.999 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (20099.942, 20099.999, 20100.049), stdev = 0.040
[info]   CI (99.9%): [20099.843, 20100.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   720.724 ±(99.9%) 566.093 MB/sec [Average]
[info]   (min, avg, max) = (649.507, 720.724, 983.594), stdev = 147.013
[info]   CI (99.9%): [154.631, 1286.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   18879.304 ±(99.9%) 15715.440 B/op [Average]
[info]   (min, avg, max) = (16892.675, 18879.304, 26177.611), stdev = 4081.250
[info]   CI (99.9%): [3163.864, 34594.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.640 ±(99.9%) 4.246 B/op [Average]
[info]   (min, avg, max) = (0.539, 1.640, 2.770), stdev = 1.103
[info]   CI (99.9%): [≈ 0, 5.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter
[info] # Run progress: 98.41% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62674.170 ops/s
[info] # Warmup Iteration   2: 82071.779 ops/s
[info] # Warmup Iteration   3: 84461.858 ops/s
[info] # Warmup Iteration   4: 84243.814 ops/s
[info] # Warmup Iteration   5: 83898.070 ops/s
[info] Iteration   1: 82135.812 ops/s
[info]                  ·gc.alloc.rate:                   538.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12738.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 83783.812 ops/s
[info]                  ·gc.alloc.rate:               549.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6243.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 82333.281 ops/s
[info]                  ·gc.alloc.rate:                   539.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12707.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 81375.733 ops/s
[info]                  ·gc.alloc.rate:               533.637 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6441.755 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 83516.092 ops/s
[info]                  ·gc.alloc.rate:                   547.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12564.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter":
[info]   82628.946 ±(99.9%) 3861.163 ops/s [Average]
[info]   (min, avg, max) = (81375.733, 82628.946, 83783.812), stdev = 1002.732
[info]   CI (99.9%): [78767.783, 86490.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   541.884 ±(99.9%) 25.275 MB/sec [Average]
[info]   (min, avg, max) = (533.637, 541.884, 549.428), stdev = 6.564
[info]   CI (99.9%): [516.609, 567.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   532.423 ±(99.9%) 701.872 MB/sec [Average]
[info]   (min, avg, max) = (332.412, 532.423, 666.786), stdev = 182.274
[info]   CI (99.9%): [≈ 0, 1234.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   10139.113 ±(99.9%) 13349.845 B/op [Average]
[info]   (min, avg, max) = (6243.758, 10139.113, 12738.015), stdev = 3466.912
[info]   CI (99.9%): [≈ 0, 23488.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.716 ±(99.9%) 3.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 1.990), stdev = 0.864
[info]   CI (99.9%): [≈ 0, 4.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 99.21% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66806.523 ops/s
[info] # Warmup Iteration   2: 92197.851 ops/s
[info] # Warmup Iteration   3: 91976.632 ops/s
[info] # Warmup Iteration   4: 90079.460 ops/s
[info] # Warmup Iteration   5: 92185.657 ops/s
[info] Iteration   1: 92241.248 ops/s
[info]                  ·gc.alloc.rate:      13.132 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 92166.651 ops/s
[info]                  ·gc.alloc.rate:      13.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 92233.863 ops/s
[info]                  ·gc.alloc.rate:      13.128 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 92251.664 ops/s
[info]                  ·gc.alloc.rate:      13.128 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 92239.057 ops/s
[info]                  ·gc.alloc.rate:      13.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc":
[info]   92226.496 ±(99.9%) 131.212 ops/s [Average]
[info]   (min, avg, max) = (92166.651, 92226.496, 92251.664), stdev = 34.075
[info]   CI (99.9%): [92095.284, 92357.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   13.127 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (13.119, 13.127, 13.132), stdev = 0.005
[info]   CI (99.9%): [13.108, 13.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.005, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.005, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:32:50
[info] Benchmark                                                                               Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    810794.470 ±   12356.172   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      2135.114 ±      32.463  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      2102.957 ±     578.640  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4081.595 ±    1121.375    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.117 ±       0.091  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.226 ±       0.176    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        26.000                    ms
[info] AdtBenchmark.readJackson                                                               thrpt    5   1653440.628 ±   27768.783   ops/s
[info] AdtBenchmark.readJackson:·gc.alloc.rate                                                thrpt    5      1176.796 ±      19.762  MB/sec
[info] AdtBenchmark.readJackson:·gc.alloc.rate.norm                                           thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space                                       thrpt    5      1133.344 ±     705.455  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      1078.795 ±     675.832    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.087 ±       0.154  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.083 ±       0.148    B/op
[info] AdtBenchmark.readJackson:·gc.count                                                     thrpt    5        17.000                counts
[info] AdtBenchmark.readJackson:·gc.time                                                      thrpt    5        16.000                    ms
[info] AdtBenchmark.readJsoniter                                                              thrpt    5   3938815.855 ±  144548.461   ops/s
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate                                               thrpt    5       260.301 ±       9.549  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                      thrpt    5       252.486 ±     559.519  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       101.150 ±     224.560    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.298 ±       2.434  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.119 ±       0.971    B/op
[info] AdtBenchmark.readJsoniter:·gc.count                                                    thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniter:·gc.time                                                     thrpt    5         6.000                    ms
[info] AdtBenchmark.readPlay                                                                  thrpt    5    180236.047 ±    2458.117   ops/s
[info] AdtBenchmark.readPlay:·gc.alloc.rate                                                   thrpt    5      1510.152 ±      21.265  MB/sec
[info] AdtBenchmark.readPlay:·gc.alloc.rate.norm                                              thrpt    5     13184.002 ±       0.001    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space                                          thrpt    5      1542.969 ±     705.712  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                     thrpt    5     13470.263 ±    6147.919    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.117 ±       0.156  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         1.017 ±       1.355    B/op
[info] AdtBenchmark.readPlay:·gc.count                                                        thrpt    5        23.000                counts
[info] AdtBenchmark.readPlay:·gc.time                                                         thrpt    5        25.000                    ms
[info] AdtBenchmark.writeJackson                                                              thrpt    5   2166620.429 ±   50427.637   ops/s
[info] AdtBenchmark.writeJackson:·gc.alloc.rate                                               thrpt    5       837.155 ±      19.546  MB/sec
[info] AdtBenchmark.writeJackson:·gc.alloc.rate.norm                                          thrpt    5       608.000 ±       0.001    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                      thrpt    5       858.195 ±     695.715  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       623.462 ±     508.795    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.071 ±       0.176  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.051 ±       0.127    B/op
[info] AdtBenchmark.writeJackson:·gc.count                                                    thrpt    5        13.000                counts
[info] AdtBenchmark.writeJackson:·gc.time                                                     thrpt    5        12.000                    ms
[info] AdtBenchmark.writeJsoniter                                                             thrpt    5  14159176.206 ±  577232.661   ops/s
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate                                              thrpt    5       719.763 ±      29.271  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm                                         thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5       735.053 ±     574.481  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5        81.665 ±      62.680    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.096 ±       0.201  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.011 ±       0.022    B/op
[info] AdtBenchmark.writeJsoniter:·gc.count                                                   thrpt    5        11.000                counts
[info] AdtBenchmark.writeJsoniter:·gc.time                                                    thrpt    5        10.000                    ms
[info] AdtBenchmark.writePlay                                                                 thrpt    5    304434.233 ±    1059.192   ops/s
[info] AdtBenchmark.writePlay:·gc.alloc.rate                                                  thrpt    5       996.668 ±       3.598  MB/sec
[info] AdtBenchmark.writePlay:·gc.alloc.rate.norm                                             thrpt    5      5152.001 ±       0.001    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space                                         thrpt    5       993.499 ±      29.058  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      5135.613 ±     146.470    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.075 ±       0.108  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.387 ±       0.555    B/op
[info] AdtBenchmark.writePlay:·gc.count                                                       thrpt    5        15.000                counts
[info] AdtBenchmark.writePlay:·gc.time                                                        thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1671843.214 ±   56080.036   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2634.546 ±      88.541  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2480.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2651.595 ±     578.796  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      2496.741 ±     591.467    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.137 ±       0.156  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.129 ±       0.145    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        39.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        38.000                    ms
[info] AnyRefsBenchmark.readJackson                                                           thrpt    5   2630036.439 ±   56634.418   ops/s
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1845.030 ±      39.628  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      1824.040 ±     723.805  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      1091.608 ±     440.447    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.117 ±       0.134  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.070 ±       0.080    B/op
[info] AnyRefsBenchmark.readJackson:·gc.count                                                 thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJackson:·gc.time                                                  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJsoniter                                                          thrpt    5  10347223.706 ±  531357.338   ops/s
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5      1315.107 ±      67.113  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5      1352.065 ±      16.145  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5       205.655 ±      12.744    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0.092 ±       0.091  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.014 ±       0.014    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.count                                                thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readPlay                                                              thrpt    5    666492.550 ±    9472.460   ops/s
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1761.755 ±      24.776  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5      1752.458 ±     601.252  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      4138.791 ±    1462.590    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.096 ±       0.185  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.226 ±       0.435    B/op
[info] AnyRefsBenchmark.readPlay:·gc.count                                                    thrpt    5        26.000                counts
[info] AnyRefsBenchmark.readPlay:·gc.time                                                     thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   1897148.259 ±   48806.627   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1909.735 ±      49.231  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1584.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      1897.864 ±     722.837  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1574.289 ±     604.465    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.108 ±       0.105  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.090 ±       0.087    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        28.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJackson                                                          thrpt    5   5906526.382 ±  136843.362   ops/s
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1621.596 ±      38.540  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5      1615.084 ±     576.579  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5       430.162 ±     148.617    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.096 ±       0.122  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.026 ±       0.033    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.count                                                thrpt    5        24.000                counts
[info] AnyRefsBenchmark.writeJackson:·gc.time                                                 thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.writeJsoniter                                                         thrpt    5  21659026.703 ± 1057608.037   ops/s
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       660.674 ±      32.099  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5       667.573 ±       5.515  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5        48.508 ±       2.743    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0.062 ±       0.080  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.005 ±       0.006    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniter:·gc.time                                                thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.writeJsoniterPrealloc                                                 thrpt    5  26733891.664 ± 2406005.555   ops/s
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count                                       thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlay                                                             thrpt    5   1142218.857 ±   27828.627   ops/s
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      1712.879 ±      41.614  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      2360.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5      1751.537 ±     539.918  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5      2413.481 ±     755.458    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.121 ±       0.132  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.166 ±       0.183    B/op
[info] AnyRefsBenchmark.writePlay:·gc.count                                                   thrpt    5        26.000                counts
[info] AnyRefsBenchmark.writePlay:·gc.time                                                    thrpt    5        27.000                    ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5    897946.033 ±   17145.113   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      2935.278 ±      55.376  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5144.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      2925.825 ±     723.657  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5128.715 ±    1355.255    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.125 ±       0.254  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.219 ±       0.448    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        43.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        38.000                    ms
[info] ArraysBenchmark.readJackson                                                            thrpt    5   1618370.981 ±  108825.189   ops/s
[info] ArraysBenchmark.readJackson:·gc.alloc.rate                                             thrpt    5      1522.157 ±     102.443  MB/sec
[info] ArraysBenchmark.readJackson:·gc.alloc.rate.norm                                        thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space                                    thrpt    5      1547.568 ±     707.837  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1505.116 ±     699.707    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.087 ±       0.132  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.085 ±       0.129    B/op
[info] ArraysBenchmark.readJackson:·gc.count                                                  thrpt    5        23.000                counts
[info] ArraysBenchmark.readJackson:·gc.time                                                   thrpt    5        26.000                    ms
[info] ArraysBenchmark.readJsoniter                                                           thrpt    5   9325155.398 ±   63988.297   ops/s
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate                                            thrpt    5      2796.880 ±      19.317  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm                                       thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                   thrpt    5      2789.821 ±     585.573  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                              thrpt    5       470.821 ±      99.949    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                               thrpt    5         0.100 ±       0.250  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.017 ±       0.042    B/op
[info] ArraysBenchmark.readJsoniter:·gc.count                                                 thrpt    5        41.000                counts
[info] ArraysBenchmark.readJsoniter:·gc.time                                                  thrpt    5        32.000                    ms
[info] ArraysBenchmark.readPlay                                                               thrpt    5    338160.988 ±    3899.530   ops/s
[info] ArraysBenchmark.readPlay:·gc.alloc.rate                                                thrpt    5      2061.106 ±      23.762  MB/sec
[info] ArraysBenchmark.readPlay:·gc.alloc.rate.norm                                           thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space                                       thrpt    5      2029.175 ±      38.900  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      9443.491 ±     227.873    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.133 ±       0.108  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.620 ±       0.500    B/op
[info] ArraysBenchmark.readPlay:·gc.count                                                     thrpt    5        30.000                counts
[info] ArraysBenchmark.readPlay:·gc.time                                                      thrpt    5        32.000                    ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1061776.487 ±   18134.172   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2445.226 ±      42.244  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3624.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2446.440 ±     596.320  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      3626.483 ±     936.246    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.142 ±       0.119  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.210 ±       0.174    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        36.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        32.000                    ms
[info] ArraysBenchmark.writeJackson                                                           thrpt    5   3338519.296 ±  114389.969   ops/s
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate                                            thrpt    5      1934.859 ±      66.468  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate.norm                                       thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      1960.835 ±     579.037  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5       923.807 ±     245.003    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.108 ±       0.191  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.051 ±       0.091    B/op
[info] ArraysBenchmark.writeJackson:·gc.count                                                 thrpt    5        29.000                counts
[info] ArraysBenchmark.writeJackson:·gc.time                                                  thrpt    5        25.000                    ms
[info] ArraysBenchmark.writeJsoniter                                                          thrpt    5  16775947.909 ±  979580.016   ops/s
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate                                           thrpt    5       767.544 ±      44.913  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm                                      thrpt    5        72.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5       803.178 ±     708.645  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5        75.222 ±      63.487    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0.096 ±       0.122  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.009 ±       0.011    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.count                                                thrpt    5        12.000                counts
[info] ArraysBenchmark.writeJsoniter:·gc.time                                                 thrpt    5        11.000                    ms
[info] ArraysBenchmark.writePlay                                                              thrpt    5    468082.762 ±    7622.488   ops/s
[info] ArraysBenchmark.writePlay:·gc.alloc.rate                                               thrpt    5      1651.415 ±      27.244  MB/sec
[info] ArraysBenchmark.writePlay:·gc.alloc.rate.norm                                          thrpt    5      5552.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space                                      thrpt    5      1615.188 ±     576.741  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5429.765 ±    1917.650    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.096 ±       0.185  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.322 ±       0.620    B/op
[info] ArraysBenchmark.writePlay:·gc.count                                                    thrpt    5        24.000                counts
[info] ArraysBenchmark.writePlay:·gc.time                                                     thrpt    5        25.000                    ms
[info] BigIntArrayBenchmark.readCirce                                                         thrpt    5       918.707 ±      19.296   ops/s
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1190.616 ±      25.046  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5   2039046.466 ±      20.700    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1208.704 ±     708.215  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5   2070164.585 ± 1216242.706    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.139 ±       0.247  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       238.417 ±     421.531    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.count                                               thrpt    5        18.000                counts
[info] BigIntArrayBenchmark.readCirce:·gc.time                                                thrpt    5        18.000                    ms
[info] BigIntArrayBenchmark.readJackson                                                       thrpt    5      3231.540 ±      79.397   ops/s
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate                                        thrpt    5      1071.594 ±      26.346  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                   thrpt    5    521832.134 ±       0.003    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                               thrpt    5      1066.578 ±     550.481  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    519351.451 ±  266039.400    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.054 ±       0.091  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        26.354 ±      44.516    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.count                                             thrpt    5        16.000                counts
[info] BigIntArrayBenchmark.readJackson:·gc.time                                              thrpt    5        17.000                    ms
[info] BigIntArrayBenchmark.readJsoniter                                                      thrpt    5      3096.087 ±      33.661   ops/s
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5       438.768 ±       4.589  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5    223008.142 ±       0.018    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       466.337 ±     702.715  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5    237072.393 ±  357879.923    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.025 ±       0.105  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        12.693 ±      53.124    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.count                                            thrpt    5         7.000                counts
[info] BigIntArrayBenchmark.readJsoniter:·gc.time                                             thrpt    5         6.000                    ms
[info] BigIntArrayBenchmark.writeJackson                                                      thrpt    5      1589.524 ±      19.168   ops/s
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate                                       thrpt    5      1337.774 ±      16.373  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                  thrpt    5   1324372.482 ±      39.312    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                              thrpt    5      1340.500 ±      35.718  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5   1327073.942 ±   34048.023    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.075 ±       0.091  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        74.161 ±      90.304    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.count                                            thrpt    5        20.000                counts
[info] BigIntArrayBenchmark.writeJackson:·gc.time                                             thrpt    5        19.000                    ms
[info] BigIntArrayBenchmark.writeJsoniter                                                     thrpt    5      1781.081 ±      30.276   ops/s
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5      1476.824 ±      24.995  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5   1304776.250 ±       0.039    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5      1487.403 ±     719.340  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5   1314561.028 ±  652530.146    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.152  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        77.252 ±     133.961    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.count                                           thrpt    5        22.000                counts
[info] BigIntArrayBenchmark.writeJsoniter:·gc.time                                            thrpt    5        20.000                    ms
[info] BigIntArrayBenchmark.writeJsoniterPrealloc                                             thrpt    5      1820.044 ±      36.659   ops/s
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                              thrpt    5      1375.752 ±      27.776  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5   1189440.237 ±       0.005    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                     thrpt    5      1417.563 ±     560.961  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                thrpt    5   1225803.299 ±  495571.265    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                 thrpt    5         0.092 ±       0.185  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm            thrpt    5        79.247 ±     160.892    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                   thrpt    5        21.000                counts
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time                                    thrpt    5        19.000                    ms
[info] BitSetsBenchmark.readJackson                                                           thrpt    5   2153308.747 ±   58568.043   ops/s
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1368.511 ±      36.932  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1000.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      1407.855 ±     565.330  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      1028.710 ±     409.565    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.100 ±       0.105  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.073 ±       0.077    B/op
[info] BitSetsBenchmark.readJackson:·gc.count                                                 thrpt    5        21.000                counts
[info] BitSetsBenchmark.readJackson:·gc.time                                                  thrpt    5        20.000                    ms
[info] BitSetsBenchmark.readJsoniter                                                          thrpt    5   5149246.167 ±  123958.311   ops/s
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5       680.613 ±      16.486  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5       668.339 ±       6.313  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5       204.253 ±       3.404    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0.079 ±       0.243  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.024 ±       0.074    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.count                                                thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniter:·gc.time                                                 thrpt    5         9.000                    ms
[info] BitSetsBenchmark.readPlay                                                              thrpt    5    366905.593 ±    9376.126   ops/s
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1665.673 ±      41.934  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      7144.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5      1683.100 ±      43.864  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      7219.018 ±     275.073    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.096 ±       0.166  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.410 ±       0.706    B/op
[info] BitSetsBenchmark.readPlay:·gc.count                                                    thrpt    5        25.000                counts
[info] BitSetsBenchmark.readPlay:·gc.time                                                     thrpt    5        25.000                    ms
[info] BitSetsBenchmark.writeJackson                                                          thrpt    5   2629227.064 ±   38944.057   ops/s
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1390.031 ±      20.741  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5      1341.602 ±      35.064  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5       803.031 ±      28.905    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.087 ±       0.067  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.052 ±       0.040    B/op
[info] BitSetsBenchmark.writeJackson:·gc.count                                                thrpt    5        20.000                counts
[info] BitSetsBenchmark.writeJackson:·gc.time                                                 thrpt    5        19.000                    ms
[info] BitSetsBenchmark.writeJsoniter                                                         thrpt    5   6513583.124 ±  111328.591   ops/s
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       993.454 ±      16.589  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5       940.089 ±     571.046  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5       227.147 ±     138.870    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0.075 ±       0.122  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.018 ±       0.030    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        14.000                counts
[info] BitSetsBenchmark.writeJsoniter:·gc.time                                                thrpt    5        11.000                    ms
[info] BitSetsBenchmark.writePlay                                                             thrpt    5    628516.185 ±    4202.871   ops/s
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      1859.598 ±      12.596  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      4656.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5      1823.022 ±     716.967  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5      4564.857 ±    1815.679    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.108 ±       0.243  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.271 ±       0.610    B/op
[info] BitSetsBenchmark.writePlay:·gc.count                                                   thrpt    5        27.000                counts
[info] BitSetsBenchmark.writePlay:·gc.time                                                    thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    830499.349 ±   18495.300   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2748.368 ±      61.285  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5208.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2720.528 ±      15.013  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      5155.405 ±     135.387    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.129 ±       0.132  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.245 ±       0.251    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        40.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        34.000                    ms
[info] ExtractFieldsBenchmark.readJackson                                                     thrpt    5    998675.401 ±   11624.942   ops/s
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5      1238.843 ±      14.173  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5      1269.023 ±     575.271  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1999.135 ±     891.497    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.096 ±       0.209  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.151 ±       0.328    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.count                                           thrpt    5        19.000                counts
[info] ExtractFieldsBenchmark.readJackson:·gc.time                                            thrpt    5        18.000                    ms
[info] ExtractFieldsBenchmark.readJsoniter                                                    thrpt    5   7950869.159 ±  645889.211   ops/s
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       363.768 ±      29.566  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5       402.396 ±     576.574  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5        79.553 ±     111.929    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5         0.311 ±       2.408  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.064 ±       0.496    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.count                                          thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniter:·gc.time                                           thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readPlay                                                        thrpt    5    320912.767 ±    3952.390   ops/s
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1771.831 ±      21.518  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5      8688.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5      1819.098 ±     702.348  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8921.356 ±    3520.394    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5         0.104 ±       0.150  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.511 ±       0.736    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.count                                              thrpt    5        27.000                counts
[info] ExtractFieldsBenchmark.readPlay:·gc.time                                               thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      8071.903 ±     173.140   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2077.543 ±      44.958  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    405018.334 ±      89.733    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2101.257 ±     579.364  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    409630.796 ±  111679.266    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.205 ±       0.415  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        40.020 ±      80.518    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        31.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        32.000                    ms
[info] GoogleMapsAPIBenchmark.readJackson                                                     thrpt    5     13700.778 ±     238.176   ops/s
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5       369.357 ±       6.424  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5     42424.034 ±       0.019    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5       389.603 ±     558.170  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     44735.158 ±   63826.618    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.520 ±       4.255  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        59.815 ±     489.506    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.count                                           thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJackson:·gc.time                                            thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniter                                                    thrpt    5     24271.530 ±     799.825   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       454.169 ±      14.961  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5     29448.018 ±       0.002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5       465.639 ±     701.883  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5     30152.119 ±   44934.685    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5         0.012 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.806 ±       4.625    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.count                                          thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.time                                           thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readPlay                                                        thrpt    5      2519.390 ±      26.791   ops/s
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1577.851 ±      16.898  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5    985528.174 ±       0.022    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5      1612.049 ±     575.577  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5   1006937.438 ±  361807.208    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5         0.012 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         7.792 ±      44.718    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.count                                              thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.readPlay:·gc.time                                               thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      8712.240 ±     132.910   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      2005.830 ±      30.444  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    362297.776 ±      93.603    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1965.740 ±     580.859  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    355080.684 ±  106167.235    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.145 ±       0.205  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        26.248 ±      36.790    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        29.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.writeJackson                                                    thrpt    5     43906.150 ±    1073.706   ops/s
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate                                     thrpt    5       636.324 ±      15.502  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                thrpt    5     22807.847 ±       0.474    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                            thrpt    5       654.164 ±      13.056  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     23448.479 ±     964.460    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.046 ±       0.105  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.646 ±       3.795    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.count                                          thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.time                                           thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniter                                                   thrpt    5     69151.733 ±    3283.444   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate                                    thrpt    5       520.984 ±      24.730  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                               thrpt    5     11856.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5       532.373 ±     702.828  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5     12103.814 ±   15844.717    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0.037 ±       0.200  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.849 ±       4.509    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.count                                         thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.time                                          thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc                                           thrpt    5     84437.002 ±     420.291   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                            thrpt    5         1.288 ±       0.006  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                       thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlay                                                       thrpt    5      6083.331 ±     167.198   ops/s
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate                                        thrpt    5      1818.121 ±      50.113  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm                                   thrpt    5    470335.699 ±       3.930    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space                               thrpt    5      1821.716 ±     723.473  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5    471175.959 ±  182170.849    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space                           thrpt    5         0.058 ±       0.183  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        15.082 ±      47.184    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.count                                             thrpt    5        27.000                counts
[info] GoogleMapsAPIBenchmark.writePlay:·gc.time                                              thrpt    5        31.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniter                                                   thrpt    5   5105996.113 ±   94762.343   ops/s
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate                                    thrpt    5      1531.665 ±      29.139  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                               thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5      1555.942 ±     707.216  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5       479.361 ±     213.044    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.067  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.027 ±       0.020    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.count                                         thrpt    5        23.000                counts
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.time                                          thrpt    5        20.000                    ms
[info] IntAndLongMapsBenchmark.readPlay                                                       thrpt    5    364305.665 ±   13772.173   ops/s
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate                                        thrpt    5      1964.847 ±      74.421  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm                                   thrpt    5      8488.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                               thrpt    5      1960.066 ±     569.668  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8469.180 ±    2551.312    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                           thrpt    5         0.100 ±       0.143  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.431 ±       0.613    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.count                                             thrpt    5        29.000                counts
[info] IntAndLongMapsBenchmark.readPlay:·gc.time                                              thrpt    5        31.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniter                                                  thrpt    5   3389490.410 ±  106218.804   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate                                   thrpt    5       551.400 ±      17.234  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                              thrpt    5       256.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       533.101 ±     702.432  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5       247.480 ±     325.731    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0.037 ±       0.132  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.017 ±       0.061    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.count                                        thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.time                                         thrpt    5         7.000                    ms
[info] IntAndLongMapsBenchmark.writePlay                                                      thrpt    5    356690.924 ±    5437.915   ops/s
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate                                       thrpt    5      1398.006 ±      21.194  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm                                  thrpt    5      6168.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                              thrpt    5      1405.654 ±     538.332  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5      6202.237 ±    2400.261    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.119  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.294 ±       0.528    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.count                                            thrpt    5        21.000                counts
[info] IntAndLongMapsBenchmark.writePlay:·gc.time                                             thrpt    5        23.000                    ms
[info] IntArrayBenchmark.readCirce                                                            thrpt    5     16325.962 ±     288.540   ops/s
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2144.831 ±      38.033  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    206743.834 ±       1.659    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2172.398 ±     722.221  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    209443.841 ±   71925.986    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.092 ±       0.072  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         8.829 ±       6.904    B/op
[info] IntArrayBenchmark.readCirce:·gc.count                                                  thrpt    5        32.000                counts
[info] IntArrayBenchmark.readCirce:·gc.time                                                   thrpt    5        30.000                    ms
[info] IntArrayBenchmark.readJackson                                                          thrpt    5     41495.771 ±    1954.952   ops/s
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate                                           thrpt    5       295.537 ±      13.929  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                      thrpt    5     11208.011 ±       0.002    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                  thrpt    5       312.965 ±     123.030  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5     11868.897 ±    4643.423    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.425 ±       3.526  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        16.439 ±     136.513    B/op
[info] IntArrayBenchmark.readJackson:·gc.count                                                thrpt    5         5.000                counts
[info] IntArrayBenchmark.readJackson:·gc.time                                                 thrpt    5         9.000                    ms
[info] IntArrayBenchmark.readJsoniter                                                         thrpt    5     80371.776 ±    6748.534   ops/s
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate                                          thrpt    5       625.978 ±      52.346  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                     thrpt    5     12256.005 ±       0.001    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5       667.574 ±       5.722  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5     13075.640 ±    1164.815    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0.062 ±       0.150  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.223 ±       2.902    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.count                                               thrpt    5        10.000                counts
[info] IntArrayBenchmark.readJsoniter:·gc.time                                                thrpt    5        10.000                    ms
[info] IntArrayBenchmark.readPlay                                                             thrpt    5      8615.593 ±     353.658   ops/s
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate                                              thrpt    5      2976.721 ±     121.751  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate.norm                                         thrpt    5    543660.842 ±      34.423    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                     thrpt    5      2924.806 ±     722.055  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5    534283.629 ±  137743.369    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.092 ±       0.244  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5        16.723 ±      44.414    B/op
[info] IntArrayBenchmark.readPlay:·gc.count                                                   thrpt    5        43.000                counts
[info] IntArrayBenchmark.readPlay:·gc.time                                                    thrpt    5        51.000                    ms
[info] IntArrayBenchmark.writeCirce                                                           thrpt    5     22825.152 ±    2296.689   ops/s
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1393.272 ±     139.803  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5     96026.319 ±      19.807    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1415.203 ±     556.941  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     97630.720 ±   41620.964    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.131 ±       0.281  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         9.087 ±      20.199    B/op
[info] IntArrayBenchmark.writeCirce:·gc.count                                                 thrpt    5        21.000                counts
[info] IntArrayBenchmark.writeCirce:·gc.time                                                  thrpt    5        27.000                    ms
[info] IntArrayBenchmark.writeJackson                                                         thrpt    5    101254.321 ±    6307.349   ops/s
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate                                          thrpt    5       797.375 ±      49.858  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                     thrpt    5     12392.247 ±       0.031    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                 thrpt    5       795.119 ±     709.808  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     12372.126 ±   11341.656    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.067 ±       0.200  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.042 ±       3.127    B/op
[info] IntArrayBenchmark.writeJackson:·gc.count                                               thrpt    5        12.000                counts
[info] IntArrayBenchmark.writeJackson:·gc.time                                                thrpt    5        11.000                    ms
[info] IntArrayBenchmark.writeJsoniter                                                        thrpt    5    116259.524 ±    5711.814   ops/s
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                         thrpt    5       482.864 ±      23.648  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                    thrpt    5      6536.004 ±       0.001    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5       533.224 ±     703.537  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5      7213.853 ±    9470.292    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5         0.033 ±       0.209  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.449 ±       2.804    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.count                                              thrpt    5         8.000                counts
[info] IntArrayBenchmark.writeJsoniter:·gc.time                                               thrpt    5         7.000                    ms
[info] IntArrayBenchmark.writeJsoniterPrealloc                                                thrpt    5    143378.458 ±    2696.483   ops/s
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5         0.003 ±       0.001    B/op
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                      thrpt    5           ≈ 0                counts
[info] IntArrayBenchmark.writePlay                                                            thrpt    5      3752.869 ±      14.414   ops/s
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate                                             thrpt    5      1606.086 ±       6.306  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate.norm                                        thrpt    5    673440.416 ±       1.309    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space                                    thrpt    5      1618.978 ±     589.241  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5    678817.099 ±  245787.755    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                thrpt    5         0.046 ±       0.222  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        19.216 ±      93.351    B/op
[info] IntArrayBenchmark.writePlay:·gc.count                                                  thrpt    5        24.000                counts
[info] IntArrayBenchmark.writePlay:·gc.time                                                   thrpt    5        25.000                    ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    725677.794 ±   16716.982   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2644.956 ±      60.932  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5736.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2583.810 ±     706.393  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      5602.154 ±    1442.206    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.137 ±       0.201  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.298 ±       0.438    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        38.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        34.000                    ms
[info] IterablesBenchmark.readJackson                                                         thrpt    5    639624.650 ±   17680.622   ops/s
[info] IterablesBenchmark.readJackson:·gc.alloc.rate                                          thrpt    5       744.614 ±      20.494  MB/sec
[info] IterablesBenchmark.readJackson:·gc.alloc.rate.norm                                     thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                 thrpt    5       786.787 ±     692.542  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1935.305 ±    1692.217    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.050 ±       0.122  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.123 ±       0.297    B/op
[info] IterablesBenchmark.readJackson:·gc.count                                               thrpt    5        12.000                counts
[info] IterablesBenchmark.readJackson:·gc.time                                                thrpt    5        12.000                    ms
[info] IterablesBenchmark.readJsoniter                                                        thrpt    5   4534621.195 ±   72520.346   ops/s
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate                                         thrpt    5      1798.173 ±      28.832  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                                    thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5      1762.895 ±     587.082  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5       611.725 ±     201.391    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5         0.112 ±       0.156  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.039 ±       0.054    B/op
[info] IterablesBenchmark.readJsoniter:·gc.count                                              thrpt    5        26.000                counts
[info] IterablesBenchmark.readJsoniter:·gc.time                                               thrpt    5        22.000                    ms
[info] IterablesBenchmark.readPlay                                                            thrpt    5    255681.139 ±    5797.372   ops/s
[info] IterablesBenchmark.readPlay:·gc.alloc.rate                                             thrpt    5      1775.495 ±      40.010  MB/sec
[info] IterablesBenchmark.readPlay:·gc.alloc.rate.norm                                        thrpt    5     10928.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                    thrpt    5      1752.382 ±     569.752  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5     10786.858 ±    3564.045    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                thrpt    5         0.096 ±       0.185  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.590 ±       1.140    B/op
[info] IterablesBenchmark.readPlay:·gc.count                                                  thrpt    5        26.000                counts
[info] IterablesBenchmark.readPlay:·gc.time                                                   thrpt    5        28.000                    ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    932107.746 ±   31654.182   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      2246.025 ±      76.397  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3792.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2241.254 ±     728.717  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      3783.131 ±    1176.587    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.125 ±       0.170  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.211 ±       0.289    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        33.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] IterablesBenchmark.writeJackson                                                        thrpt    5   1836282.715 ±  117146.706   ops/s
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate                                         thrpt    5      1241.862 ±      78.797  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate.norm                                    thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                thrpt    5      1268.326 ±     563.301  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1087.668 ±     514.060    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.121 ±       0.132  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.104 ±       0.115    B/op
[info] IterablesBenchmark.writeJackson:·gc.count                                              thrpt    5        19.000                counts
[info] IterablesBenchmark.writeJackson:·gc.time                                               thrpt    5        18.000                    ms
[info] IterablesBenchmark.writeJsoniter                                                       thrpt    5   7179697.484 ±  390736.236   ops/s
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate                                        thrpt    5       876.005 ±      47.424  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                   thrpt    5       192.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       871.264 ±     703.918  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5       191.253 ±     160.075    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.227  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.018 ±       0.050    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.count                                             thrpt    5        13.000                counts
[info] IterablesBenchmark.writeJsoniter:·gc.time                                              thrpt    5        12.000                    ms
[info] IterablesBenchmark.writePlay                                                           thrpt    5    557264.254 ±   10162.291   ops/s
[info] IterablesBenchmark.writePlay:·gc.alloc.rate                                            thrpt    5      1940.580 ±      35.047  MB/sec
[info] IterablesBenchmark.writePlay:·gc.alloc.rate.norm                                       thrpt    5      5480.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1960.089 ±     592.489  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5      5535.859 ±    1713.543    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0.108 ±       0.067  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.306 ±       0.186    B/op
[info] IterablesBenchmark.writePlay:·gc.count                                                 thrpt    5        29.000                counts
[info] IterablesBenchmark.writePlay:·gc.time                                                  thrpt    5        30.000                    ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    693033.165 ±    7475.148   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2462.565 ±      26.729  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5592.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2446.531 ±     566.396  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5555.246 ±    1254.373    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.087 ±       0.067  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.199 ±       0.153    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        36.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        30.000                    ms
[info] MapsBenchmark.readJsoniter                                                             thrpt    5   4383899.448 ±  136302.980   ops/s
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate                                              thrpt    5      1091.999 ±      33.675  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                         thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5      1143.895 ±     708.852  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5       410.504 ±     250.092    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.108 ±       0.132  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.039 ±       0.048    B/op
[info] MapsBenchmark.readJsoniter:·gc.count                                                   thrpt    5        17.000                counts
[info] MapsBenchmark.readJsoniter:·gc.time                                                    thrpt    5        14.000                    ms
[info] MapsBenchmark.readPlay                                                                 thrpt    5    374350.768 ±    8590.634   ops/s
[info] MapsBenchmark.readPlay:·gc.alloc.rate                                                  thrpt    5      1954.450 ±      44.724  MB/sec
[info] MapsBenchmark.readPlay:·gc.alloc.rate.norm                                             thrpt    5      8216.001 ±       0.001    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                         thrpt    5      1960.205 ±     569.801  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      8242.751 ±    2532.770    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.104 ±       0.127  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.438 ±       0.538    B/op
[info] MapsBenchmark.readPlay:·gc.count                                                       thrpt    5        29.000                counts
[info] MapsBenchmark.readPlay:·gc.time                                                        thrpt    5        31.000                    ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    545517.310 ±   16320.486   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1475.453 ±      44.057  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4256.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      1483.681 ±     702.361  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4277.432 ±    1925.178    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.096 ±       0.108  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.277 ±       0.319    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        22.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        21.000                    ms
[info] MapsBenchmark.writeJsoniter                                                            thrpt    5   3234805.188 ±   21588.089   ops/s
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate                                             thrpt    5       493.332 ±       3.313  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                        thrpt    5       240.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                    thrpt    5       533.085 ±     702.969  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                               thrpt    5       259.451 ±     343.352    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                thrpt    5         0.046 ±       0.183  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.022 ±       0.089    B/op
[info] MapsBenchmark.writeJsoniter:·gc.count                                                  thrpt    5         8.000                counts
[info] MapsBenchmark.writeJsoniter:·gc.time                                                   thrpt    5         7.000                    ms
[info] MapsBenchmark.writePlay                                                                thrpt    5    374234.823 ±    4582.579   ops/s
[info] MapsBenchmark.writePlay:·gc.alloc.rate                                                 thrpt    5      1362.184 ±      16.904  MB/sec
[info] MapsBenchmark.writePlay:·gc.alloc.rate.norm                                            thrpt    5      5728.001 ±       0.001    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                        thrpt    5      1338.233 ±      40.429  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5627.350 ±     194.635    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.104 ±       0.204  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.438 ±       0.863    B/op
[info] MapsBenchmark.writePlay:·gc.count                                                      thrpt    5        20.000                counts
[info] MapsBenchmark.writePlay:·gc.time                                                       thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   1961571.556 ±   43643.086   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3171.294 ±      71.182  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2544.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      3199.051 ±     722.083  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      2566.226 ±     572.933    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.096 ±       0.122  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.077 ±       0.098    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        47.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        40.000                    ms
[info] MissingReqFieldBenchmark.readJackson                                                   thrpt    5    307558.699 ±   10584.560   ops/s
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate                                    thrpt    5       719.198 ±      24.764  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm                               thrpt    5      3680.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space                           thrpt    5       723.003 ±     553.904  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3697.976 ±    2782.921    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.079 ±       0.243  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.403 ±       1.231    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.count                                         thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJackson:·gc.time                                          thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJsoniter                                                  thrpt    5    694624.700 ±   79198.295   ops/s
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate                                   thrpt    5       628.569 ±      71.688  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm                              thrpt    5      1424.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       670.599 ±       2.385  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1520.359 ±     185.221    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.122  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.170 ±       0.277    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.count                                        thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readJsoniter:·gc.time                                         thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   3721132.024 ±  115404.327   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      2269.946 ±      70.147  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       960.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5      2243.989 ±     715.057  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5       949.083 ±     304.548    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5         0.083 ±       0.160  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.035 ±       0.068    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        33.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        26.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   4818461.857 ±  471234.692   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       563.406 ±      54.864  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       184.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5       603.318 ±     577.180  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5       196.123 ±     175.496    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5         0.058 ±       0.154  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5         0.019 ±       0.050    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readPlay                                                      thrpt    5    188576.696 ±    6233.227   ops/s
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate                                       thrpt    5      1573.108 ±      51.932  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm                                  thrpt    5     13128.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space                              thrpt    5      1543.976 ±     722.891  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5     12883.939 ±    5982.942    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0.071 ±       0.193  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.589 ±       1.602    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.count                                            thrpt    5        23.000                counts
[info] MissingReqFieldBenchmark.readPlay:·gc.time                                             thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    762332.280 ±    6749.758   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2937.524 ±      26.215  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6064.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      2925.642 ±     715.326  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6039.831 ±    1502.252    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.133 ±       0.146  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.275 ±       0.302    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        43.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        37.000                    ms
[info] MutableIterablesBenchmark.readJsoniter                                                 thrpt    5   2675349.641 ±   34593.328   ops/s
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate                                  thrpt    5      1727.287 ±      22.759  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                             thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                         thrpt    5      1762.392 ±     577.432  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1036.794 ±     348.329    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                     thrpt    5         0.092 ±       0.185  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.054 ±       0.109    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.count                                       thrpt    5        26.000                counts
[info] MutableIterablesBenchmark.readJsoniter:·gc.time                                        thrpt    5        22.000                    ms
[info] MutableIterablesBenchmark.readPlay                                                     thrpt    5    289668.073 ±    6293.749   ops/s
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate                                      thrpt    5      2053.077 ±      43.264  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm                                 thrpt    5     11152.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                             thrpt    5      2095.825 ±     587.931  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                        thrpt    5     11386.648 ±    3356.366    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                         thrpt    5         0.117 ±       0.156  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.634 ±       0.855    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.count                                           thrpt    5        31.000                counts
[info] MutableIterablesBenchmark.readPlay:·gc.time                                            thrpt    5        35.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    894933.122 ±   32037.429   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      2065.466 ±      74.011  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3632.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      2103.176 ±     593.336  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3699.417 ±    1110.244    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.100 ±       0.174  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.175 ±       0.301    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        31.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        28.000                    ms
[info] MutableIterablesBenchmark.writeJackson                                                 thrpt    5   1761274.656 ±   21772.590   ops/s
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate                                  thrpt    5      1011.870 ±      12.488  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm                             thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                         thrpt    5       993.493 ±      29.369  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                    thrpt    5       887.589 ±      28.106    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.134  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.067 ±       0.120    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.count                                       thrpt    5        15.000                counts
[info] MutableIterablesBenchmark.writeJackson:·gc.time                                        thrpt    5        15.000                    ms
[info] MutableIterablesBenchmark.writeJsoniter                                                thrpt    5   4430861.753 ±  224709.419   ops/s
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate                                 thrpt    5       337.855 ±      17.134  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                            thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                        thrpt    5       332.683 ±       1.411  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                   thrpt    5       118.181 ±       6.525    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                    thrpt    5         0.329 ±       2.660  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.119 ±       0.963    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.count                                      thrpt    5         5.000                counts
[info] MutableIterablesBenchmark.writeJsoniter:·gc.time                                       thrpt    5         6.000                    ms
[info] MutableIterablesBenchmark.writePlay                                                    thrpt    5    487603.796 ±   17382.726   ops/s
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate                                     thrpt    5      1687.992 ±      60.204  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm                                thrpt    5      5448.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                            thrpt    5      1684.691 ±      41.471  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                       thrpt    5      5437.851 ±     285.775    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                        thrpt    5         0.096 ±       0.176  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.309 ±       0.565    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.count                                          thrpt    5        25.000                counts
[info] MutableIterablesBenchmark.writePlay:·gc.time                                           thrpt    5        29.000                    ms
[info] MutableMapsBenchmark.readJsoniter                                                      thrpt    5   3909075.313 ±   54761.438   ops/s
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5      1848.284 ±      26.116  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5      1831.617 ±     717.962  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5       737.294 ±     288.919    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.067  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.032 ±       0.027    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.count                                            thrpt    5        27.000                counts
[info] MutableMapsBenchmark.readJsoniter:·gc.time                                             thrpt    5        22.000                    ms
[info] MutableMapsBenchmark.readPlay                                                          thrpt    5    303174.320 ±    5922.167   ops/s
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate                                           thrpt    5      1636.747 ±      32.232  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm                                      thrpt    5      8496.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                  thrpt    5      1615.206 ±     567.200  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5      8385.531 ±    3002.965    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                              thrpt    5         0.087 ±       0.132  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.455 ±       0.696    B/op
[info] MutableMapsBenchmark.readPlay:·gc.count                                                thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readPlay:·gc.time                                                 thrpt    5        26.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    518131.287 ±    4729.882   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1401.379 ±      12.304  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4256.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1414.822 ±     584.129  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5      4296.585 ±    1761.109    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.108 ±       0.105  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.329 ±       0.318    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        21.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        18.000                    ms
[info] MutableMapsBenchmark.writeJsoniter                                                     thrpt    5   2955052.678 ±  138039.295   ops/s
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5       555.805 ±      25.984  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5       599.952 ±     574.468  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5       319.930 ±     311.240    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.230  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.042 ±       0.124    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.count                                           thrpt    5         9.000                counts
[info] MutableMapsBenchmark.writeJsoniter:·gc.time                                            thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlay                                                         thrpt    5    362448.280 ±    7204.352   ops/s
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate                                          thrpt    5      1402.108 ±      27.759  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm                                     thrpt    5      6088.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                 thrpt    5      1339.651 ±      38.029  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5816.908 ±     185.801    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                             thrpt    5         0.117 ±       0.185  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.507 ±       0.805    B/op
[info] MutableMapsBenchmark.writePlay:·gc.count                                               thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlay:·gc.time                                                thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    681303.042 ±    8812.028   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2175.093 ±      28.582  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      5024.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2170.796 ±     702.754  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      5014.217 ±    1630.077    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.129 ±       0.067  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.298 ±       0.153    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.readJackson                                                        thrpt    5   1466556.167 ±   55954.987   ops/s
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5      1110.950 ±      42.313  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5      1065.125 ±     559.519  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1142.656 ±     590.319    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.096 ±       0.193  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.103 ±       0.206    B/op
[info] PrimitivesBenchmark.readJackson:·gc.count                                              thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readJackson:·gc.time                                               thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.readJsoniter                                                       thrpt    5   5207776.860 ±   70738.931   ops/s
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       158.834 ±       2.152  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       153.481 ±     539.506  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5        46.301 ±     162.754    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.001 ±       0.011    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.count                                             thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniter:·gc.time                                              thrpt    5         5.000                    ms
[info] PrimitivesBenchmark.readPlay                                                           thrpt    5    235304.235 ±    5253.623   ops/s
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1638.899 ±      35.801  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5     10960.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1613.962 ±     558.455  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5     10792.918 ±    3717.027    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0.092 ±       0.122  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.612 ±       0.806    B/op
[info] PrimitivesBenchmark.readPlay:·gc.count                                                 thrpt    5        24.000                counts
[info] PrimitivesBenchmark.readPlay:·gc.time                                                  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    969356.445 ±    6187.626   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1690.270 ±      10.421  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2744.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1690.437 ±      28.072  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      2744.269 ±      40.254    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.087 ±       0.143  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.142 ±       0.233    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.writeJackson                                                       thrpt    5   2537202.866 ±   93638.013   ops/s
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5      1122.095 ±      41.490  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5      1132.668 ±     704.330  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5       702.500 ±     433.791    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.092 ±       0.091  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.057 ±       0.056    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.count                                             thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writeJackson:·gc.time                                              thrpt    5        15.000                    ms
[info] PrimitivesBenchmark.writeJsoniter                                                      thrpt    5   6522701.814 ±  428573.249   ops/s
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       530.540 ±      34.815  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       533.642 ±     704.325  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5       128.601 ±     167.872    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.033 ±       0.201  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.008 ±       0.049    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniter:·gc.time                                             thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writeJsoniterPrealloc                                              thrpt    5   7004096.533 ±   65497.547   ops/s
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       213.653 ±       1.960  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5       169.025 ±     606.541  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5        38.008 ±     136.460    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5         0.319 ±       2.681  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.072 ±       0.604    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         3.000                counts
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.writePlay                                                          thrpt    5    318411.801 ±    8579.739   ops/s
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate                                           thrpt    5      1638.074 ±      44.213  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm                                      thrpt    5      8096.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                  thrpt    5      1613.946 ±     576.096  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5      7973.831 ±    2704.149    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                              thrpt    5         0.087 ±       0.132  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.433 ±       0.662    B/op
[info] PrimitivesBenchmark.writePlay:·gc.count                                                thrpt    5        24.000                counts
[info] PrimitivesBenchmark.writePlay:·gc.time                                                 thrpt    5        25.000                    ms
[info] StringBenchmark.readAsciiCirce                                                         thrpt    5    472351.466 ±    8637.273   ops/s
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate                                          thrpt    5      1841.817 ±      33.134  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm                                     thrpt    5      6136.001 ±       0.001    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1829.799 ±     718.157  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      6094.176 ±    2300.584    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.117 ±       0.263  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.388 ±       0.873    B/op
[info] StringBenchmark.readAsciiCirce:·gc.count                                               thrpt    5        27.000                counts
[info] StringBenchmark.readAsciiCirce:·gc.time                                                thrpt    5        23.000                    ms
[info] StringBenchmark.readAsciiJackson                                                       thrpt    5   1006139.770 ±   54165.364   ops/s
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate                                        thrpt    5      2107.328 ±     113.801  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm                                   thrpt    5      3296.000 ±       0.001    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space                               thrpt    5      2101.324 ±     589.281  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      3286.818 ±     914.724    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.121 ±       0.200  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.189 ±       0.309    B/op
[info] StringBenchmark.readAsciiJackson:·gc.count                                             thrpt    5        31.000                counts
[info] StringBenchmark.readAsciiJackson:·gc.time                                              thrpt    5        28.000                    ms
[info] StringBenchmark.readAsciiJsoniter                                                      thrpt    5   1172824.397 ±   35769.944   ops/s
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate                                       thrpt    5      1973.551 ±      60.291  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm                                  thrpt    5      2648.000 ±       0.001    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5      1902.061 ±     711.254  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5      2551.976 ±     945.998    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.104 ±       0.204  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.140 ±       0.273    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.count                                            thrpt    5        28.000                counts
[info] StringBenchmark.readAsciiJsoniter:·gc.time                                             thrpt    5        22.000                    ms
[info] StringBenchmark.readNonAsciiCirce                                                      thrpt    5   1596191.336 ±   20996.484   ops/s
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate                                       thrpt    5      1955.642 ±      26.026  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm                                  thrpt    5      1928.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1899.359 ±     720.402  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1872.367 ±     703.030    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.100 ±       0.105  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.098 ±       0.102    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.count                                            thrpt    5        28.000                counts
[info] StringBenchmark.readNonAsciiCirce:·gc.time                                             thrpt    5        25.000                    ms
[info] StringBenchmark.readNonAsciiJackson                                                    thrpt    5   1217831.278 ±   40928.013   ops/s
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate                                     thrpt    5       755.311 ±      25.406  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm                                thrpt    5       976.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space                            thrpt    5       793.000 ±     692.123  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1023.397 ±     863.125    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.054 ±       0.146  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.070 ±       0.190    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.count                                          thrpt    5        12.000                counts
[info] StringBenchmark.readNonAsciiJackson:·gc.time                                           thrpt    5        11.000                    ms
[info] StringBenchmark.readNonAsciiJsoniter                                                   thrpt    5   2151143.518 ±  224515.950   ops/s
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate                                    thrpt    5       349.959 ±      36.352  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm                               thrpt    5       256.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5       335.397 ±       1.317  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5       245.492 ±      25.790    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0.300 ±       2.406  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.216 ±       1.729    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.count                                         thrpt    5         5.000                counts
[info] StringBenchmark.readNonAsciiJsoniter:·gc.time                                          thrpt    5         6.000                    ms
[info] StringBenchmark.writeAsciiCirce                                                        thrpt    5    275093.356 ±    5898.742   ops/s
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate                                         thrpt    5      1404.182 ±      29.947  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm                                    thrpt    5      8032.002 ±       0.001    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1416.491 ±     599.227  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8104.173 ±    3510.603    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.087 ±       0.105  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.500 ±       0.594    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.count                                              thrpt    5        21.000                counts
[info] StringBenchmark.writeAsciiCirce:·gc.time                                               thrpt    5        19.000                    ms
[info] StringBenchmark.writeAsciiJackson                                                      thrpt    5    800968.495 ±   25561.927   ops/s
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate                                       thrpt    5       810.296 ±      25.981  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm                                  thrpt    5      1592.001 ±       0.001    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space                              thrpt    5       794.375 ±     688.499  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1559.545 ±    1323.911    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.058 ±       0.154  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.115 ±       0.302    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.count                                            thrpt    5        12.000                counts
[info] StringBenchmark.writeAsciiJackson:·gc.time                                             thrpt    5        11.000                    ms
[info] StringBenchmark.writeAsciiJsoniter                                                     thrpt    5   1029735.114 ±   30398.437   ops/s
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate                                      thrpt    5       868.938 ±      25.627  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm                                 thrpt    5      1328.000 ±       0.001    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5       870.761 ±     700.504  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1329.275 ±    1037.232    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.154  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.134 ±       0.236    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.count                                           thrpt    5        13.000                counts
[info] StringBenchmark.writeAsciiJsoniter:·gc.time                                            thrpt    5        12.000                    ms
[info] StringBenchmark.writeAsciiJsoniterPrealloc                                             thrpt    5   1063476.217 ±   32912.117   ops/s
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate                              thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5        ≈ 10⁻³                  B/op
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count                                   thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeAsciiPlay                                                         thrpt    5    913440.513 ±   47255.160   ops/s
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate                                          thrpt    5       975.115 ±      50.674  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm                                     thrpt    5      1680.000 ±       0.001    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space                                 thrpt    5      1003.258 ±      19.040  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1728.786 ±     110.510    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space                             thrpt    5         0.079 ±       0.154  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.136 ±       0.267    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.count                                               thrpt    5        15.000                counts
[info] StringBenchmark.writeAsciiPlay:·gc.time                                                thrpt    5        13.000                    ms
[info] StringBenchmark.writeNonAsciiCirce                                                     thrpt    5   1491650.671 ±   20926.210   ops/s
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate                                      thrpt    5       970.590 ±      13.632  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm                                 thrpt    5      1024.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space                             thrpt    5       936.784 ±     581.241  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5       987.915 ±     603.224    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.143  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.084 ±       0.152    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.count                                           thrpt    5        14.000                counts
[info] StringBenchmark.writeNonAsciiCirce:·gc.time                                            thrpt    5        13.000                    ms
[info] StringBenchmark.writeNonAsciiJackson                                                   thrpt    5   3056621.025 ±   65847.395   ops/s
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate                                    thrpt    5      1258.712 ±      26.907  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm                               thrpt    5       648.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space                           thrpt    5      1272.897 ±     575.423  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5       655.450 ±     301.160    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.092 ±       0.209  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.047 ±       0.107    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.count                                         thrpt    5        19.000                counts
[info] StringBenchmark.writeNonAsciiJackson:·gc.time                                          thrpt    5        18.000                    ms
[info] StringBenchmark.writeNonAsciiJsoniter                                                  thrpt    5   3121689.712 ±  155859.374   ops/s
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate                                   thrpt    5       618.998 ±      30.952  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm                              thrpt    5       312.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       600.928 ±     574.953  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5       303.279 ±     294.658    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0.062 ±       0.220  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.032 ±       0.113    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.count                                        thrpt    5         9.000                counts
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.time                                         thrpt    5         7.000                    ms
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc                                          thrpt    5   3351822.655 ±    7488.959   ops/s
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeNonAsciiPlay                                                      thrpt    5   2975170.735 ±  104818.019   ops/s
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate                                       thrpt    5      1255.438 ±      43.817  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm                                  thrpt    5       664.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space                              thrpt    5      1278.023 ±     579.261  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5       676.241 ±     315.983    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0.108 ±       0.164  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.057 ±       0.087    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.count                                            thrpt    5        19.000                counts
[info] StringBenchmark.writeNonAsciiPlay:·gc.time                                             thrpt    5        18.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     12829.182 ±     488.318   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1810.002 ±      68.952  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    222000.318 ±      40.749    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1825.555 ±     731.168  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    223835.773 ±   85667.257    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.121 ±       0.183  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        14.804 ±      22.295    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        27.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        26.000                    ms
[info] TwitterAPIBenchmark.readJackson                                                        thrpt    5     16587.115 ±     782.628   ops/s
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       262.224 ±      11.830  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     24879.004 ±      62.250    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5       296.424 ±     142.846  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     28104.485 ±   12771.162    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.570 ±       4.845  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        54.596 ±     463.711    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.count                                              thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.readJackson:·gc.time                                               thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.readJsoniter                                                       thrpt    5     40014.307 ±    1659.625   ops/s
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       444.696 ±      18.337  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5     17488.011 ±       0.002    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       465.746 ±     702.196  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5     18307.307 ±   27487.566    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0.346 ±       2.803  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        13.716 ±     111.199    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.count                                             thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniter:·gc.time                                              thrpt    5         8.000                    ms
[info] TwitterAPIBenchmark.readPlay                                                           thrpt    5      3771.783 ±      69.661   ops/s
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1215.625 ±      22.466  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    507112.118 ±       0.020    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1204.826 ±     687.791  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5    502543.860 ±  284795.270    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0.017 ±       0.105  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         6.957 ±      43.671    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.count                                                 thrpt    5        18.000                counts
[info] TwitterAPIBenchmark.readPlay:·gc.time                                                  thrpt    5        26.000                    ms
[info] TwitterAPIBenchmark.writeJackson                                                       thrpt    5     60179.041 ±    2441.516   ops/s
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       768.621 ±      31.157  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     20099.999 ±       0.155    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5       720.724 ±     566.093  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     18879.304 ±   15715.440    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.062 ±       0.160  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.640 ±       4.246    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.count                                             thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJackson:·gc.time                                              thrpt    5        11.000                    ms
[info] TwitterAPIBenchmark.writeJsoniter                                                      thrpt    5     82628.946 ±    3861.163   ops/s
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       541.884 ±      25.275  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       532.423 ±     701.872  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5     10139.113 ±   13349.845    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.037 ±       0.174  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.716 ±       3.325    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniter:·gc.time                                             thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterPrealloc                                              thrpt    5     92226.496 ±     131.212   ops/s
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5        13.127 ±       0.019  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5       224.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[success] Total time: 2006 s, completed Jan 5, 2018 4:41:35 PM
