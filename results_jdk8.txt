[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jan 10, 2018 7:03:09 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:336:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:344:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] two warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.3.4-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.3.4-SNAPSHOT.jar ...
[info] Compiling 25 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:9:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:10:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:11:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.4-SNAPSHOT.jar ...
Processing 286 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 19 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 206 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.4-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.4-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*Benchmark.*
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 420392.102 ops/s
[info] # Warmup Iteration   2: 784936.554 ops/s
[info] # Warmup Iteration   3: 791016.154 ops/s
[info] # Warmup Iteration   4: 786508.440 ops/s
[info] # Warmup Iteration   5: 789354.905 ops/s
[info] Iteration   1: 787756.196 ops/s
[info]                  ·gc.alloc.rate:                   2074.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4043.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 780012.341 ops/s
[info]                  ·gc.alloc.rate:                   2054.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4780.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 786835.036 ops/s
[info]                  ·gc.alloc.rate:                   2071.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4073.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 784063.646 ops/s
[info]                  ·gc.alloc.rate:                   2065.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4091.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 789982.480 ops/s
[info]                  ·gc.alloc.rate:                   2080.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4067.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   785729.940 ±(99.9%) 14773.446 ops/s [Average]
[info]   (min, avg, max) = (780012.341, 785729.940, 789982.480), stdev = 3836.617
[info]   CI (99.9%): [770956.493, 800503.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2069.339 ±(99.9%) 38.494 MB/sec [Average]
[info]   (min, avg, max) = (2054.539, 2069.339, 2080.738), stdev = 9.997
[info]   CI (99.9%): [2030.845, 2107.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2102.416 ±(99.9%) 577.083 MB/sec [Average]
[info]   (min, avg, max) = (2023.950, 2102.416, 2370.216), stdev = 149.867
[info]   CI (99.9%): [1525.333, 2679.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4211.281 ±(99.9%) 1227.559 B/op [Average]
[info]   (min, avg, max) = (4043.273, 4211.281, 4780.721), stdev = 318.793
[info]   CI (99.9%): [2983.722, 5438.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.200 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (0.166, 0.200, 0.252), stdev = 0.046
[info]   CI (99.9%): [0.023, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson
[info] # Run progress: 0.75% complete, ETA 00:34:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 550747.809 ops/s
[info] # Warmup Iteration   2: 1618347.555 ops/s
[info] # Warmup Iteration   3: 1656430.139 ops/s
[info] # Warmup Iteration   4: 1660130.329 ops/s
[info] # Warmup Iteration   5: 1646995.617 ops/s
[info] Iteration   1: 1657608.949 ops/s
[info]                  ·gc.alloc.rate:                   1179.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     938.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1638087.815 ops/s
[info]                  ·gc.alloc.rate:                   1165.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1274.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1667659.467 ops/s
[info]                  ·gc.alloc.rate:                   1186.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     944.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1669597.267 ops/s
[info]                  ·gc.alloc.rate:                   1188.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1263.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1646193.128 ops/s
[info]                  ·gc.alloc.rate:                   1171.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson":
[info]   1655829.325 ±(99.9%) 52384.789 ops/s [Average]
[info]   (min, avg, max) = (1638087.815, 1655829.325, 1669597.267), stdev = 13604.163
[info]   CI (99.9%): [1603444.537, 1708214.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate":
[info]   1178.399 ±(99.9%) 37.254 MB/sec [Average]
[info]   (min, avg, max) = (1165.765, 1178.399, 1188.196), stdev = 9.675
[info]   CI (99.9%): [1141.146, 1215.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1133.090 ±(99.9%) 705.260 MB/sec [Average]
[info]   (min, avg, max) = (988.943, 1133.090, 1340.017), stdev = 183.154
[info]   CI (99.9%): [427.830, 1838.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1077.139 ±(99.9%) 675.619 B/op [Average]
[info]   (min, avg, max) = (938.926, 1077.139, 1274.918), stdev = 175.456
[info]   CI (99.9%): [401.520, 1752.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.079, 0.120), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter
[info] # Run progress: 1.49% complete, ETA 00:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3448408.155 ops/s
[info] # Warmup Iteration   2: 3875247.615 ops/s
[info] # Warmup Iteration   3: 3866423.345 ops/s
[info] # Warmup Iteration   4: 3918145.940 ops/s
[info] # Warmup Iteration   5: 3845248.161 ops/s
[info] Iteration   1: 3905845.482 ops/s
[info]                  ·gc.alloc.rate:                   258.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3937601.435 ops/s
[info]                  ·gc.alloc.rate:      260.208 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3842431.498 ops/s
[info]                  ·gc.alloc.rate:                   253.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3764427.919 ops/s
[info]                  ·gc.alloc.rate:                   248.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 3820258.053 ops/s
[info]                  ·gc.alloc.rate:                   252.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter":
[info]   3854112.877 ±(99.9%) 265195.871 ops/s [Average]
[info]   (min, avg, max) = (3764427.919, 3854112.877, 3937601.435), stdev = 68870.525
[info]   CI (99.9%): [3588917.006, 4119308.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate":
[info]   254.700 ±(99.9%) 17.499 MB/sec [Average]
[info]   (min, avg, max) = (248.785, 254.700, 260.208), stdev = 4.545
[info]   CI (99.9%): [237.201, 272.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   252.499 ±(99.9%) 559.556 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 252.499, 335.805), stdev = 145.315
[info]   CI (99.9%): [≈ 0, 812.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   103.803 ±(99.9%) 231.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 103.803, 140.377), stdev = 60.047
[info]   CI (99.9%): [≈ 0, 335.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.291 ±(99.9%) 2.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.386), stdev = 0.613
[info]   CI (99.9%): [≈ 0, 2.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.568), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay
[info] # Run progress: 2.24% complete, ETA 00:33:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36345.261 ops/s
[info] # Warmup Iteration   2: 174674.559 ops/s
[info] # Warmup Iteration   3: 176799.456 ops/s
[info] # Warmup Iteration   4: 179221.855 ops/s
[info] # Warmup Iteration   5: 181167.693 ops/s
[info] Iteration   1: 180211.460 ops/s
[info]                  ·gc.alloc.rate:                   1517.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14485.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.545 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 179918.946 ops/s
[info]                  ·gc.alloc.rate:                   1514.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11685.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.728 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 180226.626 ops/s
[info]                  ·gc.alloc.rate:                   1517.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14661.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.545 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 179681.201 ops/s
[info]                  ·gc.alloc.rate:                   1512.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11815.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 179706.265 ops/s
[info]                  ·gc.alloc.rate:                   1512.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14806.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay":
[info]   179948.900 ±(99.9%) 1014.228 ops/s [Average]
[info]   (min, avg, max) = (179681.201, 179948.900, 180226.626), stdev = 263.392
[info]   CI (99.9%): [178934.671, 180963.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate":
[info]   1514.919 ±(99.9%) 9.215 MB/sec [Average]
[info]   (min, avg, max) = (1512.506, 1514.919, 1517.586), stdev = 2.393
[info]   CI (99.9%): [1505.705, 1524.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13248.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13248.002, 13248.002, 13248.003), stdev = 0.001
[info]   CI (99.9%): [13248.002, 13248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1542.834 ±(99.9%) 705.764 MB/sec [Average]
[info]   (min, avg, max) = (1336.024, 1542.834, 1690.697), stdev = 183.285
[info]   CI (99.9%): [837.070, 2248.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   13491.191 ±(99.9%) 6136.130 B/op [Average]
[info]   (min, avg, max) = (11685.936, 13491.191, 14806.638), stdev = 1593.533
[info]   CI (99.9%): [7355.061, 19627.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.510 ±(99.9%) 0.768 B/op [Average]
[info]   (min, avg, max) = (0.182, 0.510, 0.728), stdev = 0.199
[info]   CI (99.9%): [≈ 0, 1.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson
[info] # Run progress: 2.99% complete, ETA 00:33:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 767403.553 ops/s
[info] # Warmup Iteration   2: 2061041.248 ops/s
[info] # Warmup Iteration   3: 2030012.500 ops/s
[info] # Warmup Iteration   4: 2097954.314 ops/s
[info] # Warmup Iteration   5: 2087362.949 ops/s
[info] Iteration   1: 2094501.560 ops/s
[info]                  ·gc.alloc.rate:                   809.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     491.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2105632.401 ops/s
[info]                  ·gc.alloc.rate:                   813.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2077075.853 ops/s
[info]                  ·gc.alloc.rate:                   802.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     499.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2049110.951 ops/s
[info]                  ·gc.alloc.rate:                   791.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2109843.915 ops/s
[info]                  ·gc.alloc.rate:                   815.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson":
[info]   2087232.936 ±(99.9%) 95475.038 ops/s [Average]
[info]   (min, avg, max) = (2049110.951, 2087232.936, 2109843.915), stdev = 24794.564
[info]   CI (99.9%): [1991757.899, 2182707.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate":
[info]   806.419 ±(99.9%) 37.111 MB/sec [Average]
[info]   (min, avg, max) = (791.623, 806.419, 815.300), stdev = 9.638
[info]   CI (99.9%): [769.308, 843.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   791.332 ±(99.9%) 695.448 MB/sec [Average]
[info]   (min, avg, max) = (654.238, 791.332, 992.917), stdev = 180.606
[info]   CI (99.9%): [95.885, 1486.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   597.189 ±(99.9%) 536.705 B/op [Average]
[info]   (min, avg, max) = (491.552, 597.189, 762.602), stdev = 139.381
[info]   CI (99.9%): [60.484, 1133.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.050, 0.078), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter
[info] # Run progress: 3.73% complete, ETA 00:33:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11063020.778 ops/s
[info] # Warmup Iteration   2: 15817280.364 ops/s
[info] # Warmup Iteration   3: 16620001.801 ops/s
[info] # Warmup Iteration   4: 16496457.921 ops/s
[info] # Warmup Iteration   5: 16414263.612 ops/s
[info] Iteration   1: 16407033.793 ops/s
[info]                  ·gc.alloc.rate:                   834.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16427900.682 ops/s
[info]                  ·gc.alloc.rate:                   835.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16730961.944 ops/s
[info]                  ·gc.alloc.rate:                   850.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16883298.607 ops/s
[info]                  ·gc.alloc.rate:                   858.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16872778.303 ops/s
[info]                  ·gc.alloc.rate:                   857.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter":
[info]   16664394.666 ±(99.9%) 898813.833 ops/s [Average]
[info]   (min, avg, max) = (16407033.793, 16664394.666, 16883298.607), stdev = 233419.098
[info]   CI (99.9%): [15765580.833, 17563208.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   847.177 ±(99.9%) 45.384 MB/sec [Average]
[info]   (min, avg, max) = (834.084, 847.177, 858.262), stdev = 11.786
[info]   CI (99.9%): [801.793, 892.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   803.466 ±(99.9%) 706.410 MB/sec [Average]
[info]   (min, avg, max) = (666.869, 803.466, 1006.581), stdev = 183.452
[info]   CI (99.9%): [97.056, 1509.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   75.887 ±(99.9%) 66.934 B/op [Average]
[info]   (min, avg, max) = (62.694, 75.887, 95.983), stdev = 17.383
[info]   CI (99.9%): [8.953, 142.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.008, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay
[info] # Run progress: 4.48% complete, ETA 00:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72274.727 ops/s
[info] # Warmup Iteration   2: 318134.701 ops/s
[info] # Warmup Iteration   3: 323443.266 ops/s
[info] # Warmup Iteration   4: 325967.014 ops/s
[info] # Warmup Iteration   5: 326567.859 ops/s
[info] Iteration   1: 326884.297 ops/s
[info]                  ·gc.alloc.rate:                   1011.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4735.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 326471.397 ops/s
[info]                  ·gc.alloc.rate:                   1010.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4760.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 323961.236 ops/s
[info]                  ·gc.alloc.rate:                   1002.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4826.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 326435.892 ops/s
[info]                  ·gc.alloc.rate:                   1010.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4812.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 324452.671 ops/s
[info]                  ·gc.alloc.rate:                   1004.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4864.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay":
[info]   325641.099 ±(99.9%) 5130.516 ops/s [Average]
[info]   (min, avg, max) = (323961.236, 325641.099, 326884.297), stdev = 1332.379
[info]   CI (99.9%): [320510.583, 330771.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate":
[info]   1008.106 ±(99.9%) 15.887 MB/sec [Average]
[info]   (min, avg, max) = (1002.881, 1008.106, 1011.980), stdev = 4.126
[info]   CI (99.9%): [992.219, 1023.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   993.202 ±(99.9%) 30.174 MB/sec [Average]
[info]   (min, avg, max) = (983.599, 993.202, 1002.991), stdev = 7.836
[info]   CI (99.9%): [963.028, 1023.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   4800.108 ±(99.9%) 200.225 B/op [Average]
[info]   (min, avg, max) = (4735.364, 4800.108, 4864.871), stdev = 51.998
[info]   CI (99.9%): [4599.883, 5000.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.362 ±(99.9%) 0.649 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.362, 0.506), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 1.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 5.22% complete, ETA 00:32:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1020171.040 ops/s
[info] # Warmup Iteration   2: 1669500.588 ops/s
[info] # Warmup Iteration   3: 1696718.574 ops/s
[info] # Warmup Iteration   4: 1716308.526 ops/s
[info] # Warmup Iteration   5: 1734050.278 ops/s
[info] Iteration   1: 1740030.409 ops/s
[info]                  ·gc.alloc.rate:                   2715.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2454.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1719418.492 ops/s
[info]                  ·gc.alloc.rate:                   2684.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2487.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1722572.490 ops/s
[info]                  ·gc.alloc.rate:                   2688.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2485.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1678353.924 ops/s
[info]                  ·gc.alloc.rate:                   2619.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2234.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1723286.699 ops/s
[info]                  ·gc.alloc.rate:                   2690.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2487.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1716732.403 ±(99.9%) 88229.026 ops/s [Average]
[info]   (min, avg, max) = (1678353.924, 1716732.403, 1740030.409), stdev = 22912.798
[info]   CI (99.9%): [1628503.377, 1804961.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2679.544 ±(99.9%) 138.308 MB/sec [Average]
[info]   (min, avg, max) = (2619.186, 2679.544, 2715.602), stdev = 35.918
[info]   CI (99.9%): [2541.236, 2817.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2652.095 ±(99.9%) 579.624 MB/sec [Average]
[info]   (min, avg, max) = (2382.916, 2652.095, 2724.096), stdev = 150.526
[info]   CI (99.9%): [2072.471, 3231.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2429.793 ±(99.9%) 424.019 B/op [Average]
[info]   (min, avg, max) = (2234.451, 2429.793, 2487.670), stdev = 110.116
[info]   CI (99.9%): [2005.774, 2853.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.115 ±(99.9%) 0.117 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.115, 0.152), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson
[info] # Run progress: 5.97% complete, ETA 00:32:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1096263.233 ops/s
[info] # Warmup Iteration   2: 2613001.598 ops/s
[info] # Warmup Iteration   3: 2637790.439 ops/s
[info] # Warmup Iteration   4: 2629049.459 ops/s
[info] # Warmup Iteration   5: 2651308.654 ops/s
[info] Iteration   1: 2661537.222 ops/s
[info]                  ·gc.alloc.rate:                   1867.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     990.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2651531.615 ops/s
[info]                  ·gc.alloc.rate:                   1860.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1199.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2652262.933 ops/s
[info]                  ·gc.alloc.rate:                   1860.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2610538.108 ops/s
[info]                  ·gc.alloc.rate:                   1831.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 2644375.267 ops/s
[info]                  ·gc.alloc.rate:                   1855.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1010.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson":
[info]   2644049.029 ±(99.9%) 75858.234 ops/s [Average]
[info]   (min, avg, max) = (2610538.108, 2644049.029, 2661537.222), stdev = 19700.142
[info]   CI (99.9%): [2568190.795, 2719907.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate":
[info]   1854.864 ±(99.9%) 53.179 MB/sec [Average]
[info]   (min, avg, max) = (1831.357, 1854.864, 1867.123), stdev = 13.810
[info]   CI (99.9%): [1801.685, 1908.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1824.019 ±(99.9%) 716.893 MB/sec [Average]
[info]   (min, avg, max) = (1675.088, 1824.019, 2033.844), stdev = 186.175
[info]   CI (99.9%): [1107.125, 2540.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1086.113 ±(99.9%) 448.188 B/op [Average]
[info]   (min, avg, max) = (990.453, 1086.113, 1226.066), stdev = 116.393
[info]   CI (99.9%): [637.925, 1534.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.054, 0.074), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 2.775
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter
[info] # Run progress: 6.72% complete, ETA 00:32:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9623147.831 ops/s
[info] # Warmup Iteration   2: 10185990.115 ops/s
[info] # Warmup Iteration   3: 10345500.237 ops/s
[info] # Warmup Iteration   4: 10306299.248 ops/s
[info] # Warmup Iteration   5: 10312357.713 ops/s
[info] Iteration   1: 10185226.858 ops/s
[info]                  ·gc.alloc.rate:                   1294.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10335658.299 ops/s
[info]                  ·gc.alloc.rate:                   1313.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10174468.098 ops/s
[info]                  ·gc.alloc.rate:                   1293.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10152675.172 ops/s
[info]                  ·gc.alloc.rate:                   1290.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10316460.712 ops/s
[info]                  ·gc.alloc.rate:                   1311.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter":
[info]   10232897.828 ±(99.9%) 331606.733 ops/s [Average]
[info]   (min, avg, max) = (10152675.172, 10232897.828, 10335658.299), stdev = 86117.216
[info]   CI (99.9%): [9901291.095, 10564504.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1300.436 ±(99.9%) 42.195 MB/sec [Average]
[info]   (min, avg, max) = (1290.199, 1300.436, 1313.552), stdev = 10.958
[info]   CI (99.9%): [1258.241, 1342.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1351.517 ±(99.9%) 17.580 MB/sec [Average]
[info]   (min, avg, max) = (1345.019, 1351.517, 1356.279), stdev = 4.566
[info]   CI (99.9%): [1333.936, 1369.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   207.867 ±(99.9%) 7.055 B/op [Average]
[info]   (min, avg, max) = (205.398, 207.867, 210.029), stdev = 1.832
[info]   CI (99.9%): [200.812, 214.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.013, 0.019), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay
[info] # Run progress: 7.46% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161216.298 ops/s
[info] # Warmup Iteration   2: 631706.303 ops/s
[info] # Warmup Iteration   3: 650123.169 ops/s
[info] # Warmup Iteration   4: 653716.898 ops/s
[info] # Warmup Iteration   5: 654891.722 ops/s
[info] Iteration   1: 656490.997 ops/s
[info]                  ·gc.alloc.rate:                   1735.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3994.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 640729.933 ops/s
[info]                  ·gc.alloc.rate:                   1693.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4945.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 649720.345 ops/s
[info]                  ·gc.alloc.rate:                   1717.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4085.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 654325.917 ops/s
[info]                  ·gc.alloc.rate:                   1729.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4067.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 649011.989 ops/s
[info]                  ·gc.alloc.rate:                   1715.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4111.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay":
[info]   650055.836 ±(99.9%) 23408.268 ops/s [Average]
[info]   (min, avg, max) = (640729.933, 650055.836, 656490.997), stdev = 6079.053
[info]   CI (99.9%): [626647.568, 673464.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate":
[info]   1718.524 ±(99.9%) 61.660 MB/sec [Average]
[info]   (min, avg, max) = (1693.792, 1718.524, 1735.355), stdev = 16.013
[info]   CI (99.9%): [1656.865, 1780.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1750.958 ±(99.9%) 567.321 MB/sec [Average]
[info]   (min, avg, max) = (1666.402, 1750.958, 2013.729), stdev = 147.331
[info]   CI (99.9%): [1183.638, 2318.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   4241.198 ±(99.9%) 1525.886 B/op [Average]
[info]   (min, avg, max) = (3994.708, 4241.198, 4945.774), stdev = 396.268
[info]   CI (99.9%): [2715.311, 5767.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.242 ±(99.9%) 0.263 B/op [Average]
[info]   (min, avg, max) = (0.200, 0.242, 0.358), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 8.21% complete, ETA 00:31:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1191871.300 ops/s
[info] # Warmup Iteration   2: 2019598.451 ops/s
[info] # Warmup Iteration   3: 2061811.209 ops/s
[info] # Warmup Iteration   4: 2048470.627 ops/s
[info] # Warmup Iteration   5: 2062787.786 ops/s
[info] Iteration   1: 1993234.388 ops/s
[info]                  ·gc.alloc.rate:                   1986.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1598.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2008967.331 ops/s
[info]                  ·gc.alloc.rate:                   2001.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2031155.882 ops/s
[info]                  ·gc.alloc.rate:                   2023.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1577.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2048108.440 ops/s
[info]                  ·gc.alloc.rate:                   2040.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1566.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2036562.190 ops/s
[info]                  ·gc.alloc.rate:                   2029.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1577.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2023605.646 ±(99.9%) 85280.215 ops/s [Average]
[info]   (min, avg, max) = (1993234.388, 2023605.646, 2048108.440), stdev = 22147.001
[info]   CI (99.9%): [1938325.432, 2108885.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2016.439 ±(99.9%) 84.239 MB/sec [Average]
[info]   (min, avg, max) = (1986.590, 2016.439, 2040.881), stdev = 21.877
[info]   CI (99.9%): [1932.199, 2100.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1568.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1568.000, 1568.000, 1568.000), stdev = 0.001
[info]   CI (99.9%): [1568.000, 1568.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2034.860 ±(99.9%) 24.930 MB/sec [Average]
[info]   (min, avg, max) = (2025.275, 2034.860, 2041.829), stdev = 6.474
[info]   CI (99.9%): [2009.930, 2059.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1582.433 ±(99.9%) 48.712 B/op [Average]
[info]   (min, avg, max) = (1566.389, 1582.433, 1598.534), stdev = 12.650
[info]   CI (99.9%): [1533.721, 1631.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.048, 0.075, 0.130), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson
[info] # Run progress: 8.96% complete, ETA 00:31:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2345190.005 ops/s
[info] # Warmup Iteration   2: 5779920.187 ops/s
[info] # Warmup Iteration   3: 5993492.261 ops/s
[info] # Warmup Iteration   4: 5964672.397 ops/s
[info] # Warmup Iteration   5: 5986478.172 ops/s
[info] Iteration   1: 6008375.945 ops/s
[info]                  ·gc.alloc.rate:                   1649.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6042055.702 ops/s
[info]                  ·gc.alloc.rate:                   1658.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5971996.439 ops/s
[info]                  ·gc.alloc.rate:                   1639.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     444.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6005190.629 ops/s
[info]                  ·gc.alloc.rate:                   1648.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6059717.107 ops/s
[info]                  ·gc.alloc.rate:                   1663.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson":
[info]   6017467.165 ±(99.9%) 131861.424 ops/s [Average]
[info]   (min, avg, max) = (5971996.439, 6017467.165, 6059717.107), stdev = 34243.993
[info]   CI (99.9%): [5885605.740, 6149328.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1651.835 ±(99.9%) 36.233 MB/sec [Average]
[info]   (min, avg, max) = (1639.316, 1651.835, 1663.419), stdev = 9.410
[info]   CI (99.9%): [1615.602, 1688.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1615.032 ±(99.9%) 559.508 MB/sec [Average]
[info]   (min, avg, max) = (1355.660, 1615.032, 1690.885), stdev = 145.302
[info]   CI (99.9%): [1055.525, 2174.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   422.507 ±(99.9%) 152.227 B/op [Average]
[info]   (min, avg, max) = (352.073, 422.507, 444.158), stdev = 39.533
[info]   CI (99.9%): [270.280, 574.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.033, 0.049), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter
[info] # Run progress: 9.70% complete, ETA 00:31:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15582311.686 ops/s
[info] # Warmup Iteration   2: 19245799.872 ops/s
[info] # Warmup Iteration   3: 21631839.788 ops/s
[info] # Warmup Iteration   4: 21726237.626 ops/s
[info] # Warmup Iteration   5: 21774743.918 ops/s
[info] Iteration   1: 21633321.856 ops/s
[info]                  ·gc.alloc.rate:                   659.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20250271.369 ops/s
[info]                  ·gc.alloc.rate:                   617.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 21335985.996 ops/s
[info]                  ·gc.alloc.rate:                   650.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21486378.494 ops/s
[info]                  ·gc.alloc.rate:                   655.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21225368.743 ops/s
[info]                  ·gc.alloc.rate:                   647.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter":
[info]   21186265.292 ±(99.9%) 2100240.796 ops/s [Average]
[info]   (min, avg, max) = (20250271.369, 21186265.292, 21633321.856), stdev = 545425.865
[info]   CI (99.9%): [19086024.495, 23286506.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   646.231 ±(99.9%) 64.006 MB/sec [Average]
[info]   (min, avg, max) = (617.700, 646.231, 659.831), stdev = 16.622
[info]   CI (99.9%): [582.226, 710.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   667.555 ±(99.9%) 5.415 MB/sec [Average]
[info]   (min, avg, max) = (666.179, 667.555, 669.528), stdev = 1.406
[info]   CI (99.9%): [662.140, 672.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   49.610 ±(99.9%) 4.939 B/op [Average]
[info]   (min, avg, max) = (48.462, 49.610, 51.771), stdev = 1.283
[info]   CI (99.9%): [44.671, 54.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc
[info] # Run progress: 10.45% complete, ETA 00:31:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22537228.715 ops/s
[info] # Warmup Iteration   2: 27755646.874 ops/s
[info] # Warmup Iteration   3: 28199759.107 ops/s
[info] # Warmup Iteration   4: 28417459.549 ops/s
[info] # Warmup Iteration   5: 28562939.937 ops/s
[info] Iteration   1: 28556211.189 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 28503208.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28585236.767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 28559613.207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28516962.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc":
[info]   28544246.472 ±(99.9%) 128982.362 ops/s [Average]
[info]   (min, avg, max) = (28503208.636, 28544246.472, 28585236.767), stdev = 33496.310
[info]   CI (99.9%): [28415264.110, 28673228.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay
[info] # Run progress: 11.19% complete, ETA 00:30:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321515.327 ops/s
[info] # Warmup Iteration   2: 1106686.713 ops/s
[info] # Warmup Iteration   3: 1123150.668 ops/s
[info] # Warmup Iteration   4: 1130354.816 ops/s
[info] # Warmup Iteration   5: 1119848.908 ops/s
[info] Iteration   1: 1128813.777 ops/s
[info]                  ·gc.alloc.rate:                   1698.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              2368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2324.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1129105.097 ops/s
[info]                  ·gc.alloc.rate:                   1698.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              2368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2337.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1129319.164 ops/s
[info]                  ·gc.alloc.rate:                   1699.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              2368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2348.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1128235.407 ops/s
[info]                  ·gc.alloc.rate:                   1697.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              2368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2358.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1127450.443 ops/s
[info]                  ·gc.alloc.rate:                   1696.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              2368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2366.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay":
[info]   1128584.778 ±(99.9%) 2901.601 ops/s [Average]
[info]   (min, avg, max) = (1127450.443, 1128584.778, 1129319.164), stdev = 753.537
[info]   CI (99.9%): [1125683.177, 1131486.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate":
[info]   1698.283 ±(99.9%) 3.960 MB/sec [Average]
[info]   (min, avg, max) = (1696.834, 1698.283, 1699.232), stdev = 1.029
[info]   CI (99.9%): [1694.322, 1702.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   2368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2368.000, 2368.000, 2368.000), stdev = 0.001
[info]   CI (99.9%): [2368.000, 2368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1683.367 ±(99.9%) 43.058 MB/sec [Average]
[info]   (min, avg, max) = (1667.425, 1683.367, 1695.484), stdev = 11.182
[info]   CI (99.9%): [1640.309, 1726.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   2347.209 ±(99.9%) 64.130 B/op [Average]
[info]   (min, avg, max) = (2324.260, 2347.209, 2366.117), stdev = 16.654
[info]   CI (99.9%): [2283.079, 2411.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.128 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (0.087, 0.128, 0.174), stdev = 0.033
[info]   CI (99.9%): [≈ 10⁻³, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 11.94% complete, ETA 00:30:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 610182.257 ops/s
[info] # Warmup Iteration   2: 883764.577 ops/s
[info] # Warmup Iteration   3: 905569.189 ops/s
[info] # Warmup Iteration   4: 911456.772 ops/s
[info] # Warmup Iteration   5: 909754.380 ops/s
[info] Iteration   1: 908124.986 ops/s
[info]                  ·gc.alloc.rate:                   2968.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5296.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 904760.917 ops/s
[info]                  ·gc.alloc.rate:                   2957.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3060.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5323.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 911965.860 ops/s
[info]                  ·gc.alloc.rate:                   2980.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4699.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 906073.640 ops/s
[info]                  ·gc.alloc.rate:                   2961.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5321.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 914202.160 ops/s
[info]                  ·gc.alloc.rate:                   2988.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5274.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   909025.513 ±(99.9%) 15300.509 ops/s [Average]
[info]   (min, avg, max) = (904760.917, 909025.513, 914202.160), stdev = 3973.494
[info]   CI (99.9%): [893725.004, 924326.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2971.429 ±(99.9%) 50.673 MB/sec [Average]
[info]   (min, avg, max) = (2957.345, 2971.429, 2988.884), stdev = 13.160
[info]   CI (99.9%): [2920.756, 3022.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.000, 5144.000, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.000, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2993.692 ±(99.9%) 582.273 MB/sec [Average]
[info]   (min, avg, max) = (2723.252, 2993.692, 3064.542), stdev = 151.214
[info]   CI (99.9%): [2411.419, 3575.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5182.983 ±(99.9%) 1043.433 B/op [Average]
[info]   (min, avg, max) = (4699.578, 5182.983, 5323.433), stdev = 270.976
[info]   CI (99.9%): [4139.551, 6226.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.150, 0.187), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.259 ±(99.9%) 0.298 B/op [Average]
[info]   (min, avg, max) = (0.145, 0.259, 0.323), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 10.000), stdev = 1.304
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson
[info] # Run progress: 12.69% complete, ETA 00:30:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 772607.494 ops/s
[info] # Warmup Iteration   2: 1610919.392 ops/s
[info] # Warmup Iteration   3: 1670893.547 ops/s
[info] # Warmup Iteration   4: 1671198.994 ops/s
[info] # Warmup Iteration   5: 1667387.425 ops/s
[info] Iteration   1: 1673706.791 ops/s
[info]                  ·gc.alloc.rate:                   1574.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1567.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1623456.730 ops/s
[info]                  ·gc.alloc.rate:                   1526.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1300.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1669683.813 ops/s
[info]                  ·gc.alloc.rate:                   1570.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1587.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1668701.225 ops/s
[info]                  ·gc.alloc.rate:                   1569.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1593.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1661901.389 ops/s
[info]                  ·gc.alloc.rate:                   1562.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1283.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson":
[info]   1659489.989 ±(99.9%) 79268.313 ops/s [Average]
[info]   (min, avg, max) = (1623456.730, 1659489.989, 1673706.791), stdev = 20585.729
[info]   CI (99.9%): [1580221.677, 1738758.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate":
[info]   1560.695 ±(99.9%) 74.593 MB/sec [Average]
[info]   (min, avg, max) = (1526.793, 1560.695, 1574.057), stdev = 19.371
[info]   CI (99.9%): [1486.102, 1635.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1547.438 ±(99.9%) 701.425 MB/sec [Average]
[info]   (min, avg, max) = (1341.367, 1547.438, 1690.071), stdev = 182.158
[info]   CI (99.9%): [846.013, 2248.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1466.296 ±(99.9%) 615.394 B/op [Average]
[info]   (min, avg, max) = (1283.109, 1466.296, 1593.877), stdev = 159.816
[info]   CI (99.9%): [850.902, 2081.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.167), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (0.078, 0.111, 0.161), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter
[info] # Run progress: 13.43% complete, ETA 00:30:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8261105.400 ops/s
[info] # Warmup Iteration   2: 9234730.260 ops/s
[info] # Warmup Iteration   3: 9107250.739 ops/s
[info] # Warmup Iteration   4: 9268302.971 ops/s
[info] # Warmup Iteration   5: 9029696.792 ops/s
[info] Iteration   1: 9368266.050 ops/s
[info]                  ·gc.alloc.rate:                   2809.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9200014.520 ops/s
[info]                  ·gc.alloc.rate:                   2759.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     523.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9250216.735 ops/s
[info]                  ·gc.alloc.rate:                   2774.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9360012.577 ops/s
[info]                  ·gc.alloc.rate:                   2807.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9357110.102 ops/s
[info]                  ·gc.alloc.rate:                   2806.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter":
[info]   9307123.997 ±(99.9%) 296681.055 ops/s [Average]
[info]   (min, avg, max) = (9200014.520, 9307123.997, 9368266.050), stdev = 77047.128
[info]   CI (99.9%): [9010442.942, 9603805.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2791.362 ±(99.9%) 89.125 MB/sec [Average]
[info]   (min, avg, max) = (2759.212, 2791.362, 2809.868), stdev = 23.146
[info]   CI (99.9%): [2702.236, 2880.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   2789.740 ±(99.9%) 584.457 MB/sec [Average]
[info]   (min, avg, max) = (2717.765, 2789.740, 3061.222), stdev = 151.782
[info]   CI (99.9%): [2205.282, 3374.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   471.886 ±(99.9%) 111.902 B/op [Average]
[info]   (min, avg, max) = (456.529, 471.886, 523.663), stdev = 29.060
[info]   CI (99.9%): [359.984, 583.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.019, 0.032), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay
[info] # Run progress: 14.18% complete, ETA 00:29:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97060.404 ops/s
[info] # Warmup Iteration   2: 325048.079 ops/s
[info] # Warmup Iteration   3: 336001.485 ops/s
[info] # Warmup Iteration   4: 330876.274 ops/s
[info] # Warmup Iteration   5: 335746.401 ops/s
[info] Iteration   1: 334274.311 ops/s
[info]                  ·gc.alloc.rate:                   2037.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2347.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11053.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.490 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 336260.972 ops/s
[info]                  ·gc.alloc.rate:                   2049.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9474.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.877 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 337529.825 ops/s
[info]                  ·gc.alloc.rate:                   2057.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9473.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.874 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 335410.386 ops/s
[info]                  ·gc.alloc.rate:                   2044.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9555.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 334556.021 ops/s
[info]                  ·gc.alloc.rate:                   2039.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9589.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay":
[info]   335606.303 ±(99.9%) 5109.982 ops/s [Average]
[info]   (min, avg, max) = (334274.311, 335606.303, 337529.825), stdev = 1327.046
[info]   CI (99.9%): [330496.322, 340716.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate":
[info]   2045.555 ±(99.9%) 31.054 MB/sec [Average]
[info]   (min, avg, max) = (2037.400, 2045.555, 2057.213), stdev = 8.065
[info]   CI (99.9%): [2014.501, 2076.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2095.889 ±(99.9%) 542.851 MB/sec [Average]
[info]   (min, avg, max) = (2024.508, 2095.889, 2347.889), stdev = 140.977
[info]   CI (99.9%): [1553.038, 2638.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   9829.370 ±(99.9%) 2642.793 B/op [Average]
[info]   (min, avg, max) = (9473.550, 9829.370, 11053.769), stdev = 686.325
[info]   CI (99.9%): [7186.577, 12472.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.624 ±(99.9%) 0.972 B/op [Average]
[info]   (min, avg, max) = (0.293, 0.624, 0.877), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 14.93% complete, ETA 00:29:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 669693.058 ops/s
[info] # Warmup Iteration   2: 1070660.230 ops/s
[info] # Warmup Iteration   3: 1077393.948 ops/s
[info] # Warmup Iteration   4: 1091827.909 ops/s
[info] # Warmup Iteration   5: 1099406.966 ops/s
[info] Iteration   1: 1098156.671 ops/s
[info]                  ·gc.alloc.rate:                   2518.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              3608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3398.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1079803.641 ops/s
[info]                  ·gc.alloc.rate:                   2475.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              3608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3465.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1093912.029 ops/s
[info]                  ·gc.alloc.rate:                   2507.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              3608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3913.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1103284.228 ops/s
[info]                  ·gc.alloc.rate:                   2529.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              3608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3398.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1088501.682 ops/s
[info]                  ·gc.alloc.rate:                   2495.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              3608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3445.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1092731.650 ±(99.9%) 34826.893 ops/s [Average]
[info]   (min, avg, max) = (1079803.641, 1092731.650, 1103284.228), stdev = 9044.433
[info]   CI (99.9%): [1057904.757, 1127558.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2505.415 ±(99.9%) 79.825 MB/sec [Average]
[info]   (min, avg, max) = (2475.954, 2505.415, 2529.502), stdev = 20.730
[info]   CI (99.9%): [2425.590, 2585.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3608.000, 3608.000, 3608.000), stdev = 0.001
[info]   CI (99.9%): [3608.000, 3608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2447.148 ±(99.9%) 587.256 MB/sec [Average]
[info]   (min, avg, max) = (2372.143, 2447.148, 2719.848), stdev = 152.509
[info]   CI (99.9%): [1859.891, 3034.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3524.186 ±(99.9%) 844.550 B/op [Average]
[info]   (min, avg, max) = (3398.569, 3524.186, 3913.069), stdev = 219.327
[info]   CI (99.9%): [2679.636, 4368.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.208), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.204 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (0.120, 0.204, 0.297), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson
[info] # Run progress: 15.67% complete, ETA 00:29:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1576069.835 ops/s
[info] # Warmup Iteration   2: 3373740.754 ops/s
[info] # Warmup Iteration   3: 3450273.335 ops/s
[info] # Warmup Iteration   4: 3461247.008 ops/s
[info] # Warmup Iteration   5: 3483993.495 ops/s
[info] Iteration   1: 3491256.331 ops/s
[info]                  ·gc.alloc.rate:                   2023.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     908.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3479806.462 ops/s
[info]                  ·gc.alloc.rate:                   2016.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3484696.811 ops/s
[info]                  ·gc.alloc.rate:                   2019.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3494344.080 ops/s
[info]                  ·gc.alloc.rate:                   2025.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3463624.619 ops/s
[info]                  ·gc.alloc.rate:                   2007.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     926.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson":
[info]   3482745.661 ±(99.9%) 46567.921 ops/s [Average]
[info]   (min, avg, max) = (3463624.619, 3482745.661, 3494344.080), stdev = 12093.541
[info]   CI (99.9%): [3436177.739, 3529313.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate":
[info]   2018.372 ±(99.9%) 27.289 MB/sec [Average]
[info]   (min, avg, max) = (2007.218, 2018.372, 2025.397), stdev = 7.087
[info]   CI (99.9%): [1991.083, 2045.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   2029.804 ±(99.9%) 38.157 MB/sec [Average]
[info]   (min, avg, max) = (2014.490, 2029.804, 2038.482), stdev = 9.909
[info]   CI (99.9%): [1991.647, 2067.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   917.180 ±(99.9%) 24.776 B/op [Average]
[info]   (min, avg, max) = (908.092, 917.180, 926.205), stdev = 6.434
[info]   CI (99.9%): [892.404, 941.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.049, 0.066), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter
[info] # Run progress: 16.42% complete, ETA 00:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14439557.483 ops/s
[info] # Warmup Iteration   2: 15425606.573 ops/s
[info] # Warmup Iteration   3: 15923500.720 ops/s
[info] # Warmup Iteration   4: 16646843.350 ops/s
[info] # Warmup Iteration   5: 16682070.731 ops/s
[info] Iteration   1: 16306724.277 ops/s
[info]                  ·gc.alloc.rate:                   746.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16257393.883 ops/s
[info]                  ·gc.alloc.rate:                   743.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16386458.116 ops/s
[info]                  ·gc.alloc.rate:                   749.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16340303.936 ops/s
[info]                  ·gc.alloc.rate:                   747.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16368219.750 ops/s
[info]                  ·gc.alloc.rate:                   748.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter":
[info]   16331819.993 ±(99.9%) 197768.008 ops/s [Average]
[info]   (min, avg, max) = (16257393.883, 16331819.993, 16386458.116), stdev = 51359.724
[info]   CI (99.9%): [16134051.984, 16529588.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   747.297 ±(99.9%) 8.700 MB/sec [Average]
[info]   (min, avg, max) = (743.982, 747.297, 749.712), stdev = 2.259
[info]   CI (99.9%): [738.597, 755.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   735.713 ±(99.9%) 575.328 MB/sec [Average]
[info]   (min, avg, max) = (666.421, 735.713, 1002.965), stdev = 149.411
[info]   CI (99.9%): [160.385, 1311.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   70.863 ±(99.9%) 54.803 B/op [Average]
[info]   (min, avg, max) = (64.295, 70.863, 96.322), stdev = 14.232
[info]   CI (99.9%): [16.060, 125.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.007, 0.014), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay
[info] # Run progress: 17.16% complete, ETA 00:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149877.389 ops/s
[info] # Warmup Iteration   2: 469331.607 ops/s
[info] # Warmup Iteration   3: 473591.543 ops/s
[info] # Warmup Iteration   4: 474523.492 ops/s
[info] # Warmup Iteration   5: 475705.939 ops/s
[info] Iteration   1: 455217.826 ops/s
[info]                  ·gc.alloc.rate:                   1605.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5761.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 473488.724 ops/s
[info]                  ·gc.alloc.rate:                   1670.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5575.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.484 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 478406.283 ops/s
[info]                  ·gc.alloc.rate:                   1687.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5544.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.411 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 475833.977 ops/s
[info]                  ·gc.alloc.rate:                   1678.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5592.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 475472.061 ops/s
[info]                  ·gc.alloc.rate:                   1677.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5609.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay":
[info]   471683.774 ±(99.9%) 36078.742 ops/s [Average]
[info]   (min, avg, max) = (455217.826, 471683.774, 478406.283), stdev = 9369.535
[info]   CI (99.9%): [435605.032, 507762.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate":
[info]   1664.139 ±(99.9%) 127.429 MB/sec [Average]
[info]   (min, avg, max) = (1605.979, 1664.139, 1687.849), stdev = 33.093
[info]   CI (99.9%): [1536.710, 1791.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.001), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1683.074 ±(99.9%) 43.727 MB/sec [Average]
[info]   (min, avg, max) = (1666.508, 1683.074, 1695.043), stdev = 11.356
[info]   CI (99.9%): [1639.347, 1726.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5616.477 ±(99.9%) 325.194 B/op [Average]
[info]   (min, avg, max) = (5544.195, 5616.477, 5761.255), stdev = 84.452
[info]   CI (99.9%): [5291.282, 5941.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.347 ±(99.9%) 0.369 B/op [Average]
[info]   (min, avg, max) = (0.275, 0.347, 0.484), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce
[info] # Run progress: 17.91% complete, ETA 00:28:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5921.997 ops/s
[info] # Warmup Iteration   2: 7291.358 ops/s
[info] # Warmup Iteration   3: 7485.733 ops/s
[info] # Warmup Iteration   4: 7474.658 ops/s
[info] # Warmup Iteration   5: 7412.812 ops/s
[info] Iteration   1: 7289.218 ops/s
[info]                  ·gc.alloc.rate:                   1236.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              266856.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288786.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.460 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7315.633 ops/s
[info]                  ·gc.alloc.rate:                   1240.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              266856.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288906.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.913 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7482.216 ops/s
[info]                  ·gc.alloc.rate:                   1269.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              266856.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212545.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.757 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7483.545 ops/s
[info]                  ·gc.alloc.rate:                   1268.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              266864.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283963.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.511 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7452.232 ops/s
[info]                  ·gc.alloc.rate:                   1263.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              266872.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285706.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.396 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce":
[info]   7404.569 ±(99.9%) 364.051 ops/s [Average]
[info]   (min, avg, max) = (7289.218, 7404.569, 7483.545), stdev = 94.543
[info]   CI (99.9%): [7040.518, 7768.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1255.693 ±(99.9%) 61.842 MB/sec [Average]
[info]   (min, avg, max) = (1236.118, 1255.693, 1269.118), stdev = 16.060
[info]   CI (99.9%): [1193.851, 1317.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   266860.856 ±(99.9%) 27.546 B/op [Average]
[info]   (min, avg, max) = (266856.058, 266860.856, 266872.058), stdev = 7.153
[info]   CI (99.9%): [266833.310, 266888.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1278.952 ±(99.9%) 577.618 MB/sec [Average]
[info]   (min, avg, max) = (1010.827, 1278.952, 1352.864), stdev = 150.006
[info]   CI (99.9%): [701.334, 1856.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   271981.598 ±(99.9%) 128195.887 B/op [Average]
[info]   (min, avg, max) = (212545.402, 271981.598, 288906.549), stdev = 33292.065
[info]   CI (99.9%): [143785.711, 400177.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.008 ±(99.9%) 40.021 B/op [Average]
[info]   (min, avg, max) = (4.396, 16.008, 31.460), stdev = 10.393
[info]   CI (99.9%): [≈ 0, 56.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson
[info] # Run progress: 18.66% complete, ETA 00:28:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18353.752 ops/s
[info] # Warmup Iteration   2: 25495.333 ops/s
[info] # Warmup Iteration   3: 25555.111 ops/s
[info] # Warmup Iteration   4: 25328.155 ops/s
[info] # Warmup Iteration   5: 25889.680 ops/s
[info] Iteration   1: 25959.640 ops/s
[info]                  ·gc.alloc.rate:                   1115.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60192.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25786.825 ops/s
[info]                  ·gc.alloc.rate:                   1109.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81128.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.151 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 26048.000 ops/s
[info]                  ·gc.alloc.rate:                   1119.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60593.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25829.656 ops/s
[info]                  ·gc.alloc.rate:                   1110.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61309.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26093.102 ops/s
[info]                  ·gc.alloc.rate:                   1121.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60888.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.511 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson":
[info]   25943.445 ±(99.9%) 513.267 ops/s [Average]
[info]   (min, avg, max) = (25786.825, 25943.445, 26093.102), stdev = 133.294
[info]   CI (99.9%): [25430.178, 26456.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   1115.127 ±(99.9%) 21.297 MB/sec [Average]
[info]   (min, avg, max) = (1109.025, 1115.127, 1121.513), stdev = 5.531
[info]   CI (99.9%): [1093.830, 1136.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   67632.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (67632.017, 67632.017, 67632.018), stdev = 0.001
[info]   CI (99.9%): [67632.015, 67632.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1068.424 ±(99.9%) 564.300 MB/sec [Average]
[info]   (min, avg, max) = (992.895, 1068.424, 1330.334), stdev = 146.547
[info]   CI (99.9%): [504.124, 1632.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   64822.330 ±(99.9%) 35134.860 B/op [Average]
[info]   (min, avg, max) = (60192.664, 64822.330, 81128.208), stdev = 9124.412
[info]   CI (99.9%): [29687.470, 99957.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.166), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.558 ±(99.9%) 14.041 B/op [Average]
[info]   (min, avg, max) = (2.511, 5.558, 10.151), stdev = 3.646
[info]   CI (99.9%): [≈ 0, 19.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter
[info] # Run progress: 19.40% complete, ETA 00:28:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27060.962 ops/s
[info] # Warmup Iteration   2: 29021.800 ops/s
[info] # Warmup Iteration   3: 28927.645 ops/s
[info] # Warmup Iteration   4: 29044.857 ops/s
[info] # Warmup Iteration   5: 27302.145 ops/s
[info] Iteration   1: 29106.761 ops/s
[info]                  ·gc.alloc.rate:               528.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18008.725 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 28447.731 ops/s
[info]                  ·gc.alloc.rate:                   516.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36851.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29175.677 ops/s
[info]                  ·gc.alloc.rate:               529.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17966.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 28940.857 ops/s
[info]                  ·gc.alloc.rate:                   525.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36262.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28840.240 ops/s
[info]                  ·gc.alloc.rate:               523.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36461.145 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter":
[info]   28902.253 ±(99.9%) 1103.514 ops/s [Average]
[info]   (min, avg, max) = (28447.731, 28902.253, 29175.677), stdev = 286.579
[info]   CI (99.9%): [27798.740, 30005.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   524.701 ±(99.9%) 19.837 MB/sec [Average]
[info]   (min, avg, max) = (516.566, 524.701, 529.640), stdev = 5.152
[info]   CI (99.9%): [504.864, 544.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (28568.015, 28568.015, 28568.016), stdev = 0.001
[info]   CI (99.9%): [28568.013, 28568.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   533.519 ±(99.9%) 704.522 MB/sec [Average]
[info]   (min, avg, max) = (333.094, 533.519, 668.154), stdev = 182.962
[info]   CI (99.9%): [≈ 0, 1238.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   29110.195 ±(99.9%) 39105.541 B/op [Average]
[info]   (min, avg, max) = (17966.759, 29110.195, 36851.620), stdev = 10155.585
[info]   CI (99.9%): [≈ 0, 68215.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   2.518 ±(99.9%) 14.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.518, 8.061), stdev = 3.667
[info]   CI (99.9%): [≈ 0, 16.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson
[info] # Run progress: 20.15% complete, ETA 00:27:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7873.821 ops/s
[info] # Warmup Iteration   2: 13216.879 ops/s
[info] # Warmup Iteration   3: 13353.511 ops/s
[info] # Warmup Iteration   4: 13406.849 ops/s
[info] # Warmup Iteration   5: 13362.191 ops/s
[info] Iteration   1: 13368.280 ops/s
[info]                  ·gc.alloc.rate:                   1416.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156674.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.901 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13346.053 ops/s
[info]                  ·gc.alloc.rate:                   1414.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157848.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13200.932 ops/s
[info]                  ·gc.alloc.rate:                   1398.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200399.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.927 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13356.638 ops/s
[info]                  ·gc.alloc.rate:                   1415.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              166759.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159013.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13408.576 ops/s
[info]                  ·gc.alloc.rate:                   1420.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158775.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson":
[info]   13336.096 ±(99.9%) 304.905 ops/s [Average]
[info]   (min, avg, max) = (13200.932, 13336.096, 13408.576), stdev = 79.183
[info]   CI (99.9%): [13031.191, 13641.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   1413.170 ±(99.9%) 32.485 MB/sec [Average]
[info]   (min, avg, max) = (1398.765, 1413.170, 1420.895), stdev = 8.436
[info]   CI (99.9%): [1380.685, 1445.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   166760.010 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (166759.901, 166760.010, 166760.053), stdev = 0.063
[info]   CI (99.9%): [166759.766, 166760.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1410.597 ±(99.9%) 582.894 MB/sec [Average]
[info]   (min, avg, max) = (1330.892, 1410.597, 1680.934), stdev = 151.376
[info]   CI (99.9%): [827.704, 1993.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   166542.309 ±(99.9%) 72967.208 B/op [Average]
[info]   (min, avg, max) = (156674.757, 166542.309, 200399.995), stdev = 18949.352
[info]   CI (99.9%): [93575.101, 239509.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.340 ±(99.9%) 18.218 B/op [Average]
[info]   (min, avg, max) = (4.901, 9.340, 17.183), stdev = 4.731
[info]   CI (99.9%): [≈ 0, 27.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter
[info] # Run progress: 20.90% complete, ETA 00:27:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13411.212 ops/s
[info] # Warmup Iteration   2: 14597.211 ops/s
[info] # Warmup Iteration   3: 14432.285 ops/s
[info] # Warmup Iteration   4: 14625.253 ops/s
[info] # Warmup Iteration   5: 14512.690 ops/s
[info] Iteration   1: 14540.967 ops/s
[info]                  ·gc.alloc.rate:                   1456.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145625.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.011 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14556.476 ops/s
[info]                  ·gc.alloc.rate:                   1457.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145917.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.755 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14619.152 ops/s
[info]                  ·gc.alloc.rate:                   1463.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145647.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.964 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14698.543 ops/s
[info]                  ·gc.alloc.rate:                   1471.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181443.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.686 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14601.544 ops/s
[info]                  ·gc.alloc.rate:                   1462.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146309.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.730 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter":
[info]   14603.336 ±(99.9%) 238.953 ops/s [Average]
[info]   (min, avg, max) = (14540.967, 14603.336, 14698.543), stdev = 62.055
[info]   CI (99.9%): [14364.383, 14842.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1462.296 ±(99.9%) 23.545 MB/sec [Average]
[info]   (min, avg, max) = (1456.340, 1462.296, 1471.748), stdev = 6.115
[info]   CI (99.9%): [1438.751, 1485.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   157576.032 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (157576.029, 157576.032, 157576.040), stdev = 0.005
[info]   CI (99.9%): [157576.014, 157576.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   1420.153 ±(99.9%) 591.139 MB/sec [Average]
[info]   (min, avg, max) = (1345.892, 1420.153, 1694.665), stdev = 153.517
[info]   CI (99.9%): [829.014, 2011.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   152988.689 ±(99.9%) 61259.613 B/op [Average]
[info]   (min, avg, max) = (145625.543, 152988.689, 181443.160), stdev = 15908.927
[info]   CI (99.9%): [91729.076, 214248.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   9.429 ±(99.9%) 14.306 B/op [Average]
[info]   (min, avg, max) = (6.686, 9.429, 15.755), stdev = 3.715
[info]   CI (99.9%): [≈ 0, 23.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 21.64% complete, ETA 00:27:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13959.075 ops/s
[info] # Warmup Iteration   2: 15113.325 ops/s
[info] # Warmup Iteration   3: 14888.913 ops/s
[info] # Warmup Iteration   4: 14853.324 ops/s
[info] # Warmup Iteration   5: 15040.023 ops/s
[info] Iteration   1: 15089.534 ops/s
[info]                  ·gc.alloc.rate:                   1411.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140268.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.342 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14989.983 ops/s
[info]                  ·gc.alloc.rate:                   1402.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141614.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15055.574 ops/s
[info]                  ·gc.alloc.rate:                   1408.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141351.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.880 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15065.116 ops/s
[info]                  ·gc.alloc.rate:                   1409.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141535.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.698 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15041.368 ops/s
[info]                  ·gc.alloc.rate:                   1407.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177457.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.356 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc":
[info]   15048.315 ±(99.9%) 142.589 ops/s [Average]
[info]   (min, avg, max) = (14989.983, 15048.315, 15089.534), stdev = 37.030
[info]   CI (99.9%): [14905.726, 15190.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1408.082 ±(99.9%) 13.059 MB/sec [Average]
[info]   (min, avg, max) = (1402.802, 1408.082, 1411.958), stdev = 3.391
[info]   CI (99.9%): [1395.023, 1421.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   147248.031 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (147248.029, 147248.031, 147248.039), stdev = 0.005
[info]   CI (99.9%): [147248.012, 147248.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   1419.492 ±(99.9%) 595.631 MB/sec [Average]
[info]   (min, avg, max) = (1345.033, 1419.492, 1696.120), stdev = 154.684
[info]   CI (99.9%): [823.861, 2015.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   148445.594 ±(99.9%) 62485.718 B/op [Average]
[info]   (min, avg, max) = (140268.664, 148445.594, 177457.757), stdev = 16227.342
[info]   CI (99.9%): [85959.877, 210931.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   8.278 ±(99.9%) 15.061 B/op [Average]
[info]   (min, avg, max) = (4.342, 8.278, 13.112), stdev = 3.911
[info]   CI (99.9%): [≈ 0, 23.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson
[info] # Run progress: 22.39% complete, ETA 00:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1236720.656 ops/s
[info] # Warmup Iteration   2: 2098154.405 ops/s
[info] # Warmup Iteration   3: 2136810.290 ops/s
[info] # Warmup Iteration   4: 2135454.053 ops/s
[info] # Warmup Iteration   5: 2127217.249 ops/s
[info] Iteration   1: 2140639.168 ops/s
[info]                  ·gc.alloc.rate:                   1360.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1984700.103 ops/s
[info]                  ·gc.alloc.rate:                   1261.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1058.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2122629.694 ops/s
[info]                  ·gc.alloc.rate:                   1348.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     994.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2143142.384 ops/s
[info]                  ·gc.alloc.rate:                   1361.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     989.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2147516.151 ops/s
[info]                  ·gc.alloc.rate:                   1364.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     989.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson":
[info]   2107725.500 ±(99.9%) 267324.174 ops/s [Average]
[info]   (min, avg, max) = (1984700.103, 2107725.500, 2147516.151), stdev = 69423.239
[info]   CI (99.9%): [1840401.326, 2375049.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate":
[info]   1339.407 ±(99.9%) 169.910 MB/sec [Average]
[info]   (min, avg, max) = (1261.216, 1339.407, 1364.531), stdev = 44.125
[info]   CI (99.9%): [1169.497, 1509.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1339.806 ±(99.9%) 37.353 MB/sec [Average]
[info]   (min, avg, max) = (1326.224, 1339.806, 1350.306), stdev = 9.700
[info]   CI (99.9%): [1302.454, 1377.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1001.140 ±(99.9%) 125.834 B/op [Average]
[info]   (min, avg, max) = (974.661, 1001.140, 1058.104), stdev = 32.679
[info]   CI (99.9%): [875.307, 1126.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.066, 0.116), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter
[info] # Run progress: 23.13% complete, ETA 00:26:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5087801.993 ops/s
[info] # Warmup Iteration   2: 4939516.014 ops/s
[info] # Warmup Iteration   3: 5105300.407 ops/s
[info] # Warmup Iteration   4: 5141836.717 ops/s
[info] # Warmup Iteration   5: 5173283.239 ops/s
[info] Iteration   1: 5143113.255 ops/s
[info]                  ·gc.alloc.rate:               679.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 203.837 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5159424.576 ops/s
[info]                  ·gc.alloc.rate:                   681.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5149637.932 ops/s
[info]                  ·gc.alloc.rate:               680.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 203.893 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5146184.552 ops/s
[info]                  ·gc.alloc.rate:                   680.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5133709.546 ops/s
[info]                  ·gc.alloc.rate:                   678.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter":
[info]   5146413.972 ±(99.9%) 36123.245 ops/s [Average]
[info]   (min, avg, max) = (5133709.546, 5146413.972, 5159424.576), stdev = 9381.092
[info]   CI (99.9%): [5110290.727, 5182537.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   680.198 ±(99.9%) 4.879 MB/sec [Average]
[info]   (min, avg, max) = (678.481, 680.198, 681.961), stdev = 1.267
[info]   CI (99.9%): [675.319, 685.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   667.495 ±(99.9%) 5.149 MB/sec [Average]
[info]   (min, avg, max) = (666.154, 667.495, 669.468), stdev = 1.337
[info]   CI (99.9%): [662.346, 672.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   204.117 ±(99.9%) 2.792 B/op [Average]
[info]   (min, avg, max) = (203.294, 204.117, 205.237), stdev = 0.725
[info]   CI (99.9%): [201.325, 206.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.038), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay
[info] # Run progress: 23.88% complete, ETA 00:26:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127844.634 ops/s
[info] # Warmup Iteration   2: 363103.255 ops/s
[info] # Warmup Iteration   3: 374493.971 ops/s
[info] # Warmup Iteration   4: 373602.411 ops/s
[info] # Warmup Iteration   5: 373147.484 ops/s
[info] Iteration   1: 370135.809 ops/s
[info]                  ·gc.alloc.rate:                   1680.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7085.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 369999.513 ops/s
[info]                  ·gc.alloc.rate:                   1679.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7135.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 375374.347 ops/s
[info]                  ·gc.alloc.rate:                   1703.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7066.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 362615.061 ops/s
[info]                  ·gc.alloc.rate:                   1646.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7337.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 374751.118 ops/s
[info]                  ·gc.alloc.rate:                   1701.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7116.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay":
[info]   370575.170 ±(99.9%) 19668.312 ops/s [Average]
[info]   (min, avg, max) = (362615.061, 370575.170, 375374.347), stdev = 5107.798
[info]   CI (99.9%): [350906.858, 390243.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate":
[info]   1682.461 ±(99.9%) 88.386 MB/sec [Average]
[info]   (min, avg, max) = (1646.650, 1682.461, 1703.989), stdev = 22.954
[info]   CI (99.9%): [1594.074, 1770.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1683.227 ±(99.9%) 43.100 MB/sec [Average]
[info]   (min, avg, max) = (1666.927, 1683.227, 1694.760), stdev = 11.193
[info]   CI (99.9%): [1640.126, 1726.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   7148.324 ±(99.9%) 421.030 B/op [Average]
[info]   (min, avg, max) = (7066.290, 7148.324, 7337.976), stdev = 109.340
[info]   CI (99.9%): [6727.293, 7569.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.001 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.083, 0.083), stdev = 0.001
[info]   CI (99.9%): [0.083, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.354 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.349, 0.354, 0.361), stdev = 0.005
[info]   CI (99.9%): [0.335, 0.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 11.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson
[info] # Run progress: 24.63% complete, ETA 00:26:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1531320.604 ops/s
[info] # Warmup Iteration   2: 2435259.327 ops/s
[info] # Warmup Iteration   3: 2491724.548 ops/s
[info] # Warmup Iteration   4: 2395420.521 ops/s
[info] # Warmup Iteration   5: 2490768.486 ops/s
[info] Iteration   1: 2491474.250 ops/s
[info]                  ·gc.alloc.rate:                   1317.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2501858.118 ops/s
[info]                  ·gc.alloc.rate:                   1322.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     838.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2492004.749 ops/s
[info]                  ·gc.alloc.rate:                   1317.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2439922.126 ops/s
[info]                  ·gc.alloc.rate:                   1290.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2492944.753 ops/s
[info]                  ·gc.alloc.rate:                   1317.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     852.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson":
[info]   2483640.799 ±(99.9%) 95513.732 ops/s [Average]
[info]   (min, avg, max) = (2439922.126, 2483640.799, 2501858.118), stdev = 24804.613
[info]   CI (99.9%): [2388127.067, 2579154.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1313.256 ±(99.9%) 49.874 MB/sec [Average]
[info]   (min, avg, max) = (1290.427, 1313.256, 1322.757), stdev = 12.952
[info]   CI (99.9%): [1263.382, 1363.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1338.833 ±(99.9%) 39.281 MB/sec [Average]
[info]   (min, avg, max) = (1324.444, 1338.833, 1349.732), stdev = 10.201
[info]   CI (99.9%): [1299.552, 1378.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   848.293 ±(99.9%) 48.683 B/op [Average]
[info]   (min, avg, max) = (836.575, 848.293, 868.018), stdev = 12.643
[info]   CI (99.9%): [799.610, 896.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.053, 0.066), stdev = 0.013
[info]   CI (99.9%): [0.002, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter
[info] # Run progress: 25.37% complete, ETA 00:26:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6123916.992 ops/s
[info] # Warmup Iteration   2: 6416675.661 ops/s
[info] # Warmup Iteration   3: 6695890.892 ops/s
[info] # Warmup Iteration   4: 6685387.632 ops/s
[info] # Warmup Iteration   5: 6598853.702 ops/s
[info] Iteration   1: 6548219.738 ops/s
[info]                  ·gc.alloc.rate:                   998.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6676140.825 ops/s
[info]                  ·gc.alloc.rate:                   1018.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6587326.435 ops/s
[info]                  ·gc.alloc.rate:                   1004.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6697998.631 ops/s
[info]                  ·gc.alloc.rate:                   1021.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6647678.333 ops/s
[info]                  ·gc.alloc.rate:                   1013.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1011.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter":
[info]   6631472.792 ±(99.9%) 240191.241 ops/s [Average]
[info]   (min, avg, max) = (6548219.738, 6631472.792, 6697998.631), stdev = 62376.902
[info]   CI (99.9%): [6391281.552, 6871664.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1011.348 ±(99.9%) 36.751 MB/sec [Average]
[info]   (min, avg, max) = (998.584, 1011.348, 1021.546), stdev = 9.544
[info]   CI (99.9%): [974.597, 1048.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   1007.429 ±(99.9%) 14.712 MB/sec [Average]
[info]   (min, avg, max) = (1002.585, 1007.429, 1011.889), stdev = 3.821
[info]   CI (99.9%): [992.716, 1022.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   239.083 ±(99.9%) 7.475 B/op [Average]
[info]   (min, avg, max) = (236.808, 239.083, 240.962), stdev = 1.941
[info]   CI (99.9%): [231.609, 246.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.019, 0.025), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay
[info] # Run progress: 26.12% complete, ETA 00:25:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278147.216 ops/s
[info] # Warmup Iteration   2: 640570.230 ops/s
[info] # Warmup Iteration   3: 642836.664 ops/s
[info] # Warmup Iteration   4: 649018.773 ops/s
[info] # Warmup Iteration   5: 599606.989 ops/s
[info] Iteration   1: 647887.669 ops/s
[info]                  ·gc.alloc.rate:                   1916.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4880.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 647181.876 ops/s
[info]                  ·gc.alloc.rate:                   1914.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4916.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 645915.582 ops/s
[info]                  ·gc.alloc.rate:                   1910.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4119.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 647056.043 ops/s
[info]                  ·gc.alloc.rate:                   1914.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4947.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 642538.448 ops/s
[info]                  ·gc.alloc.rate:                   1900.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4992.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay":
[info]   646115.923 ±(99.9%) 8167.912 ops/s [Average]
[info]   (min, avg, max) = (642538.448, 646115.923, 647887.669), stdev = 2121.181
[info]   CI (99.9%): [637948.012, 654283.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate":
[info]   1911.532 ±(99.9%) 24.258 MB/sec [Average]
[info]   (min, avg, max) = (1900.940, 1911.532, 1916.854), stdev = 6.300
[info]   CI (99.9%): [1887.273, 1935.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1958.780 ±(99.9%) 578.792 MB/sec [Average]
[info]   (min, avg, max) = (1690.657, 1958.780, 2038.155), stdev = 150.310
[info]   CI (99.9%): [1379.988, 2537.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   4771.125 ±(99.9%) 1411.706 B/op [Average]
[info]   (min, avg, max) = (4119.434, 4771.125, 4992.085), stdev = 366.615
[info]   CI (99.9%): [3359.419, 6182.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.264 ±(99.9%) 0.254 B/op [Average]
[info]   (min, avg, max) = (0.202, 0.264, 0.354), stdev = 0.066
[info]   CI (99.9%): [0.010, 0.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 11.000), stdev = 2.236
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 26.87% complete, ETA 00:25:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447273.210 ops/s
[info] # Warmup Iteration   2: 801012.522 ops/s
[info] # Warmup Iteration   3: 818034.298 ops/s
[info] # Warmup Iteration   4: 790478.131 ops/s
[info] # Warmup Iteration   5: 784505.122 ops/s
[info] Iteration   1: 807179.972 ops/s
[info]                  ·gc.alloc.rate:                   2679.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5287.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 804766.821 ops/s
[info]                  ·gc.alloc.rate:                   2671.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5314.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 812967.350 ops/s
[info]                  ·gc.alloc.rate:                   2698.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5267.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 810154.577 ops/s
[info]                  ·gc.alloc.rate:                   2689.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5289.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 810320.770 ops/s
[info]                  ·gc.alloc.rate:                   2689.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5288.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   809077.898 ±(99.9%) 12179.746 ops/s [Average]
[info]   (min, avg, max) = (804766.821, 809077.898, 812967.350), stdev = 3163.041
[info]   CI (99.9%): [796898.152, 821257.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2685.691 ±(99.9%) 40.370 MB/sec [Average]
[info]   (min, avg, max) = (2671.394, 2685.691, 2698.568), stdev = 10.484
[info]   CI (99.9%): [2645.320, 2726.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2719.522 ±(99.9%) 18.205 MB/sec [Average]
[info]   (min, avg, max) = (2712.025, 2719.522, 2723.255), stdev = 4.728
[info]   CI (99.9%): [2701.317, 2737.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5289.854 ±(99.9%) 64.230 B/op [Average]
[info]   (min, avg, max) = (5267.937, 5289.854, 5314.885), stdev = 16.680
[info]   CI (99.9%): [5225.624, 5354.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.229), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.243 ±(99.9%) 0.484 B/op [Average]
[info]   (min, avg, max) = (0.162, 0.243, 0.448), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson
[info] # Run progress: 27.61% complete, ETA 00:25:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336894.307 ops/s
[info] # Warmup Iteration   2: 994329.052 ops/s
[info] # Warmup Iteration   3: 999352.300 ops/s
[info] # Warmup Iteration   4: 953554.766 ops/s
[info] # Warmup Iteration   5: 1019282.735 ops/s
[info] Iteration   1: 1013258.211 ops/s
[info]                  ·gc.alloc.rate:                   1256.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2051.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1011473.177 ops/s
[info]                  ·gc.alloc.rate:                   1254.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1017234.705 ops/s
[info]                  ·gc.alloc.rate:                   1261.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1016561.801 ops/s
[info]                  ·gc.alloc.rate:                   1260.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1559.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1009038.562 ops/s
[info]                  ·gc.alloc.rate:                   1251.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2100.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson":
[info]   1013513.291 ±(99.9%) 13254.365 ops/s [Average]
[info]   (min, avg, max) = (1009038.562, 1013513.291, 1017234.705), stdev = 3442.117
[info]   CI (99.9%): [1000258.926, 1026767.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate":
[info]   1257.150 ±(99.9%) 16.420 MB/sec [Average]
[info]   (min, avg, max) = (1251.587, 1257.150, 1261.758), stdev = 4.264
[info]   CI (99.9%): [1240.729, 1273.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1268.629 ±(99.9%) 563.845 MB/sec [Average]
[info]   (min, avg, max) = (1007.243, 1268.629, 1347.044), stdev = 146.429
[info]   CI (99.9%): [704.784, 1832.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1970.158 ±(99.9%) 887.043 B/op [Average]
[info]   (min, avg, max) = (1559.293, 1970.158, 2100.878), stdev = 230.362
[info]   CI (99.9%): [1083.114, 2857.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.110, 0.161), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter
[info] # Run progress: 28.36% complete, ETA 00:25:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7043407.116 ops/s
[info] # Warmup Iteration   2: 7232367.834 ops/s
[info] # Warmup Iteration   3: 7592300.114 ops/s
[info] # Warmup Iteration   4: 7593164.440 ops/s
[info] # Warmup Iteration   5: 7589245.398 ops/s
[info] Iteration   1: 7570789.851 ops/s
[info]                  ·gc.alloc.rate:                   346.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7636141.295 ops/s
[info]                  ·gc.alloc.rate:                   349.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7603023.165 ops/s
[info]                  ·gc.alloc.rate:               347.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69.359 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 7618371.127 ops/s
[info]                  ·gc.alloc.rate:                   348.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7592320.476 ops/s
[info]                  ·gc.alloc.rate:               347.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter":
[info]   7604129.183 ±(99.9%) 95876.166 ops/s [Average]
[info]   (min, avg, max) = (7570789.851, 7604129.183, 7636141.295), stdev = 24898.736
[info]   CI (99.9%): [7508253.017, 7700005.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   347.925 ±(99.9%) 4.464 MB/sec [Average]
[info]   (min, avg, max) = (346.407, 347.925, 349.439), stdev = 1.159
[info]   CI (99.9%): [343.462, 352.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   335.377 ±(99.9%) 1.476 MB/sec [Average]
[info]   (min, avg, max) = (335.083, 335.377, 335.816), stdev = 0.383
[info]   CI (99.9%): [333.900, 336.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   69.404 ±(99.9%) 0.932 B/op [Average]
[info]   (min, avg, max) = (69.193, 69.404, 69.791), stdev = 0.242
[info]   CI (99.9%): [68.472, 70.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.298 ±(99.9%) 2.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.298, 1.428), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.297), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay
[info] # Run progress: 29.10% complete, ETA 00:24:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49183.509 ops/s
[info] # Warmup Iteration   2: 328234.385 ops/s
[info] # Warmup Iteration   3: 334257.252 ops/s
[info] # Warmup Iteration   4: 337800.876 ops/s
[info] # Warmup Iteration   5: 338831.324 ops/s
[info] Iteration   1: 339819.355 ops/s
[info]                  ·gc.alloc.rate:                   1886.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7737.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 339954.002 ops/s
[info]                  ·gc.alloc.rate:                   1887.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9344.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.675 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 331821.443 ops/s
[info]                  ·gc.alloc.rate:                   1841.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8009.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 340420.047 ops/s
[info]                  ·gc.alloc.rate:                   1889.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9396.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 340795.555 ops/s
[info]                  ·gc.alloc.rate:                   1892.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1697.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7838.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.673 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay":
[info]   338562.081 ±(99.9%) 14586.119 ops/s [Average]
[info]   (min, avg, max) = (331821.443, 338562.081, 340795.555), stdev = 3787.969
[info]   CI (99.9%): [323975.962, 353148.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate":
[info]   1879.417 ±(99.9%) 81.145 MB/sec [Average]
[info]   (min, avg, max) = (1841.933, 1879.417, 1892.010), stdev = 21.073
[info]   CI (99.9%): [1798.272, 1960.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8736.001, 8736.001, 8736.001), stdev = 0.001
[info]   CI (99.9%): [8736.001, 8736.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1821.643 ±(99.9%) 718.048 MB/sec [Average]
[info]   (min, avg, max) = (1670.750, 1821.643, 2032.534), stdev = 186.475
[info]   CI (99.9%): [1103.595, 2539.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8465.276 ±(99.9%) 3204.824 B/op [Average]
[info]   (min, avg, max) = (7737.589, 8465.276, 9396.383), stdev = 832.283
[info]   CI (99.9%): [5260.452, 11670.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.503 ±(99.9%) 0.662 B/op [Average]
[info]   (min, avg, max) = (0.289, 0.503, 0.675), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 1.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce
[info] # Run progress: 29.85% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5492.145 ops/s
[info] # Warmup Iteration   2: 6416.595 ops/s
[info] # Warmup Iteration   3: 6579.702 ops/s
[info] # Warmup Iteration   4: 6614.828 ops/s
[info] # Warmup Iteration   5: 6627.756 ops/s
[info] Iteration   1: 6640.598 ops/s
[info]                  ·gc.alloc.rate:                   1330.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              315280.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317161.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.734 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6600.932 ops/s
[info]                  ·gc.alloc.rate:                   1322.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              315280.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320146.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.925 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6512.981 ops/s
[info]                  ·gc.alloc.rate:                   1304.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              315280.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     325597.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6567.828 ops/s
[info]                  ·gc.alloc.rate:                   1315.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              315280.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323878.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.965 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6693.435 ops/s
[info]                  ·gc.alloc.rate:               1340.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          315288.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318410.009 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce":
[info]   6603.155 ±(99.9%) 264.945 ops/s [Average]
[info]   (min, avg, max) = (6512.981, 6603.155, 6693.435), stdev = 68.805
[info]   CI (99.9%): [6338.209, 6868.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1322.966 ±(99.9%) 53.025 MB/sec [Average]
[info]   (min, avg, max) = (1304.932, 1322.966, 1340.996), stdev = 13.771
[info]   CI (99.9%): [1269.940, 1375.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   315281.679 ±(99.9%) 13.884 B/op [Average]
[info]   (min, avg, max) = (315280.065, 315281.679, 315288.129), stdev = 3.606
[info]   CI (99.9%): [315267.796, 315295.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1347.011 ±(99.9%) 24.739 MB/sec [Average]
[info]   (min, avg, max) = (1338.490, 1347.011, 1354.275), stdev = 6.425
[info]   CI (99.9%): [1322.272, 1371.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   321039.067 ±(99.9%) 13828.452 B/op [Average]
[info]   (min, avg, max) = (317161.877, 321039.067, 325597.736), stdev = 3591.205
[info]   CI (99.9%): [307210.615, 334867.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.931 ±(99.9%) 30.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.931, 19.734), stdev = 7.812
[info]   CI (99.9%): [≈ 0, 40.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson
[info] # Run progress: 30.60% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12646.574 ops/s
[info] # Warmup Iteration   2: 18249.405 ops/s
[info] # Warmup Iteration   3: 18126.867 ops/s
[info] # Warmup Iteration   4: 18146.788 ops/s
[info] # Warmup Iteration   5: 18287.720 ops/s
[info] Iteration   1: 18291.587 ops/s
[info]                  ·gc.alloc.rate:                   851.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              73280.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84854.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.373 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18230.711 ops/s
[info]                  ·gc.alloc.rate:                   848.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              73260.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56985.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 18276.484 ops/s
[info]                  ·gc.alloc.rate:                   850.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              73248.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85607.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18297.689 ops/s
[info]                  ·gc.alloc.rate:               851.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          73248.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57207.034 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 18223.844 ops/s
[info]                  ·gc.alloc.rate:                   848.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              73248.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86465.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.596 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson":
[info]   18264.063 ±(99.9%) 133.007 ops/s [Average]
[info]   (min, avg, max) = (18223.844, 18264.063, 18297.689), stdev = 34.542
[info]   CI (99.9%): [18131.056, 18397.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   850.237 ±(99.9%) 6.206 MB/sec [Average]
[info]   (min, avg, max) = (848.375, 850.237, 851.768), stdev = 1.612
[info]   CI (99.9%): [844.031, 856.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   73256.963 ±(99.9%) 53.976 B/op [Average]
[info]   (min, avg, max) = (73248.024, 73256.963, 73280.032), stdev = 14.017
[info]   CI (99.9%): [73202.987, 73310.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   861.462 ±(99.9%) 699.174 MB/sec [Average]
[info]   (min, avg, max) = (660.162, 861.462, 1001.465), stdev = 181.573
[info]   CI (99.9%): [162.288, 1560.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   74224.269 ±(99.9%) 60247.289 B/op [Average]
[info]   (min, avg, max) = (56985.951, 74224.269, 86465.668), stdev = 15646.030
[info]   CI (99.9%): [13976.980, 134471.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.101 ±(99.9%) 18.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.101, 10.782), stdev = 4.680
[info]   CI (99.9%): [≈ 0, 24.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.140
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter
[info] # Run progress: 31.34% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31101.654 ops/s
[info] # Warmup Iteration   2: 31999.294 ops/s
[info] # Warmup Iteration   3: 30204.285 ops/s
[info] # Warmup Iteration   4: 32002.635 ops/s
[info] # Warmup Iteration   5: 31959.085 ops/s
[info] Iteration   1: 31875.546 ops/s
[info]                  ·gc.alloc.rate:                   83.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12630.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.446 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 31922.055 ops/s
[info]                  ·gc.alloc.rate:      83.735 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 31959.081 ops/s
[info]                  ·gc.alloc.rate:      83.833 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 31580.416 ops/s
[info]                  ·gc.alloc.rate:               82.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          4128.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12747.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 31772.183 ops/s
[info]                  ·gc.alloc.rate:      83.338 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter":
[info]   31821.856 ±(99.9%) 585.608 ops/s [Average]
[info]   (min, avg, max) = (31580.416, 31821.856, 31959.081), stdev = 152.081
[info]   CI (99.9%): [31236.248, 32407.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   83.475 ±(99.9%) 1.507 MB/sec [Average]
[info]   (min, avg, max) = (82.859, 83.475, 83.833), stdev = 0.391
[info]   CI (99.9%): [81.968, 84.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   4128.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (4128.014, 4128.014, 4128.015), stdev = 0.001
[info]   CI (99.9%): [4128.012, 4128.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   102.339 ±(99.9%) 539.604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.339, 255.878), stdev = 140.133
[info]   CI (99.9%): [≈ 0, 641.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   5075.623 ±(99.9%) 26762.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5075.623, 12747.837), stdev = 6950.207
[info]   CI (99.9%): [≈ 0, 31838.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.427 ±(99.9%) 3.678 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.427, 2.136), stdev = 0.955
[info]   CI (99.9%): [≈ 0, 4.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   21.089 ±(99.9%) 181.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.089, 105.446), stdev = 47.157
[info]   CI (99.9%): [≈ 0, 202.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay
[info] # Run progress: 32.09% complete, ETA 00:23:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3713.274 ops/s
[info] # Warmup Iteration   2: 6154.471 ops/s
[info] # Warmup Iteration   3: 6380.342 ops/s
[info] # Warmup Iteration   4: 6385.406 ops/s
[info] # Warmup Iteration   5: 6388.380 ops/s
[info] Iteration   1: 6419.605 ops/s
[info]                  ·gc.alloc.rate:               1499.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          367504.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 327098.229 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6322.269 ops/s
[info]                  ·gc.alloc.rate:                   1476.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     417507.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.452 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6341.751 ops/s
[info]                  ·gc.alloc.rate:                   1480.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     334344.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6378.361 ops/s
[info]                  ·gc.alloc.rate:                   1489.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     333391.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.544 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6323.872 ops/s
[info]                  ·gc.alloc.rate:                   1476.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     421187.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.799 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay":
[info]   6357.171 ±(99.9%) 160.065 ops/s [Average]
[info]   (min, avg, max) = (6322.269, 6357.171, 6419.605), stdev = 41.568
[info]   CI (99.9%): [6197.107, 6517.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   1484.646 ±(99.9%) 37.272 MB/sec [Average]
[info]   (min, avg, max) = (1476.741, 1484.646, 1499.291), stdev = 9.679
[info]   CI (99.9%): [1447.374, 1521.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   367504.069 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (367504.068, 367504.069, 367504.072), stdev = 0.002
[info]   CI (99.9%): [367504.062, 367504.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1480.634 ±(99.9%) 719.489 MB/sec [Average]
[info]   (min, avg, max) = (1334.449, 1480.634, 1692.457), stdev = 186.849
[info]   CI (99.9%): [761.145, 2200.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   366705.621 ±(99.9%) 185420.631 B/op [Average]
[info]   (min, avg, max) = (327098.229, 366705.621, 421187.420), stdev = 48153.149
[info]   CI (99.9%): [181284.990, 552126.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.208), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   23.792 ±(99.9%) 86.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.792, 51.799), stdev = 22.471
[info]   CI (99.9%): [≈ 0, 110.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce
[info] # Run progress: 32.84% complete, ETA 00:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14034.151 ops/s
[info] # Warmup Iteration   2: 16520.949 ops/s
[info] # Warmup Iteration   3: 16464.000 ops/s
[info] # Warmup Iteration   4: 16432.672 ops/s
[info] # Warmup Iteration   5: 17563.072 ops/s
[info] Iteration   1: 17585.237 ops/s
[info]                  ·gc.alloc.rate:                   578.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              51808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59201.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16694.937 ops/s
[info]                  ·gc.alloc.rate:               579.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          54606.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31207.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 15662.518 ops/s
[info]                  ·gc.alloc.rate:                   596.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              59936.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66598.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16068.202 ops/s
[info]                  ·gc.alloc.rate:               611.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          59936.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65046.375 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 16171.266 ops/s
[info]                  ·gc.alloc.rate:                   615.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              59936.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64794.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce":
[info]   16436.432 ±(99.9%) 2850.145 ops/s [Average]
[info]   (min, avg, max) = (15662.518, 16436.432, 17585.237), stdev = 740.174
[info]   CI (99.9%): [13586.287, 19286.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   596.563 ±(99.9%) 67.125 MB/sec [Average]
[info]   (min, avg, max) = (578.932, 596.563, 615.892), stdev = 17.432
[info]   CI (99.9%): [529.437, 663.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   57244.486 ±(99.9%) 14694.152 B/op [Average]
[info]   (min, avg, max) = (51808.025, 57244.486, 59936.028), stdev = 3816.025
[info]   CI (99.9%): [42550.334, 71938.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   597.118 ±(99.9%) 572.590 MB/sec [Average]
[info]   (min, avg, max) = (331.130, 597.118, 665.817), stdev = 148.700
[info]   CI (99.9%): [24.528, 1169.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   57369.795 ±(99.9%) 57341.699 B/op [Average]
[info]   (min, avg, max) = (31207.993, 57369.795, 66598.565), stdev = 14891.457
[info]   CI (99.9%): [28.096, 114711.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.614 ±(99.9%) 6.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.614, 4.183), stdev = 1.735
[info]   CI (99.9%): [≈ 0, 8.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson
[info] # Run progress: 33.58% complete, ETA 00:23:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15231.184 ops/s
[info] # Warmup Iteration   2: 20086.983 ops/s
[info] # Warmup Iteration   3: 20312.912 ops/s
[info] # Warmup Iteration   4: 20473.649 ops/s
[info] # Warmup Iteration   5: 20502.378 ops/s
[info] Iteration   1: 20692.864 ops/s
[info]                  ·gc.alloc.rate:                   403.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              30680.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24900.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.583 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 20679.143 ops/s
[info]                  ·gc.alloc.rate:               403.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          30680.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24943.161 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 20565.865 ops/s
[info]                  ·gc.alloc.rate:                   400.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              30679.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25080.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20601.348 ops/s
[info]                  ·gc.alloc.rate:                   401.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              30680.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50075.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20550.601 ops/s
[info]                  ·gc.alloc.rate:                   400.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              30679.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25149.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.594 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson":
[info]   20617.964 ±(99.9%) 250.151 ops/s [Average]
[info]   (min, avg, max) = (20550.601, 20617.964, 20692.864), stdev = 64.964
[info]   CI (99.9%): [20367.813, 20868.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   401.980 ±(99.9%) 4.884 MB/sec [Average]
[info]   (min, avg, max) = (400.726, 401.980, 403.413), stdev = 1.268
[info]   CI (99.9%): [397.096, 406.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   30680.023 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (30679.939, 30680.023, 30680.104), stdev = 0.082
[info]   CI (99.9%): [30679.707, 30680.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   393.398 ±(99.9%) 564.212 MB/sec [Average]
[info]   (min, avg, max) = (327.424, 393.398, 655.507), stdev = 146.524
[info]   CI (99.9%): [≈ 0, 957.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   30029.793 ±(99.9%) 43150.912 B/op [Average]
[info]   (min, avg, max) = (24900.957, 30029.793, 50075.165), stdev = 11206.155
[info]   CI (99.9%): [≈ 0, 73180.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.909 ±(99.9%) 5.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.909, 3.186), stdev = 1.332
[info]   CI (99.9%): [≈ 0, 7.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter
[info] # Run progress: 34.33% complete, ETA 00:22:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22682.072 ops/s
[info] # Warmup Iteration   2: 23748.971 ops/s
[info] # Warmup Iteration   3: 23572.718 ops/s
[info] # Warmup Iteration   4: 23584.167 ops/s
[info] # Warmup Iteration   5: 23550.730 ops/s
[info] Iteration   1: 23886.451 ops/s
[info]                  ·gc.alloc.rate:                   380.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              25088.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21966.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 23996.081 ops/s
[info]                  ·gc.alloc.rate:               382.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          25088.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21843.513 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 23940.504 ops/s
[info]                  ·gc.alloc.rate:               381.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          25088.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21895.511 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 23817.837 ops/s
[info]                  ·gc.alloc.rate:                   379.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              25088.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22008.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 23681.264 ops/s
[info]                  ·gc.alloc.rate:                   377.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              25088.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22134.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter":
[info]   23864.427 ±(99.9%) 468.944 ops/s [Average]
[info]   (min, avg, max) = (23681.264, 23864.427, 23996.081), stdev = 121.783
[info]   CI (99.9%): [23395.483, 24333.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   380.462 ±(99.9%) 7.428 MB/sec [Average]
[info]   (min, avg, max) = (377.593, 380.462, 382.592), stdev = 1.929
[info]   CI (99.9%): [373.034, 387.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   25088.019 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (25088.018, 25088.019, 25088.021), stdev = 0.001
[info]   CI (99.9%): [25088.014, 25088.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   333.166 ±(99.9%) 0.503 MB/sec [Average]
[info]   (min, avg, max) = (333.087, 333.166, 333.395), stdev = 0.131
[info]   CI (99.9%): [332.662, 333.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   21969.709 ±(99.9%) 431.602 B/op [Average]
[info]   (min, avg, max) = (21843.513, 21969.709, 22134.932), stdev = 112.086
[info]   CI (99.9%): [21538.107, 22401.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1.377 ±(99.9%) 5.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.377, 2.767), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 6.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 35.07% complete, ETA 00:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23081.784 ops/s
[info] # Warmup Iteration   2: 24381.459 ops/s
[info] # Warmup Iteration   3: 24323.707 ops/s
[info] # Warmup Iteration   4: 24425.546 ops/s
[info] # Warmup Iteration   5: 24370.167 ops/s
[info] Iteration   1: 24428.704 ops/s
[info]                  ·gc.alloc.rate:      305.008 MB/sec
[info]                  ·gc.alloc.rate.norm: 19648.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 24406.065 ops/s
[info]                  ·gc.alloc.rate:                   304.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              19648.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21498.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24096.345 ops/s
[info]                  ·gc.alloc.rate:                   300.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              19648.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21775.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.360 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24329.956 ops/s
[info]                  ·gc.alloc.rate:               303.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          19648.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21545.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 24369.863 ops/s
[info]                  ·gc.alloc.rate:                   304.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              19648.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21508.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc":
[info]   24326.186 ±(99.9%) 515.323 ops/s [Average]
[info]   (min, avg, max) = (24096.345, 24326.186, 24428.704), stdev = 133.828
[info]   CI (99.9%): [23810.864, 24841.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   303.716 ±(99.9%) 6.453 MB/sec [Average]
[info]   (min, avg, max) = (300.841, 303.716, 305.008), stdev = 1.676
[info]   CI (99.9%): [297.264, 310.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   19648.018 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19648.018, 19648.018, 19648.018), stdev = 0.001
[info]   CI (99.9%): [19648.017, 19648.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   266.597 ±(99.9%) 573.871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.597, 333.416), stdev = 149.032
[info]   CI (99.9%): [≈ 0, 840.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   17265.506 ±(99.9%) 37167.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17265.506, 21775.540), stdev = 9652.375
[info]   CI (99.9%): [≈ 0, 54433.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.336 ±(99.9%) 2.668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.336, 1.574), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 3.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   21.641 ±(99.9%) 172.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.641, 101.466), stdev = 44.678
[info]   CI (99.9%): [≈ 0, 193.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 35.82% complete, ETA 00:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5582.984 ops/s
[info] # Warmup Iteration   2: 7833.536 ops/s
[info] # Warmup Iteration   3: 7860.767 ops/s
[info] # Warmup Iteration   4: 8140.478 ops/s
[info] # Warmup Iteration   5: 8130.920 ops/s
[info] Iteration   1: 8184.552 ops/s
[info]                  ·gc.alloc.rate:                   2106.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     388973.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.394 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8111.480 ops/s
[info]                  ·gc.alloc.rate:                   2088.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459672.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.718 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8083.305 ops/s
[info]                  ·gc.alloc.rate:                   2080.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              405002.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     396295.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.262 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8024.289 ops/s
[info]                  ·gc.alloc.rate:                   2065.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              405040.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399781.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.841 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8077.342 ops/s
[info]                  ·gc.alloc.rate:                   2078.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              405040.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     397158.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.928 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8096.194 ±(99.9%) 225.621 ops/s [Average]
[info]   (min, avg, max) = (8024.289, 8096.194, 8184.552), stdev = 58.593
[info]   CI (99.9%): [7870.573, 8321.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2083.864 ±(99.9%) 57.814 MB/sec [Average]
[info]   (min, avg, max) = (2065.292, 2083.864, 2106.320), stdev = 15.014
[info]   CI (99.9%): [2026.050, 2141.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405016.568 ±(99.9%) 82.761 B/op [Average]
[info]   (min, avg, max) = (405000.053, 405016.568, 405040.117), stdev = 21.493
[info]   CI (99.9%): [404933.806, 405099.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2101.170 ±(99.9%) 579.187 MB/sec [Average]
[info]   (min, avg, max) = (2022.969, 2101.170, 2369.991), stdev = 150.413
[info]   CI (99.9%): [1521.983, 2680.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   408376.288 ±(99.9%) 111493.552 B/op [Average]
[info]   (min, avg, max) = (388973.411, 408376.288, 459672.767), stdev = 28954.521
[info]   CI (99.9%): [296882.736, 519869.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.131 ±(99.9%) 0.349 MB/sec [Average]
[info]   (min, avg, max) = (0.050, 0.131, 0.275), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25.429 ±(99.9%) 68.388 B/op [Average]
[info]   (min, avg, max) = (9.718, 25.429, 53.841), stdev = 17.760
[info]   CI (99.9%): [≈ 0, 93.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson
[info] # Run progress: 36.57% complete, ETA 00:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7509.562 ops/s
[info] # Warmup Iteration   2: 13439.819 ops/s
[info] # Warmup Iteration   3: 13527.232 ops/s
[info] # Warmup Iteration   4: 13515.146 ops/s
[info] # Warmup Iteration   5: 13530.825 ops/s
[info] Iteration   1: 13625.005 ops/s
[info]                  ·gc.alloc.rate:                   367.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37473.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13583.816 ops/s
[info]                  ·gc.alloc.rate:               366.208 MB/sec
[info]                  ·gc.alloc.rate.norm:          42424.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37584.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 13616.400 ops/s
[info]                  ·gc.alloc.rate:                   367.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74991.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13539.820 ops/s
[info]                  ·gc.alloc.rate:                   365.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37745.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 13622.582 ops/s
[info]                  ·gc.alloc.rate:               367.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          42424.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37515.103 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson":
[info]   13597.525 ±(99.9%) 139.597 ops/s [Average]
[info]   (min, avg, max) = (13539.820, 13597.525, 13625.005), stdev = 36.253
[info]   CI (99.9%): [13457.927, 13737.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   366.569 ±(99.9%) 3.749 MB/sec [Average]
[info]   (min, avg, max) = (365.017, 366.569, 367.304), stdev = 0.974
[info]   CI (99.9%): [362.820, 370.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   42424.035 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (42424.032, 42424.035, 42424.043), stdev = 0.005
[info]   CI (99.9%): [42424.015, 42424.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   389.448 ±(99.9%) 558.371 MB/sec [Average]
[info]   (min, avg, max) = (324.430, 389.448, 648.845), stdev = 145.007
[info]   CI (99.9%): [≈ 0, 947.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   45061.995 ±(99.9%) 64427.343 B/op [Average]
[info]   (min, avg, max) = (37473.876, 45061.995, 74991.778), stdev = 16731.576
[info]   CI (99.9%): [≈ 0, 109489.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.516 ±(99.9%) 4.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.516, 2.496), stdev = 1.107
[info]   CI (99.9%): [≈ 0, 4.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   59.600 ±(99.9%) 492.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.600, 288.336), stdev = 127.901
[info]   CI (99.9%): [≈ 0, 552.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter
[info] # Run progress: 37.31% complete, ETA 00:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19726.741 ops/s
[info] # Warmup Iteration   2: 24151.156 ops/s
[info] # Warmup Iteration   3: 23738.074 ops/s
[info] # Warmup Iteration   4: 24322.892 ops/s
[info] # Warmup Iteration   5: 24179.680 ops/s
[info] Iteration   1: 24307.462 ops/s
[info]                  ·gc.alloc.rate:               454.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21522.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 23987.461 ops/s
[info]                  ·gc.alloc.rate:               448.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21810.730 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 24214.364 ops/s
[info]                  ·gc.alloc.rate:                   453.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43207.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24336.787 ops/s
[info]                  ·gc.alloc.rate:                   455.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21517.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24204.592 ops/s
[info]                  ·gc.alloc.rate:                   452.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21633.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.353 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter":
[info]   24210.133 ±(99.9%) 527.783 ops/s [Average]
[info]   (min, avg, max) = (23987.461, 24210.133, 24336.787), stdev = 137.064
[info]   CI (99.9%): [23682.350, 24737.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   453.048 ±(99.9%) 9.875 MB/sec [Average]
[info]   (min, avg, max) = (448.871, 453.048, 455.415), stdev = 2.565
[info]   CI (99.9%): [443.173, 462.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   29448.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (29448.018, 29448.018, 29448.019), stdev = 0.001
[info]   CI (99.9%): [29448.016, 29448.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   399.063 ±(99.9%) 572.260 MB/sec [Average]
[info]   (min, avg, max) = (332.434, 399.063, 664.912), stdev = 148.614
[info]   CI (99.9%): [≈ 0, 971.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   25938.349 ±(99.9%) 37175.360 B/op [Average]
[info]   (min, avg, max) = (21517.757, 25938.349, 43207.219), stdev = 9654.323
[info]   CI (99.9%): [≈ 0, 63113.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1.350 ±(99.9%) 5.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.350, 2.706), stdev = 1.350
[info]   CI (99.9%): [≈ 0, 6.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay
[info] # Run progress: 38.06% complete, ETA 00:21:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1034.331 ops/s
[info] # Warmup Iteration   2: 2495.231 ops/s
[info] # Warmup Iteration   3: 2562.363 ops/s
[info] # Warmup Iteration   4: 2612.581 ops/s
[info] # Warmup Iteration   5: 2617.753 ops/s
[info] Iteration   1: 2617.100 ops/s
[info]                  ·gc.alloc.rate:                   1588.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999111.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.516 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2581.122 ops/s
[info]                  ·gc.alloc.rate:                   1566.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1019945.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.764 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2593.048 ops/s
[info]                  ·gc.alloc.rate:                   1573.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     816547.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.161 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2610.072 ops/s
[info]                  ·gc.alloc.rate:                   1584.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1017452.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.200 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2535.761 ops/s
[info]                  ·gc.alloc.rate:               1539.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          955216.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1692.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1050022.597 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay":
[info]   2587.420 ±(99.9%) 123.791 ops/s [Average]
[info]   (min, avg, max) = (2535.761, 2587.420, 2617.100), stdev = 32.148
[info]   CI (99.9%): [2463.630, 2711.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1570.622 ±(99.9%) 74.905 MB/sec [Average]
[info]   (min, avg, max) = (1539.376, 1570.622, 1588.549), stdev = 19.453
[info]   CI (99.9%): [1495.717, 1645.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   955216.169 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (955216.165, 955216.169, 955216.180), stdev = 0.006
[info]   CI (99.9%): [955216.146, 955216.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1611.959 ±(99.9%) 575.475 MB/sec [Average]
[info]   (min, avg, max) = (1345.498, 1611.959, 1692.161), stdev = 149.449
[info]   CI (99.9%): [1036.484, 2187.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   980615.642 ±(99.9%) 360100.006 B/op [Average]
[info]   (min, avg, max) = (816547.232, 980615.642, 1050022.597), stdev = 93516.828
[info]   CI (99.9%): [620515.636, 1340715.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   35.328 ±(99.9%) 105.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.328, 63.161), stdev = 27.398
[info]   CI (99.9%): [≈ 0, 140.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 38.81% complete, ETA 00:21:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6581.943 ops/s
[info] # Warmup Iteration   2: 8522.739 ops/s
[info] # Warmup Iteration   3: 8650.672 ops/s
[info] # Warmup Iteration   4: 8743.265 ops/s
[info] # Warmup Iteration   5: 8709.938 ops/s
[info] Iteration   1: 8592.809 ops/s
[info]                  ·gc.alloc.rate:                   1978.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370631.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.187 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8650.489 ops/s
[info]                  ·gc.alloc.rate:                   1991.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307738.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.295 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8679.447 ops/s
[info]                  ·gc.alloc.rate:                   1998.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              362303.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368909.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.774 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8607.902 ops/s
[info]                  ·gc.alloc.rate:                   1981.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              362320.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372664.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.283 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8644.068 ops/s
[info]                  ·gc.alloc.rate:                   1990.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              362320.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371234.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.849 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8634.943 ±(99.9%) 133.558 ops/s [Average]
[info]   (min, avg, max) = (8592.809, 8634.943, 8679.447), stdev = 34.685
[info]   CI (99.9%): [8501.385, 8768.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1988.026 ±(99.9%) 30.957 MB/sec [Average]
[info]   (min, avg, max) = (1978.117, 1988.026, 1998.168), stdev = 8.039
[info]   CI (99.9%): [1957.069, 2018.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362297.558 ±(99.9%) 93.318 B/op [Average]
[info]   (min, avg, max) = (362272.050, 362297.558, 362320.050), stdev = 24.234
[info]   CI (99.9%): [362204.240, 362390.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1965.582 ±(99.9%) 589.309 MB/sec [Average]
[info]   (min, avg, max) = (1692.033, 1965.582, 2039.090), stdev = 153.042
[info]   CI (99.9%): [1376.273, 2554.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   358235.598 ±(99.9%) 108823.018 B/op [Average]
[info]   (min, avg, max) = (307738.212, 358235.598, 372664.641), stdev = 28260.992
[info]   CI (99.9%): [249412.580, 467058.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.105 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.105, 0.167), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.078 ±(99.9%) 43.443 B/op [Average]
[info]   (min, avg, max) = (3.774, 19.078, 30.295), stdev = 11.282
[info]   CI (99.9%): [≈ 0, 62.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson
[info] # Run progress: 39.55% complete, ETA 00:21:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27185.872 ops/s
[info] # Warmup Iteration   2: 43365.434 ops/s
[info] # Warmup Iteration   3: 42844.725 ops/s
[info] # Warmup Iteration   4: 43444.782 ops/s
[info] # Warmup Iteration   5: 43259.930 ops/s
[info] Iteration   1: 43648.912 ops/s
[info]                  ·gc.alloc.rate:                   632.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23442.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42154.240 ops/s
[info]                  ·gc.alloc.rate:                   611.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24347.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43278.900 ops/s
[info]                  ·gc.alloc.rate:                   627.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23762.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43501.465 ops/s
[info]                  ·gc.alloc.rate:                   630.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23737.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 43269.487 ops/s
[info]                  ·gc.alloc.rate:               627.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          22808.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23930.258 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson":
[info]   43170.601 ±(99.9%) 2272.165 ops/s [Average]
[info]   (min, avg, max) = (42154.240, 43170.601, 43648.912), stdev = 590.074
[info]   CI (99.9%): [40898.435, 45442.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   625.784 ±(99.9%) 32.786 MB/sec [Average]
[info]   (min, avg, max) = (611.105, 625.784, 632.616), stdev = 8.515
[info]   CI (99.9%): [592.998, 658.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   22807.887 ±(99.9%) 0.401 B/op [Average]
[info]   (min, avg, max) = (22807.753, 22807.887, 22808.032), stdev = 0.104
[info]   CI (99.9%): [22807.486, 22808.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   654.117 ±(99.9%) 12.243 MB/sec [Average]
[info]   (min, avg, max) = (650.205, 654.117, 658.217), stdev = 3.179
[info]   CI (99.9%): [641.875, 666.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   23843.942 ±(99.9%) 1277.531 B/op [Average]
[info]   (min, avg, max) = (23442.064, 23843.942, 24347.316), stdev = 331.771
[info]   CI (99.9%): [22566.411, 25121.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.586 ±(99.9%) 6.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.586, 3.886), stdev = 1.587
[info]   CI (99.9%): [≈ 0, 8.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter
[info] # Run progress: 40.30% complete, ETA 00:20:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81084.539 ops/s
[info] # Warmup Iteration   2: 89955.338 ops/s
[info] # Warmup Iteration   3: 89539.882 ops/s
[info] # Warmup Iteration   4: 89749.675 ops/s
[info] # Warmup Iteration   5: 90012.362 ops/s
[info] Iteration   1: 89938.205 ops/s
[info]                  ·gc.alloc.rate:                   676.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11633.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 89149.888 ops/s
[info]                  ·gc.alloc.rate:                   670.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11741.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 89711.958 ops/s
[info]                  ·gc.alloc.rate:                   674.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11685.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 89883.478 ops/s
[info]                  ·gc.alloc.rate:                   675.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11687.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 88571.825 ops/s
[info]                  ·gc.alloc.rate:                   665.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11883.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter":
[info]   89451.071 ±(99.9%) 2242.087 ops/s [Average]
[info]   (min, avg, max) = (88571.825, 89451.071, 89938.205), stdev = 582.263
[info]   CI (99.9%): [87208.983, 91693.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   672.528 ±(99.9%) 16.870 MB/sec [Average]
[info]   (min, avg, max) = (665.909, 672.528, 676.201), stdev = 4.381
[info]   CI (99.9%): [655.658, 689.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   11832.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.005, 11832.005), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   666.491 ±(99.9%) 6.383 MB/sec [Average]
[info]   (min, avg, max) = (664.841, 666.491, 668.806), stdev = 1.658
[info]   CI (99.9%): [660.109, 672.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   11726.281 ±(99.9%) 369.132 B/op [Average]
[info]   (min, avg, max) = (11633.230, 11726.281, 11883.490), stdev = 95.863
[info]   CI (99.9%): [11357.149, 12095.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.732 ±(99.9%) 1.406 B/op [Average]
[info]   (min, avg, max) = (0.365, 0.732, 1.102), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 2.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 41.04% complete, ETA 00:20:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76124.524 ops/s
[info] # Warmup Iteration   2: 81780.286 ops/s
[info] # Warmup Iteration   3: 82044.240 ops/s
[info] # Warmup Iteration   4: 82170.496 ops/s
[info] # Warmup Iteration   5: 82041.089 ops/s
[info] Iteration   1: 82168.170 ops/s
[info]                  ·gc.alloc.rate:      1.253 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 81222.541 ops/s
[info]                  ·gc.alloc.rate:      1.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 80731.184 ops/s
[info]                  ·gc.alloc.rate:      1.232 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 80592.894 ops/s
[info]                  ·gc.alloc.rate:      1.229 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 82085.306 ops/s
[info]                  ·gc.alloc.rate:      1.252 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc":
[info]   81360.019 ±(99.9%) 2843.985 ops/s [Average]
[info]   (min, avg, max) = (80592.894, 81360.019, 82168.170), stdev = 738.574
[info]   CI (99.9%): [78516.034, 84204.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1.241 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (1.229, 1.241, 1.253), stdev = 0.011
[info]   CI (99.9%): [1.198, 1.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay
[info] # Run progress: 41.79% complete, ETA 00:20:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2910.804 ops/s
[info] # Warmup Iteration   2: 5978.185 ops/s
[info] # Warmup Iteration   3: 6096.768 ops/s
[info] # Warmup Iteration   4: 6008.716 ops/s
[info] # Warmup Iteration   5: 6062.958 ops/s
[info] Iteration   1: 6132.517 ops/s
[info]                  ·gc.alloc.rate:                   1832.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429157.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6087.458 ops/s
[info]                  ·gc.alloc.rate:                   1819.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     521704.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.526 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6130.920 ops/s
[info]                  ·gc.alloc.rate:                   1832.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              470336.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433415.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.057 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6125.870 ops/s
[info]                  ·gc.alloc.rate:                   1830.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435038.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6091.858 ops/s
[info]                  ·gc.alloc.rate:               1820.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          470336.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2035.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 525836.603 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay":
[info]   6113.725 ±(99.9%) 85.334 ops/s [Average]
[info]   (min, avg, max) = (6087.458, 6113.725, 6132.517), stdev = 22.161
[info]   CI (99.9%): [6028.391, 6199.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate":
[info]   1827.299 ±(99.9%) 25.020 MB/sec [Average]
[info]   (min, avg, max) = (1819.634, 1827.299, 1832.863), stdev = 6.498
[info]   CI (99.9%): [1802.279, 1852.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   470335.836 ±(99.9%) 1.824 B/op [Average]
[info]   (min, avg, max) = (470335.137, 470335.836, 470336.414), stdev = 0.474
[info]   CI (99.9%): [470334.012, 470337.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1821.680 ±(99.9%) 722.907 MB/sec [Average]
[info]   (min, avg, max) = (1672.393, 1821.680, 2035.727), stdev = 187.737
[info]   CI (99.9%): [1098.773, 2544.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   469030.600 ±(99.9%) 192679.085 B/op [Average]
[info]   (min, avg, max) = (429157.165, 469030.600, 525836.603), stdev = 50038.147
[info]   CI (99.9%): [276351.515, 661709.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   20.340 ±(99.9%) 51.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.340, 32.089), stdev = 13.314
[info]   CI (99.9%): [≈ 0, 71.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter
[info] # Run progress: 42.54% complete, ETA 00:20:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4485446.020 ops/s
[info] # Warmup Iteration   2: 4943664.132 ops/s
[info] # Warmup Iteration   3: 5093804.513 ops/s
[info] # Warmup Iteration   4: 5106452.914 ops/s
[info] # Warmup Iteration   5: 5110507.991 ops/s
[info] Iteration   1: 5126758.877 ops/s
[info]                  ·gc.alloc.rate:                   1537.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5108237.281 ops/s
[info]                  ·gc.alloc.rate:                   1532.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5107388.674 ops/s
[info]                  ·gc.alloc.rate:                   1531.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     521.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5119017.347 ops/s
[info]                  ·gc.alloc.rate:                   1535.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5106694.321 ops/s
[info]                  ·gc.alloc.rate:                   1531.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     523.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter":
[info]   5113619.300 ±(99.9%) 34308.004 ops/s [Average]
[info]   (min, avg, max) = (5106694.321, 5113619.300, 5126758.877), stdev = 8909.680
[info]   CI (99.9%): [5079311.296, 5147927.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1533.732 ±(99.9%) 10.267 MB/sec [Average]
[info]   (min, avg, max) = (1531.700, 1533.732, 1537.640), stdev = 2.666
[info]   CI (99.9%): [1523.465, 1543.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1555.976 ±(99.9%) 713.098 MB/sec [Average]
[info]   (min, avg, max) = (1350.319, 1555.976, 1698.095), stdev = 185.189
[info]   CI (99.9%): [842.878, 2269.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   478.849 ±(99.9%) 219.569 B/op [Average]
[info]   (min, avg, max) = (416.003, 478.849, 523.275), stdev = 57.021
[info]   CI (99.9%): [259.279, 698.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.026, 0.032), stdev = 0.005
[info]   CI (99.9%): [0.008, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay
[info] # Run progress: 43.28% complete, ETA 00:19:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140576.304 ops/s
[info] # Warmup Iteration   2: 361106.263 ops/s
[info] # Warmup Iteration   3: 358831.517 ops/s
[info] # Warmup Iteration   4: 365384.518 ops/s
[info] # Warmup Iteration   5: 362118.927 ops/s
[info] Iteration   1: 364071.388 ops/s
[info]                  ·gc.alloc.rate:                   1956.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8695.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 365291.862 ops/s
[info]                  ·gc.alloc.rate:                   1962.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8716.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.717 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 360361.178 ops/s
[info]                  ·gc.alloc.rate:                   1936.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7386.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 365304.531 ops/s
[info]                  ·gc.alloc.rate:                   1963.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8767.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 363855.221 ops/s
[info]                  ·gc.alloc.rate:                   1955.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8816.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay":
[info]   363776.836 ±(99.9%) 7794.292 ops/s [Average]
[info]   (min, avg, max) = (360361.178, 363776.836, 365304.531), stdev = 2024.153
[info]   CI (99.9%): [355982.544, 371571.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1954.859 ±(99.9%) 42.253 MB/sec [Average]
[info]   (min, avg, max) = (1936.304, 1954.859, 1963.316), stdev = 10.973
[info]   CI (99.9%): [1912.606, 1997.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8456.001, 8456.001, 8456.001), stdev = 0.001
[info]   CI (99.9%): [8456.001, 8456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1960.204 ±(99.9%) 579.989 MB/sec [Average]
[info]   (min, avg, max) = (1691.467, 1960.204, 2039.057), stdev = 150.621
[info]   CI (99.9%): [1380.215, 2540.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8476.548 ±(99.9%) 2352.875 B/op [Average]
[info]   (min, avg, max) = (7386.776, 8476.548, 8816.914), stdev = 611.034
[info]   CI (99.9%): [6123.674, 10829.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.167), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.360 ±(99.9%) 0.807 B/op [Average]
[info]   (min, avg, max) = (0.182, 0.360, 0.717), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 1.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter
[info] # Run progress: 44.03% complete, ETA 00:19:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3010112.143 ops/s
[info] # Warmup Iteration   2: 3223048.804 ops/s
[info] # Warmup Iteration   3: 3350855.933 ops/s
[info] # Warmup Iteration   4: 3353830.849 ops/s
[info] # Warmup Iteration   5: 3364355.364 ops/s
[info] Iteration   1: 3360254.620 ops/s
[info]                  ·gc.alloc.rate:                   495.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 3372778.945 ops/s
[info]                  ·gc.alloc.rate:               497.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3350810.164 ops/s
[info]                  ·gc.alloc.rate:                   493.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3367445.341 ops/s
[info]                  ·gc.alloc.rate:               496.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.667 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3342648.849 ops/s
[info]                  ·gc.alloc.rate:                   492.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter":
[info]   3358787.584 ±(99.9%) 47041.141 ops/s [Average]
[info]   (min, avg, max) = (3342648.849, 3358787.584, 3372778.945), stdev = 12216.435
[info]   CI (99.9%): [3311746.443, 3405828.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   495.133 ±(99.9%) 6.926 MB/sec [Average]
[info]   (min, avg, max) = (492.742, 495.133, 497.192), stdev = 1.799
[info]   CI (99.9%): [488.207, 502.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   532.520 ±(99.9%) 702.261 MB/sec [Average]
[info]   (min, avg, max) = (332.411, 532.520, 666.805), stdev = 182.375
[info]   CI (99.9%): [≈ 0, 1234.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   249.730 ±(99.9%) 331.644 B/op [Average]
[info]   (min, avg, max) = (155.110, 249.730, 313.955), stdev = 86.127
[info]   CI (99.9%): [≈ 0, 581.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay
[info] # Run progress: 44.78% complete, ETA 00:19:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99449.557 ops/s
[info] # Warmup Iteration   2: 333686.088 ops/s
[info] # Warmup Iteration   3: 352933.522 ops/s
[info] # Warmup Iteration   4: 352750.913 ops/s
[info] # Warmup Iteration   5: 356430.411 ops/s
[info] Iteration   1: 355130.787 ops/s
[info]                  ·gc.alloc.rate:                   1386.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5864.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 355455.823 ops/s
[info]                  ·gc.alloc.rate:                   1387.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5898.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.645 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 356113.663 ops/s
[info]                  ·gc.alloc.rate:                   1390.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5918.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 355643.598 ops/s
[info]                  ·gc.alloc.rate:                   1388.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7446.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 357516.422 ops/s
[info]                  ·gc.alloc.rate:                   1395.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5944.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay":
[info]   355972.059 ±(99.9%) 3595.372 ops/s [Average]
[info]   (min, avg, max) = (355130.787, 355972.059, 357516.422), stdev = 933.707
[info]   CI (99.9%): [352376.687, 359567.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1389.724 ±(99.9%) 14.063 MB/sec [Average]
[info]   (min, avg, max) = (1386.448, 1389.724, 1395.766), stdev = 3.652
[info]   CI (99.9%): [1375.661, 1403.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.001, 6144.001, 6144.001), stdev = 0.001
[info]   CI (99.9%): [6144.001, 6144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1405.603 ±(99.9%) 597.581 MB/sec [Average]
[info]   (min, avg, max) = (1323.381, 1405.603, 1682.654), stdev = 155.190
[info]   CI (99.9%): [808.022, 2003.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   6214.444 ±(99.9%) 2653.815 B/op [Average]
[info]   (min, avg, max) = (5864.522, 6214.444, 7446.201), stdev = 689.187
[info]   CI (99.9%): [3560.629, 8868.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.331 ±(99.9%) 0.737 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.331, 0.645), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce
[info] # Run progress: 45.52% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12983.323 ops/s
[info] # Warmup Iteration   2: 15885.665 ops/s
[info] # Warmup Iteration   3: 15806.621 ops/s
[info] # Warmup Iteration   4: 15728.480 ops/s
[info] # Warmup Iteration   5: 15934.365 ops/s
[info] Iteration   1: 15450.621 ops/s
[info]                  ·gc.alloc.rate:                   2036.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206471.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.241 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 15877.499 ops/s
[info]                  ·gc.alloc.rate:                   2092.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201501.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.443 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 15987.535 ops/s
[info]                  ·gc.alloc.rate:                   2106.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              207383.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233964.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.246 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 15739.929 ops/s
[info]                  ·gc.alloc.rate:                   2074.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203800.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.488 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 15944.170 ops/s
[info]                  ·gc.alloc.rate:                   2101.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201522.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.273 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce":
[info]   15799.951 ±(99.9%) 833.989 ops/s [Average]
[info]   (min, avg, max) = (15450.621, 15799.951, 15987.535), stdev = 216.584
[info]   CI (99.9%): [14965.962, 16633.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   2082.120 ±(99.9%) 109.889 MB/sec [Average]
[info]   (min, avg, max) = (2036.103, 2082.120, 2106.912), stdev = 28.538
[info]   CI (99.9%): [1972.231, 2192.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207383.831 ±(99.9%) 1.711 B/op [Average]
[info]   (min, avg, max) = (207383.036, 207383.831, 207384.037), stdev = 0.444
[info]   CI (99.9%): [207382.120, 207385.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2103.425 ±(99.9%) 589.194 MB/sec [Average]
[info]   (min, avg, max) = (2027.148, 2103.425, 2376.963), stdev = 153.012
[info]   CI (99.9%): [1514.232, 2692.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   209452.210 ±(99.9%) 53347.002 B/op [Average]
[info]   (min, avg, max) = (201501.949, 209452.210, 233964.053), stdev = 13854.047
[info]   CI (99.9%): [156105.207, 262799.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.338 ±(99.9%) 14.746 B/op [Average]
[info]   (min, avg, max) = (4.241, 10.338, 14.443), stdev = 3.829
[info]   CI (99.9%): [≈ 0, 25.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson
[info] # Run progress: 46.27% complete, ETA 00:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28609.437 ops/s
[info] # Warmup Iteration   2: 38677.441 ops/s
[info] # Warmup Iteration   3: 39047.348 ops/s
[info] # Warmup Iteration   4: 39190.478 ops/s
[info] # Warmup Iteration   5: 39328.300 ops/s
[info] Iteration   1: 39227.728 ops/s
[info]                  ·gc.alloc.rate:               281.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10262.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 39255.152 ops/s
[info]                  ·gc.alloc.rate:                   281.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13126.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39014.686 ops/s
[info]                  ·gc.alloc.rate:                   280.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13206.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39361.150 ops/s
[info]                  ·gc.alloc.rate:               282.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13061.312 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 39432.838 ops/s
[info]                  ·gc.alloc.rate:      283.245 MB/sec
[info]                  ·gc.alloc.rate.norm: 11304.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson":
[info]   39258.311 ±(99.9%) 612.888 ops/s [Average]
[info]   (min, avg, max) = (39014.686, 39258.311, 39432.838), stdev = 159.165
[info]   CI (99.9%): [38645.423, 39871.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   282.028 ±(99.9%) 4.519 MB/sec [Average]
[info]   (min, avg, max) = (280.245, 282.028, 283.245), stdev = 1.173
[info]   CI (99.9%): [277.510, 286.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   11304.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11304.011, 11304.011, 11304.012), stdev = 0.001
[info]   CI (99.9%): [11304.010, 11304.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   247.509 ±(99.9%) 545.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 247.509, 327.428), stdev = 141.778
[info]   CI (99.9%): [≈ 0, 793.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   9931.368 ±(99.9%) 21907.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9931.368, 13206.958), stdev = 5689.349
[info]   CI (99.9%): [≈ 0, 31839.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.419 ±(99.9%) 3.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.419, 2.073), stdev = 0.925
[info]   CI (99.9%): [≈ 0, 3.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.791 ±(99.9%) 142.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.791, 83.117), stdev = 37.079
[info]   CI (99.9%): [≈ 0, 159.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter
[info] # Run progress: 47.01% complete, ETA 00:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80673.727 ops/s
[info] # Warmup Iteration   2: 82559.960 ops/s
[info] # Warmup Iteration   3: 82650.266 ops/s
[info] # Warmup Iteration   4: 82977.665 ops/s
[info] # Warmup Iteration   5: 82789.391 ops/s
[info] Iteration   1: 82986.178 ops/s
[info]                  ·gc.alloc.rate:                   434.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6316.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 81052.840 ops/s
[info]                  ·gc.alloc.rate:               424.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6467.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 83103.680 ops/s
[info]                  ·gc.alloc.rate:                   435.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6307.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 82749.974 ops/s
[info]                  ·gc.alloc.rate:                   433.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12669.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80322.063 ops/s
[info]                  ·gc.alloc.rate:               420.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6525.459 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter":
[info]   82042.947 ±(99.9%) 4892.168 ops/s [Average]
[info]   (min, avg, max) = (80322.063, 82042.947, 83103.680), stdev = 1270.480
[info]   CI (99.9%): [77150.779, 86935.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   429.609 ±(99.9%) 25.582 MB/sec [Average]
[info]   (min, avg, max) = (420.557, 429.609, 435.093), stdev = 6.644
[info]   CI (99.9%): [404.026, 455.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   8240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8240.005, 8240.005, 8240.006), stdev = 0.001
[info]   CI (99.9%): [8240.004, 8240.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   399.722 ±(99.9%) 573.505 MB/sec [Average]
[info]   (min, avg, max) = (333.049, 399.722, 666.149), stdev = 148.937
[info]   CI (99.9%): [≈ 0, 973.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   7657.242 ±(99.9%) 10794.997 B/op [Average]
[info]   (min, avg, max) = (6307.755, 7657.242, 12669.317), stdev = 2803.426
[info]   CI (99.9%): [≈ 0, 18452.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.395 ±(99.9%) 1.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.188), stdev = 0.485
[info]   CI (99.9%): [≈ 0, 2.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay
[info] # Run progress: 47.76% complete, ETA 00:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5292.654 ops/s
[info] # Warmup Iteration   2: 8624.596 ops/s
[info] # Warmup Iteration   3: 8600.500 ops/s
[info] # Warmup Iteration   4: 8680.584 ops/s
[info] # Warmup Iteration   5: 8575.421 ops/s
[info] Iteration   1: 8709.564 ops/s
[info]                  ·gc.alloc.rate:                   3079.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3053.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551669.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.284 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8653.551 ops/s
[info]                  ·gc.alloc.rate:                   3060.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     556147.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.928 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8714.496 ops/s
[info]                  ·gc.alloc.rate:                   3082.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553217.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.277 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8701.467 ops/s
[info]                  ·gc.alloc.rate:                   3078.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     614968.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.043 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 8687.723 ops/s
[info]                  ·gc.alloc.rate:                   3072.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554872.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.852 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay":
[info]   8693.360 ±(99.9%) 94.155 ops/s [Average]
[info]   (min, avg, max) = (8653.551, 8693.360, 8714.496), stdev = 24.452
[info]   CI (99.9%): [8599.205, 8787.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   3074.499 ±(99.9%) 33.071 MB/sec [Average]
[info]   (min, avg, max) = (3060.599, 3074.499, 3082.023), stdev = 8.588
[info]   CI (99.9%): [3041.428, 3107.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   556456.080 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (556456.050, 556456.080, 556456.201), stdev = 0.068
[info]   CI (99.9%): [556455.819, 556456.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   3128.260 ±(99.9%) 588.839 MB/sec [Average]
[info]   (min, avg, max) = (3053.217, 3128.260, 3401.700), stdev = 152.920
[info]   CI (99.9%): [2539.421, 3717.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   566175.424 ±(99.9%) 105232.671 B/op [Average]
[info]   (min, avg, max) = (551669.892, 566175.424, 614968.824), stdev = 27328.590
[info]   CI (99.9%): [460942.753, 671408.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   15.077 ±(99.9%) 14.651 B/op [Average]
[info]   (min, avg, max) = (11.277, 15.077, 18.928), stdev = 3.805
[info]   CI (99.9%): [0.426, 29.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce
[info] # Run progress: 48.51% complete, ETA 00:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19201.973 ops/s
[info] # Warmup Iteration   2: 21789.289 ops/s
[info] # Warmup Iteration   3: 22202.242 ops/s
[info] # Warmup Iteration   4: 26228.814 ops/s
[info] # Warmup Iteration   5: 25211.930 ops/s
[info] Iteration   1: 23153.792 ops/s
[info]                  ·gc.alloc.rate:                   1446.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91188.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.830 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23286.896 ops/s
[info]                  ·gc.alloc.rate:                   1454.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91005.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22901.127 ops/s
[info]                  ·gc.alloc.rate:                   1430.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115989.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.993 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 22740.282 ops/s
[info]                  ·gc.alloc.rate:                   1420.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93728.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23032.352 ops/s
[info]                  ·gc.alloc.rate:                   1438.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92672.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.353 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce":
[info]   23022.890 ±(99.9%) 820.506 ops/s [Average]
[info]   (min, avg, max) = (22740.282, 23022.890, 23286.896), stdev = 213.083
[info]   CI (99.9%): [22202.384, 23843.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   1438.009 ±(99.9%) 51.532 MB/sec [Average]
[info]   (min, avg, max) = (1420.264, 1438.009, 1454.737), stdev = 13.383
[info]   CI (99.9%): [1386.477, 1489.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98288.019 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (98288.019, 98288.019, 98288.019), stdev = 0.001
[info]   CI (99.9%): [98288.018, 98288.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1417.474 ±(99.9%) 583.094 MB/sec [Average]
[info]   (min, avg, max) = (1341.634, 1417.474, 1688.153), stdev = 151.428
[info]   CI (99.9%): [834.380, 2000.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   96916.909 ±(99.9%) 41281.071 B/op [Average]
[info]   (min, avg, max) = (91005.340, 96916.909, 115989.883), stdev = 10720.563
[info]   CI (99.9%): [55635.838, 138197.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.132 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.132, 0.195), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.045 ±(99.9%) 16.098 B/op [Average]
[info]   (min, avg, max) = (2.830, 9.045, 13.353), stdev = 4.181
[info]   CI (99.9%): [≈ 0, 25.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson
[info] # Run progress: 49.25% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73495.938 ops/s
[info] # Warmup Iteration   2: 99265.042 ops/s
[info] # Warmup Iteration   3: 97420.472 ops/s
[info] # Warmup Iteration   4: 99639.935 ops/s
[info] # Warmup Iteration   5: 98612.978 ops/s
[info] Iteration   1: 99056.709 ops/s
[info]                  ·gc.alloc.rate:                   798.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10440.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 100133.884 ops/s
[info]                  ·gc.alloc.rate:               807.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          12692.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10359.602 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 100344.538 ops/s
[info]                  ·gc.alloc.rate:                   809.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15561.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 100304.329 ops/s
[info]                  ·gc.alloc.rate:                   808.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10420.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 99848.857 ops/s
[info]                  ·gc.alloc.rate:                   805.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15765.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson":
[info]   99937.663 ±(99.9%) 2039.807 ops/s [Average]
[info]   (min, avg, max) = (99056.709, 99937.663, 100344.538), stdev = 529.731
[info]   CI (99.9%): [97897.857, 101977.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   805.999 ±(99.9%) 16.397 MB/sec [Average]
[info]   (min, avg, max) = (798.924, 805.999, 809.278), stdev = 4.258
[info]   CI (99.9%): [789.602, 822.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   12692.324 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (12692.303, 12692.324, 12692.341), stdev = 0.015
[info]   CI (99.9%): [12692.267, 12692.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   794.605 ±(99.9%) 708.948 MB/sec [Average]
[info]   (min, avg, max) = (657.213, 794.605, 1000.257), stdev = 184.112
[info]   CI (99.9%): [85.657, 1503.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   12509.757 ±(99.9%) 11090.896 B/op [Average]
[info]   (min, avg, max) = (10359.602, 12509.757, 15765.810), stdev = 2880.270
[info]   CI (99.9%): [1418.861, 23600.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.786 ±(99.9%) 2.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 1.632), stdev = 0.593
[info]   CI (99.9%): [≈ 0, 3.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter
[info] # Run progress: 50.00% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110522.875 ops/s
[info] # Warmup Iteration   2: 113117.925 ops/s
[info] # Warmup Iteration   3: 110818.918 ops/s
[info] # Warmup Iteration   4: 113702.462 ops/s
[info] # Warmup Iteration   5: 114084.827 ops/s
[info] Iteration   1: 114248.703 ops/s
[info]                  ·gc.alloc.rate:                   486.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9176.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 114359.834 ops/s
[info]                  ·gc.alloc.rate:               487.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4583.939 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 113923.906 ops/s
[info]                  ·gc.alloc.rate:                   485.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9202.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 109565.251 ops/s
[info]                  ·gc.alloc.rate:               466.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4784.523 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 112637.620 ops/s
[info]                  ·gc.alloc.rate:               479.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4658.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter":
[info]   112947.063 ±(99.9%) 7743.726 ops/s [Average]
[info]   (min, avg, max) = (109565.251, 112947.063, 114359.834), stdev = 2011.021
[info]   CI (99.9%): [105203.337, 120690.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   481.160 ±(99.9%) 32.984 MB/sec [Average]
[info]   (min, avg, max) = (466.762, 481.160, 487.197), stdev = 8.566
[info]   CI (99.9%): [448.176, 514.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   6704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6704.004, 6704.004, 6704.004), stdev = 0.001
[info]   CI (99.9%): [6704.003, 6704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   466.407 ±(99.9%) 702.230 MB/sec [Average]
[info]   (min, avg, max) = (333.119, 466.407, 666.187), stdev = 182.367
[info]   CI (99.9%): [≈ 0, 1168.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   6481.131 ±(99.9%) 9523.688 B/op [Average]
[info]   (min, avg, max) = (4583.939, 6481.131, 9202.313), stdev = 2473.272
[info]   CI (99.9%): [≈ 0, 16004.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.402 ±(99.9%) 2.426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 1.438), stdev = 0.630
[info]   CI (99.9%): [≈ 0, 2.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 50.75% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135865.769 ops/s
[info] # Warmup Iteration   2: 139922.973 ops/s
[info] # Warmup Iteration   3: 138546.351 ops/s
[info] # Warmup Iteration   4: 135702.237 ops/s
[info] # Warmup Iteration   5: 138934.152 ops/s
[info] Iteration   1: 140104.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 139981.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 139119.697 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 139581.833 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 140184.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc":
[info]   139794.552 ±(99.9%) 1704.871 ops/s [Average]
[info]   (min, avg, max) = (139119.697, 139794.552, 140184.551), stdev = 442.750
[info]   CI (99.9%): [138089.681, 141499.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay
[info] # Run progress: 51.49% complete, ETA 00:16:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2678.744 ops/s
[info] # Warmup Iteration   2: 3498.528 ops/s
[info] # Warmup Iteration   3: 3645.608 ops/s
[info] # Warmup Iteration   4: 3632.226 ops/s
[info] # Warmup Iteration   5: 3652.595 ops/s
[info] Iteration   1: 3650.402 ops/s
[info]                  ·gc.alloc.rate:               1600.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          690068.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1674.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 721829.152 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 3642.723 ops/s
[info]                  ·gc.alloc.rate:                   1597.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              690067.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     581263.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3623.307 ops/s
[info]                  ·gc.alloc.rate:                   1589.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              690068.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732903.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.042 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3627.539 ops/s
[info]                  ·gc.alloc.rate:                   1590.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              690068.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734205.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3642.667 ops/s
[info]                  ·gc.alloc.rate:               1597.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          690068.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 585867.381 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay":
[info]   3637.328 ±(99.9%) 43.944 ops/s [Average]
[info]   (min, avg, max) = (3623.307, 3637.328, 3650.402), stdev = 11.412
[info]   CI (99.9%): [3593.383, 3681.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate":
[info]   1595.085 ±(99.9%) 19.136 MB/sec [Average]
[info]   (min, avg, max) = (1589.052, 1595.085, 1600.891), stdev = 4.970
[info]   CI (99.9%): [1575.949, 1614.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   690068.431 ±(99.9%) 1.575 B/op [Average]
[info]   (min, avg, max) = (690067.756, 690068.431, 690068.773), stdev = 0.409
[info]   CI (99.9%): [690066.856, 690070.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1551.287 ±(99.9%) 705.280 MB/sec [Average]
[info]   (min, avg, max) = (1345.529, 1551.287, 1692.537), stdev = 183.159
[info]   CI (99.9%): [846.006, 2256.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   671213.802 ±(99.9%) 308716.284 B/op [Average]
[info]   (min, avg, max) = (581263.315, 671213.802, 734205.460), stdev = 80172.639
[info]   CI (99.9%): [362497.518, 979930.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   7.211 ±(99.9%) 28.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.211, 17.985), stdev = 7.529
[info]   CI (99.9%): [≈ 0, 36.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 52.24% complete, ETA 00:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 519931.337 ops/s
[info] # Warmup Iteration   2: 726455.000 ops/s
[info] # Warmup Iteration   3: 740253.818 ops/s
[info] # Warmup Iteration   4: 743406.510 ops/s
[info] # Warmup Iteration   5: 729684.224 ops/s
[info] Iteration   1: 741334.060 ops/s
[info]                  ·gc.alloc.rate:                   2702.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5760.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 738446.939 ops/s
[info]                  ·gc.alloc.rate:                   2691.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5792.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 737312.645 ops/s
[info]                  ·gc.alloc.rate:                   2688.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5811.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 734993.192 ops/s
[info]                  ·gc.alloc.rate:                   2678.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5102.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 704793.865 ops/s
[info]                  ·gc.alloc.rate:                   2569.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6081.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   731376.140 ±(99.9%) 57891.037 ops/s [Average]
[info]   (min, avg, max) = (704793.865, 731376.140, 741334.060), stdev = 15034.119
[info]   CI (99.9%): [673485.103, 789267.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2666.087 ±(99.9%) 209.744 MB/sec [Average]
[info]   (min, avg, max) = (2569.796, 2666.087, 2702.136), stdev = 54.470
[info]   CI (99.9%): [2456.342, 2875.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2652.511 ±(99.9%) 580.577 MB/sec [Average]
[info]   (min, avg, max) = (2382.910, 2652.511, 2724.485), stdev = 150.774
[info]   CI (99.9%): [2071.934, 3233.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5709.594 ±(99.9%) 1397.306 B/op [Average]
[info]   (min, avg, max) = (5102.348, 5709.594, 6081.280), stdev = 362.876
[info]   CI (99.9%): [4312.288, 7106.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.232 ±(99.9%) 0.298 B/op [Average]
[info]   (min, avg, max) = (0.134, 0.232, 0.311), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 10.000), stdev = 1.517
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson
[info] # Run progress: 52.99% complete, ETA 00:16:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 319729.268 ops/s
[info] # Warmup Iteration   2: 638625.300 ops/s
[info] # Warmup Iteration   3: 673744.355 ops/s
[info] # Warmup Iteration   4: 676699.989 ops/s
[info] # Warmup Iteration   5: 672823.987 ops/s
[info] Iteration   1: 676264.814 ops/s
[info]                  ·gc.alloc.rate:                   787.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1514.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 677049.501 ops/s
[info]                  ·gc.alloc.rate:                   788.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2280.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 679799.944 ops/s
[info]                  ·gc.alloc.rate:                   791.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1519.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 682201.203 ops/s
[info]                  ·gc.alloc.rate:                   794.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1519.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 679207.518 ops/s
[info]                  ·gc.alloc.rate:                   790.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2300.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson":
[info]   678904.596 ±(99.9%) 9065.559 ops/s [Average]
[info]   (min, avg, max) = (676264.814, 678904.596, 682201.203), stdev = 2354.297
[info]   CI (99.9%): [669839.037, 687970.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate":
[info]   790.358 ±(99.9%) 10.385 MB/sec [Average]
[info]   (min, avg, max) = (787.244, 790.358, 794.158), stdev = 2.697
[info]   CI (99.9%): [779.972, 800.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   787.992 ±(99.9%) 700.003 MB/sec [Average]
[info]   (min, avg, max) = (650.871, 787.992, 992.903), stdev = 181.789
[info]   CI (99.9%): [87.989, 1487.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1826.832 ±(99.9%) 1629.526 B/op [Average]
[info]   (min, avg, max) = (1514.647, 1826.832, 2300.589), stdev = 423.183
[info]   CI (99.9%): [197.306, 3456.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.183 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.183, 0.290), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter
[info] # Run progress: 53.73% complete, ETA 00:16:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3934301.946 ops/s
[info] # Warmup Iteration   2: 3641353.676 ops/s
[info] # Warmup Iteration   3: 3603496.987 ops/s
[info] # Warmup Iteration   4: 3666636.925 ops/s
[info] # Warmup Iteration   5: 3667312.074 ops/s
[info] Iteration   1: 3682410.035 ops/s
[info]                  ·gc.alloc.rate:                   1535.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3631802.338 ops/s
[info]                  ·gc.alloc.rate:                   1513.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3689277.610 ops/s
[info]                  ·gc.alloc.rate:                   1538.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3677728.038 ops/s
[info]                  ·gc.alloc.rate:                   1532.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     580.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3675163.994 ops/s
[info]                  ·gc.alloc.rate:                   1531.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     727.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter":
[info]   3671276.403 ±(99.9%) 87447.351 ops/s [Average]
[info]   (min, avg, max) = (3631802.338, 3671276.403, 3689277.610), stdev = 22709.799
[info]   CI (99.9%): [3583829.052, 3758723.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1530.455 ±(99.9%) 36.809 MB/sec [Average]
[info]   (min, avg, max) = (1513.924, 1530.455, 1538.355), stdev = 9.559
[info]   CI (99.9%): [1493.646, 1567.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1556.975 ±(99.9%) 721.867 MB/sec [Average]
[info]   (min, avg, max) = (1347.062, 1556.975, 1698.734), stdev = 187.467
[info]   CI (99.9%): [835.107, 2278.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   667.522 ±(99.9%) 314.901 B/op [Average]
[info]   (min, avg, max) = (575.660, 667.522, 731.760), stdev = 81.779
[info]   CI (99.9%): [352.621, 982.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.034, 0.054), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay
[info] # Run progress: 54.48% complete, ETA 00:15:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43405.031 ops/s
[info] # Warmup Iteration   2: 242679.121 ops/s
[info] # Warmup Iteration   3: 247999.186 ops/s
[info] # Warmup Iteration   4: 251072.581 ops/s
[info] # Warmup Iteration   5: 249114.506 ops/s
[info] Iteration   1: 250835.552 ops/s
[info]                  ·gc.alloc.rate:                   1745.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10455.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 245740.836 ops/s
[info]                  ·gc.alloc.rate:                   1710.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10742.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 250151.313 ops/s
[info]                  ·gc.alloc.rate:                   1741.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12727.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.917 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 249706.216 ops/s
[info]                  ·gc.alloc.rate:                   1737.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10660.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 247808.300 ops/s
[info]                  ·gc.alloc.rate:                   1724.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10768.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay":
[info]   248848.443 ±(99.9%) 7966.499 ops/s [Average]
[info]   (min, avg, max) = (245740.836, 248848.443, 250835.552), stdev = 2068.875
[info]   CI (99.9%): [240881.944, 256814.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1731.884 ±(99.9%) 55.784 MB/sec [Average]
[info]   (min, avg, max) = (1710.203, 1731.884, 1745.840), stdev = 14.487
[info]   CI (99.9%): [1676.099, 1787.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.001, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1750.942 ±(99.9%) 588.313 MB/sec [Average]
[info]   (min, avg, max) = (1666.654, 1750.942, 2023.473), stdev = 152.783
[info]   CI (99.9%): [1162.629, 2339.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   11070.939 ±(99.9%) 3597.885 B/op [Average]
[info]   (min, avg, max) = (10455.249, 11070.939, 12727.817), stdev = 934.359
[info]   CI (99.9%): [7473.054, 14668.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.712 ±(99.9%) 1.004 B/op [Average]
[info]   (min, avg, max) = (0.522, 0.712, 1.067), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 55.22% complete, ETA 00:15:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 667498.410 ops/s
[info] # Warmup Iteration   2: 916535.259 ops/s
[info] # Warmup Iteration   3: 923545.274 ops/s
[info] # Warmup Iteration   4: 920280.673 ops/s
[info] # Warmup Iteration   5: 926902.748 ops/s
[info] Iteration   1: 923882.557 ops/s
[info]                  ·gc.alloc.rate:                   2226.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3457.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 914732.215 ops/s
[info]                  ·gc.alloc.rate:                   2204.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4085.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 923346.125 ops/s
[info]                  ·gc.alloc.rate:                   2224.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3474.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 925358.292 ops/s
[info]                  ·gc.alloc.rate:                   2229.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4049.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 894802.709 ops/s
[info]                  ·gc.alloc.rate:                   2156.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3592.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   916424.380 ±(99.9%) 49226.149 ops/s [Average]
[info]   (min, avg, max) = (894802.709, 916424.380, 925358.292), stdev = 12783.875
[info]   CI (99.9%): [867198.230, 965650.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2208.382 ±(99.9%) 117.984 MB/sec [Average]
[info]   (min, avg, max) = (2156.451, 2208.382, 2229.741), stdev = 30.640
[info]   CI (99.9%): [2090.398, 2326.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3792.000, 3792.000, 3792.001), stdev = 0.001
[info]   CI (99.9%): [3792.000, 3792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2173.407 ±(99.9%) 719.727 MB/sec [Average]
[info]   (min, avg, max) = (2029.502, 2173.407, 2380.979), stdev = 186.911
[info]   CI (99.9%): [1453.679, 2893.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3731.620 ±(99.9%) 1197.632 B/op [Average]
[info]   (min, avg, max) = (3457.035, 3731.620, 4085.264), stdev = 311.021
[info]   CI (99.9%): [2533.988, 4929.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.186 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (0.142, 0.186, 0.220), stdev = 0.041
[info]   CI (99.9%): [0.030, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson
[info] # Run progress: 55.97% complete, ETA 00:15:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 886903.580 ops/s
[info] # Warmup Iteration   2: 1779687.436 ops/s
[info] # Warmup Iteration   3: 1859624.308 ops/s
[info] # Warmup Iteration   4: 1813170.292 ops/s
[info] # Warmup Iteration   5: 1842845.592 ops/s
[info] Iteration   1: 1856624.697 ops/s
[info]                  ·gc.alloc.rate:                   1255.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1118.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1837392.753 ops/s
[info]                  ·gc.alloc.rate:                   1242.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1137.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1856258.557 ops/s
[info]                  ·gc.alloc.rate:                   1255.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1851939.001 ops/s
[info]                  ·gc.alloc.rate:                   1252.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1140.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1747422.922 ops/s
[info]                  ·gc.alloc.rate:                   1181.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1212.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson":
[info]   1829927.586 ±(99.9%) 180131.403 ops/s [Average]
[info]   (min, avg, max) = (1747422.922, 1829927.586, 1856624.697), stdev = 46779.553
[info]   CI (99.9%): [1649796.183, 2010058.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1237.233 ±(99.9%) 121.692 MB/sec [Average]
[info]   (min, avg, max) = (1181.490, 1237.233, 1255.261), stdev = 31.603
[info]   CI (99.9%): [1115.542, 1358.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1267.759 ±(99.9%) 573.016 MB/sec [Average]
[info]   (min, avg, max) = (1002.250, 1267.759, 1346.743), stdev = 148.810
[info]   CI (99.9%): [694.743, 1840.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1091.806 ±(99.9%) 539.160 B/op [Average]
[info]   (min, avg, max) = (849.712, 1091.806, 1212.820), stdev = 140.018
[info]   CI (99.9%): [552.646, 1630.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.068, 0.107), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter
[info] # Run progress: 56.72% complete, ETA 00:15:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5959047.525 ops/s
[info] # Warmup Iteration   2: 6594880.443 ops/s
[info] # Warmup Iteration   3: 6841712.102 ops/s
[info] # Warmup Iteration   4: 6871300.891 ops/s
[info] # Warmup Iteration   5: 6887042.759 ops/s
[info] Iteration   1: 6887407.223 ops/s
[info]                  ·gc.alloc.rate:                   770.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6829822.630 ops/s
[info]                  ·gc.alloc.rate:                   763.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6874793.604 ops/s
[info]                  ·gc.alloc.rate:                   768.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6813321.829 ops/s
[info]                  ·gc.alloc.rate:                   761.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6854874.049 ops/s
[info]                  ·gc.alloc.rate:                   766.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter":
[info]   6852043.867 ±(99.9%) 118204.531 ops/s [Average]
[info]   (min, avg, max) = (6813321.829, 6852043.867, 6887407.223), stdev = 30697.341
[info]   CI (99.9%): [6733839.336, 6970248.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   766.305 ±(99.9%) 13.479 MB/sec [Average]
[info]   (min, avg, max) = (761.884, 766.305, 770.421), stdev = 3.500
[info]   CI (99.9%): [752.826, 779.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   802.218 ±(99.9%) 707.863 MB/sec [Average]
[info]   (min, avg, max) = (666.328, 802.218, 1006.561), stdev = 183.830
[info]   CI (99.9%): [94.355, 1510.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   184.296 ±(99.9%) 163.601 B/op [Average]
[info]   (min, avg, max) = (152.220, 184.296, 231.099), stdev = 42.487
[info]   CI (99.9%): [20.694, 347.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.013, 0.024), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay
[info] # Run progress: 57.46% complete, ETA 00:14:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208772.498 ops/s
[info] # Warmup Iteration   2: 523028.134 ops/s
[info] # Warmup Iteration   3: 515913.577 ops/s
[info] # Warmup Iteration   4: 535076.961 ops/s
[info] # Warmup Iteration   5: 531789.348 ops/s
[info] Iteration   1: 525418.601 ops/s
[info]                  ·gc.alloc.rate:                   1829.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5011.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 528241.223 ops/s
[info]                  ·gc.alloc.rate:                   1839.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6018.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 527099.331 ops/s
[info]                  ·gc.alloc.rate:                   1835.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5044.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 526081.594 ops/s
[info]                  ·gc.alloc.rate:                   1832.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5067.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 532196.816 ops/s
[info]                  ·gc.alloc.rate:                   1853.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6024.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.369 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay":
[info]   527807.513 ±(99.9%) 10303.856 ops/s [Average]
[info]   (min, avg, max) = (525418.601, 527807.513, 532196.816), stdev = 2675.879
[info]   CI (99.9%): [517503.657, 538111.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1838.186 ±(99.9%) 35.481 MB/sec [Average]
[info]   (min, avg, max) = (1829.649, 1838.186, 1853.225), stdev = 9.214
[info]   CI (99.9%): [1802.705, 1873.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5480.001, 5480.001, 5480.001), stdev = 0.001
[info]   CI (99.9%): [5480.001, 5480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1823.176 ±(99.9%) 724.066 MB/sec [Average]
[info]   (min, avg, max) = (1673.300, 1823.176, 2037.321), stdev = 188.038
[info]   CI (99.9%): [1099.110, 2547.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5433.476 ±(99.9%) 2068.049 B/op [Average]
[info]   (min, avg, max) = (5011.717, 5433.476, 6024.374), stdev = 537.066
[info]   CI (99.9%): [3365.427, 7501.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.372 ±(99.9%) 0.378 B/op [Average]
[info]   (min, avg, max) = (0.249, 0.372, 0.496), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 58.21% complete, ETA 00:14:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 433976.544 ops/s
[info] # Warmup Iteration   2: 674295.303 ops/s
[info] # Warmup Iteration   3: 682672.303 ops/s
[info] # Warmup Iteration   4: 662134.707 ops/s
[info] # Warmup Iteration   5: 688023.321 ops/s
[info] Iteration   1: 681625.114 ops/s
[info]                  ·gc.alloc.rate:                   2422.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5473.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 679951.891 ops/s
[info]                  ·gc.alloc.rate:                   2416.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5500.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 675706.958 ops/s
[info]                  ·gc.alloc.rate:                   2401.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5538.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 681497.081 ops/s
[info]                  ·gc.alloc.rate:                   2421.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5502.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 685763.108 ops/s
[info]                  ·gc.alloc.rate:                   2436.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5468.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   680908.831 ±(99.9%) 13936.767 ops/s [Average]
[info]   (min, avg, max) = (675706.958, 680908.831, 685763.108), stdev = 3619.334
[info]   CI (99.9%): [666972.064, 694845.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2419.515 ±(99.9%) 49.611 MB/sec [Average]
[info]   (min, avg, max) = (2401.018, 2419.515, 2436.831), stdev = 12.884
[info]   CI (99.9%): [2369.904, 2469.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5592.001, 5592.001, 5592.001), stdev = 0.001
[info]   CI (99.9%): [5592.001, 5592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2378.256 ±(99.9%) 19.805 MB/sec [Average]
[info]   (min, avg, max) = (2370.676, 2378.256, 2383.016), stdev = 5.143
[info]   CI (99.9%): [2358.452, 2398.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5496.754 ±(99.9%) 108.500 B/op [Average]
[info]   (min, avg, max) = (5468.508, 5496.754, 5538.958), stdev = 28.177
[info]   CI (99.9%): [5388.254, 5605.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.288 ±(99.9%) 0.366 B/op [Average]
[info]   (min, avg, max) = (0.192, 0.288, 0.430), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter
[info] # Run progress: 58.96% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4503899.949 ops/s
[info] # Warmup Iteration   2: 4840658.199 ops/s
[info] # Warmup Iteration   3: 4923723.238 ops/s
[info] # Warmup Iteration   4: 4952519.471 ops/s
[info] # Warmup Iteration   5: 4971910.300 ops/s
[info] Iteration   1: 4847584.881 ops/s
[info]                  ·gc.alloc.rate:                   1207.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4973541.231 ops/s
[info]                  ·gc.alloc.rate:                   1238.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     319.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4972860.371 ops/s
[info]                  ·gc.alloc.rate:                   1238.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     426.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4940880.892 ops/s
[info]                  ·gc.alloc.rate:                   1230.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     430.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4915961.839 ops/s
[info]                  ·gc.alloc.rate:                   1224.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1015.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     325.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter":
[info]   4930165.843 ±(99.9%) 200459.473 ops/s [Average]
[info]   (min, avg, max) = (4847584.881, 4930165.843, 4973541.231), stdev = 52058.689
[info]   CI (99.9%): [4729706.369, 5130625.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1228.067 ±(99.9%) 50.074 MB/sec [Average]
[info]   (min, avg, max) = (1207.498, 1228.067, 1238.857), stdev = 13.004
[info]   CI (99.9%): [1177.993, 1278.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1213.003 ±(99.9%) 706.609 MB/sec [Average]
[info]   (min, avg, max) = (1008.579, 1213.003, 1351.647), stdev = 183.504
[info]   CI (99.9%): [506.395, 1919.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   387.347 ±(99.9%) 229.687 B/op [Average]
[info]   (min, avg, max) = (319.135, 387.347, 435.261), stdev = 59.649
[info]   CI (99.9%): [157.660, 617.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.028, 0.040), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay
[info] # Run progress: 59.70% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143351.845 ops/s
[info] # Warmup Iteration   2: 373238.554 ops/s
[info] # Warmup Iteration   3: 376407.854 ops/s
[info] # Warmup Iteration   4: 377136.244 ops/s
[info] # Warmup Iteration   5: 377322.767 ops/s
[info] Iteration   1: 379850.657 ops/s
[info]                  ·gc.alloc.rate:                   1961.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8333.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 379568.415 ops/s
[info]                  ·gc.alloc.rate:                   1960.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8388.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.604 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 379721.449 ops/s
[info]                  ·gc.alloc.rate:                   1961.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7010.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 374978.664 ops/s
[info]                  ·gc.alloc.rate:                   1936.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8541.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 379135.605 ops/s
[info]                  ·gc.alloc.rate:                   1958.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8462.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay":
[info]   378650.958 ±(99.9%) 7972.688 ops/s [Average]
[info]   (min, avg, max) = (374978.664, 378650.958, 379850.657), stdev = 2070.482
[info]   CI (99.9%): [370678.270, 386623.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1955.907 ±(99.9%) 41.303 MB/sec [Average]
[info]   (min, avg, max) = (1936.828, 1955.907, 1961.860), stdev = 10.726
[info]   CI (99.9%): [1914.603, 1997.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8128.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8128.001, 8128.001, 8128.001), stdev = 0.001
[info]   CI (99.9%): [8128.001, 8128.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1960.276 ±(99.9%) 579.900 MB/sec [Average]
[info]   (min, avg, max) = (1691.584, 1960.276, 2039.308), stdev = 150.598
[info]   CI (99.9%): [1380.376, 2540.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8147.223 ±(99.9%) 2465.557 B/op [Average]
[info]   (min, avg, max) = (7010.442, 8147.223, 8541.898), stdev = 640.297
[info]   CI (99.9%): [5681.666, 10612.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.467 ±(99.9%) 0.382 B/op [Average]
[info]   (min, avg, max) = (0.346, 0.467, 0.604), stdev = 0.099
[info]   CI (99.9%): [0.085, 0.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 60.45% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265521.008 ops/s
[info] # Warmup Iteration   2: 518541.462 ops/s
[info] # Warmup Iteration   3: 535814.974 ops/s
[info] # Warmup Iteration   4: 532477.780 ops/s
[info] # Warmup Iteration   5: 534015.471 ops/s
[info] Iteration   1: 534423.563 ops/s
[info]                  ·gc.alloc.rate:                   1461.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3942.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 533913.327 ops/s
[info]                  ·gc.alloc.rate:                   1460.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3961.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 534915.648 ops/s
[info]                  ·gc.alloc.rate:                   1462.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4960.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 530168.509 ops/s
[info]                  ·gc.alloc.rate:                   1449.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4016.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 537087.689 ops/s
[info]                  ·gc.alloc.rate:                   1468.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3972.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   534101.747 ±(99.9%) 9662.682 ops/s [Average]
[info]   (min, avg, max) = (530168.509, 534101.747, 537087.689), stdev = 2509.368
[info]   CI (99.9%): [524439.065, 543764.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1460.703 ±(99.9%) 26.423 MB/sec [Average]
[info]   (min, avg, max) = (1449.953, 1460.703, 1468.881), stdev = 6.862
[info]   CI (99.9%): [1434.280, 1487.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4304.001, 4304.001, 4304.001), stdev = 0.001
[info]   CI (99.9%): [4304.001, 4304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1415.482 ±(99.9%) 583.057 MB/sec [Average]
[info]   (min, avg, max) = (1338.673, 1415.482, 1686.070), stdev = 151.418
[info]   CI (99.9%): [832.424, 1998.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4170.521 ±(99.9%) 1703.717 B/op [Average]
[info]   (min, avg, max) = (3942.140, 4170.521, 4960.507), stdev = 442.450
[info]   CI (99.9%): [2466.804, 5874.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.307 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (0.184, 0.307, 0.430), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter
[info] # Run progress: 61.19% complete, ETA 00:13:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2866946.623 ops/s
[info] # Warmup Iteration   2: 3181101.758 ops/s
[info] # Warmup Iteration   3: 3119323.997 ops/s
[info] # Warmup Iteration   4: 3182117.254 ops/s
[info] # Warmup Iteration   5: 3199370.083 ops/s
[info] Iteration   1: 3201733.930 ops/s
[info]                  ·gc.alloc.rate:                   488.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     326.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3197411.694 ops/s
[info]                  ·gc.alloc.rate:               487.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3195008.278 ops/s
[info]                  ·gc.alloc.rate:                   487.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     327.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3206712.715 ops/s
[info]                  ·gc.alloc.rate:               489.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3202874.609 ops/s
[info]                  ·gc.alloc.rate:                   488.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter":
[info]   3200748.245 ±(99.9%) 17766.007 ops/s [Average]
[info]   (min, avg, max) = (3195008.278, 3200748.245, 3206712.715), stdev = 4613.776
[info]   CI (99.9%): [3182982.238, 3218514.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   488.119 ±(99.9%) 2.693 MB/sec [Average]
[info]   (min, avg, max) = (487.249, 488.119, 489.031), stdev = 0.699
[info]   CI (99.9%): [485.426, 490.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   465.858 ±(99.9%) 700.694 MB/sec [Average]
[info]   (min, avg, max) = (332.416, 465.858, 665.521), stdev = 181.968
[info]   CI (99.9%): [≈ 0, 1166.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   229.103 ±(99.9%) 345.197 B/op [Average]
[info]   (min, avg, max) = (163.468, 229.103, 327.810), stdev = 89.646
[info]   CI (99.9%): [≈ 0, 574.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.072), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay
[info] # Run progress: 61.94% complete, ETA 00:13:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115080.712 ops/s
[info] # Warmup Iteration   2: 348085.810 ops/s
[info] # Warmup Iteration   3: 356852.626 ops/s
[info] # Warmup Iteration   4: 355940.530 ops/s
[info] # Warmup Iteration   5: 355121.333 ops/s
[info] Iteration   1: 354489.451 ops/s
[info]                  ·gc.alloc.rate:                   1306.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5864.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 355433.887 ops/s
[info]                  ·gc.alloc.rate:                   1309.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5890.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 350820.419 ops/s
[info]                  ·gc.alloc.rate:                   1292.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6000.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 350563.768 ops/s
[info]                  ·gc.alloc.rate:                   1291.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6035.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 351241.877 ops/s
[info]                  ·gc.alloc.rate:                   1294.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6044.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay":
[info]   352509.880 ±(99.9%) 8763.490 ops/s [Average]
[info]   (min, avg, max) = (350563.768, 352509.880, 355433.887), stdev = 2275.850
[info]   CI (99.9%): [343746.391, 361273.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1299.164 ±(99.9%) 32.404 MB/sec [Average]
[info]   (min, avg, max) = (1291.954, 1299.164, 1309.969), stdev = 8.415
[info]   CI (99.9%): [1266.760, 1331.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5800.001, 5800.001, 5800.001), stdev = 0.001
[info]   CI (99.9%): [5800.001, 5800.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1336.491 ±(99.9%) 42.753 MB/sec [Average]
[info]   (min, avg, max) = (1321.099, 1336.491, 1348.955), stdev = 11.103
[info]   CI (99.9%): [1293.738, 1379.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5967.051 ±(99.9%) 322.708 B/op [Average]
[info]   (min, avg, max) = (5864.823, 5967.051, 6044.328), stdev = 83.806
[info]   CI (99.9%): [5644.344, 6289.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.408 ±(99.9%) 0.398 B/op [Average]
[info]   (min, avg, max) = (0.280, 0.408, 0.553), stdev = 0.103
[info]   CI (99.9%): [0.011, 0.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 62.69% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 990045.378 ops/s
[info] # Warmup Iteration   2: 1924029.983 ops/s
[info] # Warmup Iteration   3: 1952446.260 ops/s
[info] # Warmup Iteration   4: 1932846.062 ops/s
[info] # Warmup Iteration   5: 1953641.744 ops/s
[info] Iteration   1: 1962670.363 ops/s
[info]                  ·gc.alloc.rate:                   3172.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2723.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1955419.538 ops/s
[info]                  ·gc.alloc.rate:                   3161.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3062.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2464.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1921487.511 ops/s
[info]                  ·gc.alloc.rate:                   3106.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2509.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1970594.528 ops/s
[info]                  ·gc.alloc.rate:                   3185.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2446.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1945183.633 ops/s
[info]                  ·gc.alloc.rate:                   3144.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2754.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1951071.115 ±(99.9%) 73174.066 ops/s [Average]
[info]   (min, avg, max) = (1921487.511, 1951071.115, 1970594.528), stdev = 19003.073
[info]   CI (99.9%): [1877897.048, 2024245.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3154.139 ±(99.9%) 118.215 MB/sec [Average]
[info]   (min, avg, max) = (3106.131, 3154.139, 3185.535), stdev = 30.700
[info]   CI (99.9%): [3035.925, 3272.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2544.000, 2544.000, 2544.000), stdev = 0.001
[info]   CI (99.9%): [2544.000, 2544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3198.240 ±(99.9%) 712.170 MB/sec [Average]
[info]   (min, avg, max) = (3062.090, 3198.240, 3404.827), stdev = 184.948
[info]   CI (99.9%): [2486.070, 3910.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2579.606 ±(99.9%) 568.612 B/op [Average]
[info]   (min, avg, max) = (2446.732, 2579.606, 2754.212), stdev = 147.667
[info]   CI (99.9%): [2010.994, 3148.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.187), stdev = 0.031
[info]   CI (99.9%): [0.031, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.121 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.153), stdev = 0.026
[info]   CI (99.9%): [0.021, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson
[info] # Run progress: 63.43% complete, ETA 00:12:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68394.636 ops/s
[info] # Warmup Iteration   2: 309766.132 ops/s
[info] # Warmup Iteration   3: 315314.597 ops/s
[info] # Warmup Iteration   4: 320605.226 ops/s
[info] # Warmup Iteration   5: 320404.833 ops/s
[info] Iteration   1: 321653.716 ops/s
[info]                  ·gc.alloc.rate:                   757.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3200.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 310460.089 ops/s
[info]                  ·gc.alloc.rate:                   730.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3322.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 310416.397 ops/s
[info]                  ·gc.alloc.rate:               730.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3333.412 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 308971.100 ops/s
[info]                  ·gc.alloc.rate:                   727.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5044.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 309657.532 ops/s
[info]                  ·gc.alloc.rate:                   728.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3368.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson":
[info]   312231.767 ±(99.9%) 20418.053 ops/s [Average]
[info]   (min, avg, max) = (308971.100, 312231.767, 321653.716), stdev = 5302.503
[info]   CI (99.9%): [291813.715, 332649.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate":
[info]   734.878 ±(99.9%) 48.070 MB/sec [Average]
[info]   (min, avg, max) = (727.194, 734.878, 757.059), stdev = 12.484
[info]   CI (99.9%): [686.808, 782.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   3704.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3704.001, 3704.001, 3704.001), stdev = 0.001
[info]   CI (99.9%): [3704.001, 3704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   724.071 ±(99.9%) 573.195 MB/sec [Average]
[info]   (min, avg, max) = (654.180, 724.071, 990.289), stdev = 148.857
[info]   CI (99.9%): [150.876, 1297.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3653.956 ±(99.9%) 3002.295 B/op [Average]
[info]   (min, avg, max) = (3200.654, 3653.956, 5044.086), stdev = 779.686
[info]   CI (99.9%): [651.661, 6656.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.336 ±(99.9%) 1.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.336, 0.742), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter
[info] # Run progress: 64.18% complete, ETA 00:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 634917.314 ops/s
[info] # Warmup Iteration   2: 688003.722 ops/s
[info] # Warmup Iteration   3: 687391.914 ops/s
[info] # Warmup Iteration   4: 695904.931 ops/s
[info] # Warmup Iteration   5: 696675.162 ops/s
[info] Iteration   1: 689152.277 ops/s
[info]                  ·gc.alloc.rate:                   623.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1530.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 673995.808 ops/s
[info]                  ·gc.alloc.rate:                   610.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1564.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 669613.866 ops/s
[info]                  ·gc.alloc.rate:                   605.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1575.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 676686.607 ops/s
[info]                  ·gc.alloc.rate:                   612.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1560.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 674804.533 ops/s
[info]                  ·gc.alloc.rate:               610.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 783.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter":
[info]   676850.618 ±(99.9%) 28300.576 ops/s [Average]
[info]   (min, avg, max) = (669613.866, 676850.618, 689152.277), stdev = 7349.570
[info]   CI (99.9%): [648550.043, 705151.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate":
[info]   612.504 ±(99.9%) 25.821 MB/sec [Average]
[info]   (min, avg, max) = (605.895, 612.504, 623.739), stdev = 6.706
[info]   CI (99.9%): [586.682, 638.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1424.001, 1424.001, 1424.001), stdev = 0.001
[info]   CI (99.9%): [1424.001, 1424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   603.472 ±(99.9%) 576.307 MB/sec [Average]
[info]   (min, avg, max) = (335.744, 603.472, 670.811), stdev = 149.665
[info]   CI (99.9%): [27.166, 1179.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1402.661 ±(99.9%) 1335.346 B/op [Average]
[info]   (min, avg, max) = (783.025, 1402.661, 1575.038), stdev = 346.785
[info]   CI (99.9%): [67.315, 2738.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.126 ±(99.9%) 0.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.339), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 64.93% complete, ETA 00:12:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3538435.978 ops/s
[info] # Warmup Iteration   2: 3731450.847 ops/s
[info] # Warmup Iteration   3: 3787324.636 ops/s
[info] # Warmup Iteration   4: 3764915.073 ops/s
[info] # Warmup Iteration   5: 3787842.479 ops/s
[info] Iteration   1: 3759795.574 ops/s
[info]                  ·gc.alloc.rate:                   2236.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     993.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3796207.533 ops/s
[info]                  ·gc.alloc.rate:                   2258.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     845.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3777068.583 ops/s
[info]                  ·gc.alloc.rate:                   2246.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     991.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3725255.957 ops/s
[info]                  ·gc.alloc.rate:                   2215.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     862.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3702666.080 ops/s
[info]                  ·gc.alloc.rate:                   2202.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1012.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3752198.746 ±(99.9%) 146531.964 ops/s [Average]
[info]   (min, avg, max) = (3702666.080, 3752198.746, 3796207.533), stdev = 38053.886
[info]   CI (99.9%): [3605666.782, 3898730.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2231.852 ±(99.9%) 86.505 MB/sec [Average]
[info]   (min, avg, max) = (2202.883, 2231.852, 2258.077), stdev = 22.465
[info]   CI (99.9%): [2145.348, 2318.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   936.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (936.000, 936.000, 936.000), stdev = 0.001
[info]   CI (99.9%): [936.000, 936.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2243.932 ±(99.9%) 714.768 MB/sec [Average]
[info]   (min, avg, max) = (2038.669, 2243.932, 2383.789), stdev = 185.623
[info]   CI (99.9%): [1529.164, 2958.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   941.278 ±(99.9%) 309.485 B/op [Average]
[info]   (min, avg, max) = (845.053, 941.278, 1012.867), stdev = 80.372
[info]   CI (99.9%): [631.793, 1250.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.038, 0.069), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 65.67% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6287641.030 ops/s
[info] # Warmup Iteration   2: 6464424.395 ops/s
[info] # Warmup Iteration   3: 6679855.620 ops/s
[info] # Warmup Iteration   4: 6725095.299 ops/s
[info] # Warmup Iteration   5: 6697659.430 ops/s
[info] Iteration   1: 6526053.546 ops/s
[info]                  ·gc.alloc.rate:               763.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161.615 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6696820.479 ops/s
[info]                  ·gc.alloc.rate:               783.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157.563 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6747576.628 ops/s
[info]                  ·gc.alloc.rate:                   788.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6683406.569 ops/s
[info]                  ·gc.alloc.rate:                   781.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6685393.243 ops/s
[info]                  ·gc.alloc.rate:                   781.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6667850.093 ±(99.9%) 321313.281 ops/s [Average]
[info]   (min, avg, max) = (6526053.546, 6667850.093, 6747576.628), stdev = 83444.039
[info]   CI (99.9%): [6346536.812, 6989163.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   779.715 ±(99.9%) 37.386 MB/sec [Average]
[info]   (min, avg, max) = (763.206, 779.715, 788.949), stdev = 9.709
[info]   CI (99.9%): [742.329, 817.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   738.898 ±(99.9%) 581.015 MB/sec [Average]
[info]   (min, avg, max) = (670.356, 738.898, 1008.805), stdev = 150.888
[info]   CI (99.9%): [157.884, 1319.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   174.348 ±(99.9%) 136.095 B/op [Average]
[info]   (min, avg, max) = (156.534, 174.348, 237.481), stdev = 35.343
[info]   CI (99.9%): [38.253, 310.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay
[info] # Run progress: 66.42% complete, ETA 00:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20422.744 ops/s
[info] # Warmup Iteration   2: 186610.521 ops/s
[info] # Warmup Iteration   3: 197900.704 ops/s
[info] # Warmup Iteration   4: 203001.148 ops/s
[info] # Warmup Iteration   5: 202889.847 ops/s
[info] Iteration   1: 200084.543 ops/s
[info]                  ·gc.alloc.rate:                   1667.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13083.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.491 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 201360.066 ops/s
[info]                  ·gc.alloc.rate:                   1678.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13083.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.976 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 201176.786 ops/s
[info]                  ·gc.alloc.rate:                   1676.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13171.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.651 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 199268.042 ops/s
[info]                  ·gc.alloc.rate:                   1660.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13345.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.658 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 200141.555 ops/s
[info]                  ·gc.alloc.rate:                   1667.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13320.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.655 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay":
[info]   200406.198 ±(99.9%) 3319.474 ops/s [Average]
[info]   (min, avg, max) = (199268.042, 200406.198, 201360.066), stdev = 862.057
[info]   CI (99.9%): [197086.725, 203725.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate":
[info]   1669.907 ±(99.9%) 28.447 MB/sec [Average]
[info]   (min, avg, max) = (1660.235, 1669.907, 1678.060), stdev = 7.387
[info]   CI (99.9%): [1641.461, 1698.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13112.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13112.002, 13112.002, 13112.002), stdev = 0.001
[info]   CI (99.9%): [13112.002, 13112.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1681.180 ±(99.9%) 47.431 MB/sec [Average]
[info]   (min, avg, max) = (1663.482, 1681.180, 1694.035), stdev = 12.318
[info]   CI (99.9%): [1633.749, 1728.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   13200.819 ±(99.9%) 485.423 B/op [Average]
[info]   (min, avg, max) = (13083.490, 13200.819, 13345.408), stdev = 126.063
[info]   CI (99.9%): [12715.396, 13686.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.686 ±(99.9%) 0.681 B/op [Average]
[info]   (min, avg, max) = (0.491, 0.686, 0.976), stdev = 0.177
[info]   CI (99.9%): [0.005, 1.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 67.16% complete, ETA 00:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497222.473 ops/s
[info] # Warmup Iteration   2: 726277.107 ops/s
[info] # Warmup Iteration   3: 741905.837 ops/s
[info] # Warmup Iteration   4: 750661.898 ops/s
[info] # Warmup Iteration   5: 747493.699 ops/s
[info] Iteration   1: 745569.225 ops/s
[info]                  ·gc.alloc.rate:                   2873.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5731.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 747441.063 ops/s
[info]                  ·gc.alloc.rate:                   2880.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6441.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 733036.054 ops/s
[info]                  ·gc.alloc.rate:                   2824.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5846.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 750492.830 ops/s
[info]                  ·gc.alloc.rate:                   2892.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6424.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 743466.017 ops/s
[info]                  ·gc.alloc.rate:                   2865.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5764.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   744001.038 ±(99.9%) 25611.376 ops/s [Average]
[info]   (min, avg, max) = (733036.054, 744001.038, 750492.830), stdev = 6651.193
[info]   CI (99.9%): [718389.661, 769612.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2867.188 ±(99.9%) 99.302 MB/sec [Average]
[info]   (min, avg, max) = (2824.586, 2867.188, 2892.346), stdev = 25.789
[info]   CI (99.9%): [2767.886, 2966.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.001, 6064.001, 6064.001), stdev = 0.001
[info]   CI (99.9%): [6064.001, 6064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2857.321 ±(99.9%) 718.905 MB/sec [Average]
[info]   (min, avg, max) = (2715.884, 2857.321, 3064.247), stdev = 186.697
[info]   CI (99.9%): [2138.416, 3576.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6041.618 ±(99.9%) 1384.588 B/op [Average]
[info]   (min, avg, max) = (5731.491, 6041.618, 6441.148), stdev = 359.573
[info]   CI (99.9%): [4657.030, 7426.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.208), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.273 ±(99.9%) 0.401 B/op [Average]
[info]   (min, avg, max) = (0.175, 0.273, 0.438), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.140
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter
[info] # Run progress: 67.91% complete, ETA 00:11:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3124958.189 ops/s
[info] # Warmup Iteration   2: 3512012.341 ops/s
[info] # Warmup Iteration   3: 3559503.667 ops/s
[info] # Warmup Iteration   4: 3573885.577 ops/s
[info] # Warmup Iteration   5: 3588171.295 ops/s
[info] Iteration   1: 3574844.672 ops/s
[info]                  ·gc.alloc.rate:                   2307.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3581485.594 ops/s
[info]                  ·gc.alloc.rate:                   2312.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3585020.068 ops/s
[info]                  ·gc.alloc.rate:                   2314.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3570658.739 ops/s
[info]                  ·gc.alloc.rate:                   2305.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1050.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3491928.894 ops/s
[info]                  ·gc.alloc.rate:                   2254.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     920.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter":
[info]   3560787.594 ±(99.9%) 149781.900 ops/s [Average]
[info]   (min, avg, max) = (3491928.894, 3560787.594, 3585020.068), stdev = 38897.884
[info]   CI (99.9%): [3411005.693, 3710569.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2298.870 ±(99.9%) 96.701 MB/sec [Average]
[info]   (min, avg, max) = (2254.403, 2298.870, 2314.515), stdev = 25.113
[info]   CI (99.9%): [2202.169, 2395.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   2311.000 ±(99.9%) 577.953 MB/sec [Average]
[info]   (min, avg, max) = (2042.613, 2311.000, 2383.041), stdev = 150.093
[info]   CI (99.9%): [1733.047, 2888.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1020.878 ±(99.9%) 216.172 B/op [Average]
[info]   (min, avg, max) = (920.552, 1020.878, 1050.233), stdev = 56.139
[info]   CI (99.9%): [804.706, 1237.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.050, 0.082), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay
[info] # Run progress: 68.66% complete, ETA 00:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78699.068 ops/s
[info] # Warmup Iteration   2: 243386.484 ops/s
[info] # Warmup Iteration   3: 260638.983 ops/s
[info] # Warmup Iteration   4: 262995.451 ops/s
[info] # Warmup Iteration   5: 262106.657 ops/s
[info] Iteration   1: 263540.790 ops/s
[info]                  ·gc.alloc.rate:                   1895.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11980.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 256633.800 ops/s
[info]                  ·gc.alloc.rate:                   1846.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10319.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.894 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 260161.283 ops/s
[info]                  ·gc.alloc.rate:                   1871.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12262.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.756 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 260299.063 ops/s
[info]                  ·gc.alloc.rate:                   1872.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12292.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 260585.543 ops/s
[info]                  ·gc.alloc.rate:                   1874.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10255.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay":
[info]   260244.096 ±(99.9%) 9437.788 ops/s [Average]
[info]   (min, avg, max) = (256633.800, 260244.096, 263540.790), stdev = 2450.964
[info]   CI (99.9%): [250806.308, 269681.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1871.991 ±(99.9%) 67.904 MB/sec [Average]
[info]   (min, avg, max) = (1846.026, 1871.991, 1895.722), stdev = 17.634
[info]   CI (99.9%): [1804.087, 1939.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   11320.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11320.002, 11320.002, 11320.002), stdev = 0.001
[info]   CI (99.9%): [11320.001, 11320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1889.537 ±(99.9%) 701.016 MB/sec [Average]
[info]   (min, avg, max) = (1682.846, 1889.537, 2033.318), stdev = 182.052
[info]   CI (99.9%): [1188.522, 2590.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   11421.954 ±(99.9%) 4016.597 B/op [Average]
[info]   (min, avg, max) = (10255.425, 11421.954, 12292.689), stdev = 1043.097
[info]   CI (99.9%): [7405.357, 15438.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.605 ±(99.9%) 0.816 B/op [Average]
[info]   (min, avg, max) = (0.378, 0.605, 0.894), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 1.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 69.40% complete, ETA 00:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 589480.036 ops/s
[info] # Warmup Iteration   2: 822374.413 ops/s
[info] # Warmup Iteration   3: 838424.164 ops/s
[info] # Warmup Iteration   4: 835000.634 ops/s
[info] # Warmup Iteration   5: 832261.297 ops/s
[info] Iteration   1: 838485.894 ops/s
[info]                  ·gc.alloc.rate:                   1947.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3796.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 840675.814 ops/s
[info]                  ·gc.alloc.rate:                   1952.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3801.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.273 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 841689.786 ops/s
[info]                  ·gc.alloc.rate:                   1955.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3805.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 830903.677 ops/s
[info]                  ·gc.alloc.rate:                   1930.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3217.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 829495.821 ops/s
[info]                  ·gc.alloc.rate:                   1927.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3870.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   836250.198 ±(99.9%) 21814.877 ops/s [Average]
[info]   (min, avg, max) = (829495.821, 836250.198, 841689.786), stdev = 5665.254
[info]   CI (99.9%): [814435.322, 858065.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1942.687 ±(99.9%) 50.595 MB/sec [Average]
[info]   (min, avg, max) = (1927.039, 1942.687, 1955.298), stdev = 13.139
[info]   CI (99.9%): [1892.092, 1993.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3656.001, 3656.001, 3656.001), stdev = 0.001
[info]   CI (99.9%): [3656.000, 3656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1965.384 ±(99.9%) 574.453 MB/sec [Average]
[info]   (min, avg, max) = (1698.763, 1965.384, 2039.911), stdev = 149.184
[info]   CI (99.9%): [1390.932, 2539.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3698.077 ±(99.9%) 1040.924 B/op [Average]
[info]   (min, avg, max) = (3217.524, 3698.077, 3870.142), stdev = 270.325
[info]   CI (99.9%): [2657.154, 4739.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.188 ±(99.9%) 0.341 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.188, 0.273), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson
[info] # Run progress: 70.15% complete, ETA 00:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 880847.406 ops/s
[info] # Warmup Iteration   2: 1768908.508 ops/s
[info] # Warmup Iteration   3: 1735504.932 ops/s
[info] # Warmup Iteration   4: 1716834.373 ops/s
[info] # Warmup Iteration   5: 1778865.727 ops/s
[info] Iteration   1: 1788302.249 ops/s
[info]                  ·gc.alloc.rate:                   1027.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     865.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1781383.189 ops/s
[info]                  ·gc.alloc.rate:                   1023.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     873.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1791963.259 ops/s
[info]                  ·gc.alloc.rate:                   1029.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     872.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1669787.758 ops/s
[info]                  ·gc.alloc.rate:                   959.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1776436.099 ops/s
[info]                  ·gc.alloc.rate:                   1020.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     887.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson":
[info]   1761574.511 ±(99.9%) 198932.503 ops/s [Average]
[info]   (min, avg, max) = (1669787.758, 1761574.511, 1791963.259), stdev = 51662.139
[info]   CI (99.9%): [1562642.008, 1960507.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1011.998 ±(99.9%) 114.429 MB/sec [Average]
[info]   (min, avg, max) = (959.198, 1011.998, 1029.397), stdev = 29.717
[info]   CI (99.9%): [897.570, 1126.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   993.303 ±(99.9%) 29.402 MB/sec [Average]
[info]   (min, avg, max) = (983.065, 993.303, 1002.222), stdev = 7.636
[info]   CI (99.9%): [963.901, 1022.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   888.016 ±(99.9%) 119.482 B/op [Average]
[info]   (min, avg, max) = (865.035, 888.016, 941.502), stdev = 31.029
[info]   CI (99.9%): [768.534, 1007.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.070, 0.092), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter
[info] # Run progress: 70.90% complete, ETA 00:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5780471.845 ops/s
[info] # Warmup Iteration   2: 5909520.953 ops/s
[info] # Warmup Iteration   3: 6300489.609 ops/s
[info] # Warmup Iteration   4: 6319099.388 ops/s
[info] # Warmup Iteration   5: 6306728.098 ops/s
[info] Iteration   1: 6282596.407 ops/s
[info]                  ·gc.alloc.rate:                   479.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6280241.095 ops/s
[info]                  ·gc.alloc.rate:                   478.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6182318.889 ops/s
[info]                  ·gc.alloc.rate:               471.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84.625 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 6230229.928 ops/s
[info]                  ·gc.alloc.rate:                   475.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6297916.079 ops/s
[info]                  ·gc.alloc.rate:               480.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83.232 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter":
[info]   6254660.480 ±(99.9%) 184026.825 ops/s [Average]
[info]   (min, avg, max) = (6182318.889, 6254660.480, 6297916.079), stdev = 47791.182
[info]   CI (99.9%): [6070633.654, 6438687.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   476.951 ±(99.9%) 13.986 MB/sec [Average]
[info]   (min, avg, max) = (471.465, 476.951, 480.234), stdev = 3.632
[info]   CI (99.9%): [462.964, 490.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   465.815 ±(99.9%) 702.051 MB/sec [Average]
[info]   (min, avg, max) = (332.431, 465.815, 666.182), stdev = 182.320
[info]   CI (99.9%): [≈ 0, 1167.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   117.200 ±(99.9%) 176.615 B/op [Average]
[info]   (min, avg, max) = (83.232, 117.200, 168.275), stdev = 45.866
[info]   CI (99.9%): [≈ 0, 293.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.037), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay
[info] # Run progress: 71.64% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197971.637 ops/s
[info] # Warmup Iteration   2: 484641.024 ops/s
[info] # Warmup Iteration   3: 491153.802 ops/s
[info] # Warmup Iteration   4: 497362.432 ops/s
[info] # Warmup Iteration   5: 493934.669 ops/s
[info] Iteration   1: 496083.291 ops/s
[info]                  ·gc.alloc.rate:                   1717.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5295.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.330 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 496333.026 ops/s
[info]                  ·gc.alloc.rate:                   1718.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5323.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 495210.313 ops/s
[info]                  ·gc.alloc.rate:                   1714.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5360.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 488867.683 ops/s
[info]                  ·gc.alloc.rate:                   1692.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5445.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 492222.557 ops/s
[info]                  ·gc.alloc.rate:                   1703.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5421.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay":
[info]   493743.374 ±(99.9%) 12240.365 ops/s [Average]
[info]   (min, avg, max) = (488867.683, 493743.374, 496333.026), stdev = 3178.784
[info]   CI (99.9%): [481503.009, 505983.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1709.399 ±(99.9%) 43.046 MB/sec [Average]
[info]   (min, avg, max) = (1692.329, 1709.399, 1718.687), stdev = 11.179
[info]   CI (99.9%): [1666.353, 1752.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1684.590 ±(99.9%) 39.976 MB/sec [Average]
[info]   (min, avg, max) = (1669.460, 1684.590, 1695.774), stdev = 10.382
[info]   CI (99.9%): [1644.614, 1724.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5369.242 ±(99.9%) 244.687 B/op [Average]
[info]   (min, avg, max) = (5295.123, 5369.242, 5445.126), stdev = 63.544
[info]   CI (99.9%): [5124.555, 5613.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.305 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (0.264, 0.305, 0.397), stdev = 0.058
[info]   CI (99.9%): [0.080, 0.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter
[info] # Run progress: 72.39% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2755302.648 ops/s
[info] # Warmup Iteration   2: 3210041.373 ops/s
[info] # Warmup Iteration   3: 3235170.294 ops/s
[info] # Warmup Iteration   4: 3192730.990 ops/s
[info] # Warmup Iteration   5: 3224384.332 ops/s
[info] Iteration   1: 3159284.934 ops/s
[info]                  ·gc.alloc.rate:                   1493.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     838.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3231893.624 ops/s
[info]                  ·gc.alloc.rate:                   1527.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     657.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3238505.145 ops/s
[info]                  ·gc.alloc.rate:                   1531.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     822.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3228904.747 ops/s
[info]                  ·gc.alloc.rate:                   1526.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     661.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3249060.541 ops/s
[info]                  ·gc.alloc.rate:                   1536.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     822.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter":
[info]   3221529.798 ±(99.9%) 137257.040 ops/s [Average]
[info]   (min, avg, max) = (3159284.934, 3221529.798, 3249060.541), stdev = 35645.217
[info]   CI (99.9%): [3084272.758, 3358786.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1523.112 ±(99.9%) 65.054 MB/sec [Average]
[info]   (min, avg, max) = (1493.583, 1523.112, 1536.104), stdev = 16.894
[info]   CI (99.9%): [1458.058, 1588.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1556.158 ±(99.9%) 712.804 MB/sec [Average]
[info]   (min, avg, max) = (1350.333, 1556.158, 1698.174), stdev = 185.113
[info]   CI (99.9%): [843.354, 2268.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   760.387 ±(99.9%) 356.259 B/op [Average]
[info]   (min, avg, max) = (657.524, 760.387, 838.260), stdev = 92.519
[info]   CI (99.9%): [404.128, 1116.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (0.030, 0.055, 0.091), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay
[info] # Run progress: 73.13% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128004.878 ops/s
[info] # Warmup Iteration   2: 304689.043 ops/s
[info] # Warmup Iteration   3: 312532.064 ops/s
[info] # Warmup Iteration   4: 310893.387 ops/s
[info] # Warmup Iteration   5: 298813.714 ops/s
[info] Iteration   1: 311822.639 ops/s
[info]                  ·gc.alloc.rate:                   1661.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8410.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 312687.772 ops/s
[info]                  ·gc.alloc.rate:                   1665.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8442.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.629 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 308960.592 ops/s
[info]                  ·gc.alloc.rate:                   1646.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8585.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 312529.381 ops/s
[info]                  ·gc.alloc.rate:                   1664.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8514.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 313491.690 ops/s
[info]                  ·gc.alloc.rate:                   1670.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8508.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.523 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay":
[info]   311898.415 ±(99.9%) 6723.834 ops/s [Average]
[info]   (min, avg, max) = (308960.592, 311898.415, 313491.690), stdev = 1746.158
[info]   CI (99.9%): [305174.580, 318622.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1661.656 ±(99.9%) 35.715 MB/sec [Average]
[info]   (min, avg, max) = (1646.044, 1661.656, 1670.090), stdev = 9.275
[info]   CI (99.9%): [1625.941, 1697.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.001), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1683.038 ±(99.9%) 43.521 MB/sec [Average]
[info]   (min, avg, max) = (1666.473, 1683.038, 1694.815), stdev = 11.302
[info]   CI (99.9%): [1639.517, 1726.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8492.062 ±(99.9%) 262.776 B/op [Average]
[info]   (min, avg, max) = (8410.300, 8492.062, 8585.484), stdev = 68.242
[info]   CI (99.9%): [8229.286, 8754.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.525 ±(99.9%) 0.285 B/op [Average]
[info]   (min, avg, max) = (0.419, 0.525, 0.629), stdev = 0.074
[info]   CI (99.9%): [0.240, 0.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 73.88% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277981.896 ops/s
[info] # Warmup Iteration   2: 516175.547 ops/s
[info] # Warmup Iteration   3: 522900.516 ops/s
[info] # Warmup Iteration   4: 509136.329 ops/s
[info] # Warmup Iteration   5: 525997.033 ops/s
[info] Iteration   1: 523237.075 ops/s
[info]                  ·gc.alloc.rate:                   1423.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5032.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 520885.720 ops/s
[info]                  ·gc.alloc.rate:                   1417.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4061.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 525498.589 ops/s
[info]                  ·gc.alloc.rate:                   1429.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4039.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 530510.765 ops/s
[info]                  ·gc.alloc.rate:                   1442.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4011.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 527443.983 ops/s
[info]                  ·gc.alloc.rate:                   1434.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5054.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   525515.227 ±(99.9%) 14317.212 ops/s [Average]
[info]   (min, avg, max) = (520885.720, 525515.227, 530510.765), stdev = 3718.134
[info]   CI (99.9%): [511198.015, 539832.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1429.389 ±(99.9%) 38.171 MB/sec [Average]
[info]   (min, avg, max) = (1417.043, 1429.389, 1442.792), stdev = 9.913
[info]   CI (99.9%): [1391.218, 1467.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.001), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1482.714 ±(99.9%) 707.859 MB/sec [Average]
[info]   (min, avg, max) = (1344.743, 1482.714, 1694.110), stdev = 183.829
[info]   CI (99.9%): [774.855, 2190.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4439.857 ±(99.9%) 2123.161 B/op [Average]
[info]   (min, avg, max) = (4011.627, 4439.857, 5054.600), stdev = 551.378
[info]   CI (99.9%): [2316.696, 6563.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.287 ±(99.9%) 0.504 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.287, 0.440), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter
[info] # Run progress: 74.63% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2701257.422 ops/s
[info] # Warmup Iteration   2: 2931462.330 ops/s
[info] # Warmup Iteration   3: 3018267.844 ops/s
[info] # Warmup Iteration   4: 3024459.109 ops/s
[info] # Warmup Iteration   5: 3024657.520 ops/s
[info] Iteration   1: 3023453.422 ops/s
[info]                  ·gc.alloc.rate:                   568.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3008166.429 ops/s
[info]                  ·gc.alloc.rate:                   565.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3029115.846 ops/s
[info]                  ·gc.alloc.rate:               569.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.051 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 3026530.296 ops/s
[info]                  ·gc.alloc.rate:                   569.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3032008.582 ops/s
[info]                  ·gc.alloc.rate:                   570.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter":
[info]   3023854.915 ±(99.9%) 35896.136 ops/s [Average]
[info]   (min, avg, max) = (3008166.429, 3023854.915, 3032008.582), stdev = 9322.113
[info]   CI (99.9%): [2987958.779, 3059751.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   568.767 ±(99.9%) 6.751 MB/sec [Average]
[info]   (min, avg, max) = (565.813, 568.767, 570.294), stdev = 1.753
[info]   CI (99.9%): [562.016, 575.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   599.588 ±(99.9%) 573.650 MB/sec [Average]
[info]   (min, avg, max) = (333.100, 599.588, 667.548), stdev = 148.975
[info]   CI (99.9%): [25.939, 1173.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   312.103 ±(99.9%) 299.334 B/op [Average]
[info]   (min, avg, max) = (173.051, 312.103, 348.168), stdev = 77.736
[info]   CI (99.9%): [12.769, 611.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay
[info] # Run progress: 75.37% complete, ETA 00:08:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108906.775 ops/s
[info] # Warmup Iteration   2: 353331.729 ops/s
[info] # Warmup Iteration   3: 359750.868 ops/s
[info] # Warmup Iteration   4: 362019.116 ops/s
[info] # Warmup Iteration   5: 344730.293 ops/s
[info] Iteration   1: 363478.242 ops/s
[info]                  ·gc.alloc.rate:                   1406.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5730.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.451 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 360348.754 ops/s
[info]                  ·gc.alloc.rate:                   1394.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7277.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.636 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 361733.118 ops/s
[info]                  ·gc.alloc.rate:                   1399.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5834.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 357963.421 ops/s
[info]                  ·gc.alloc.rate:                   1384.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5922.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 359081.419 ops/s
[info]                  ·gc.alloc.rate:                   1389.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5918.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.456 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay":
[info]   360520.991 ±(99.9%) 8360.816 ops/s [Average]
[info]   (min, avg, max) = (357963.421, 360520.991, 363478.242), stdev = 2171.277
[info]   CI (99.9%): [352160.175, 368881.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1394.723 ±(99.9%) 32.560 MB/sec [Average]
[info]   (min, avg, max) = (1384.735, 1394.723, 1406.220), stdev = 8.456
[info]   CI (99.9%): [1362.163, 1427.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1405.731 ±(99.9%) 562.988 MB/sec [Average]
[info]   (min, avg, max) = (1323.553, 1405.731, 1666.618), stdev = 146.206
[info]   CI (99.9%): [842.743, 1968.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   6136.537 ±(99.9%) 2475.216 B/op [Average]
[info]   (min, avg, max) = (5730.105, 6136.537, 7277.878), stdev = 642.806
[info]   CI (99.9%): [3661.321, 8611.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.418 ±(99.9%) 0.636 B/op [Average]
[info]   (min, avg, max) = (0.181, 0.418, 0.636), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 1.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 76.12% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255534.708 ops/s
[info] # Warmup Iteration   2: 654952.971 ops/s
[info] # Warmup Iteration   3: 700037.623 ops/s
[info] # Warmup Iteration   4: 696307.518 ops/s
[info] # Warmup Iteration   5: 699859.224 ops/s
[info] Iteration   1: 699781.352 ops/s
[info]                  ·gc.alloc.rate:                   2074.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4551.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 701357.710 ops/s
[info]                  ·gc.alloc.rate:                   2078.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4557.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 700015.666 ops/s
[info]                  ·gc.alloc.rate:                   2074.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4576.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 700413.439 ops/s
[info]                  ·gc.alloc.rate:                   2075.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4580.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 697504.931 ops/s
[info]                  ·gc.alloc.rate:                   2067.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2381.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5373.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   699814.619 ±(99.9%) 5484.938 ops/s [Average]
[info]   (min, avg, max) = (697504.931, 699814.619, 701357.710), stdev = 1424.421
[info]   CI (99.9%): [694329.682, 705299.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2074.055 ±(99.9%) 16.394 MB/sec [Average]
[info]   (min, avg, max) = (2067.137, 2074.055, 2078.686), stdev = 4.258
[info]   CI (99.9%): [2057.661, 2090.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4664.001, 4664.001, 4664.001), stdev = 0.001
[info]   CI (99.9%): [4664.001, 4664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2102.216 ±(99.9%) 601.584 MB/sec [Average]
[info]   (min, avg, max) = (2024.021, 2102.216, 2381.516), stdev = 156.229
[info]   CI (99.9%): [1500.632, 2703.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4727.867 ±(99.9%) 1390.195 B/op [Average]
[info]   (min, avg, max) = (4551.307, 4727.867, 5373.320), stdev = 361.029
[info]   CI (99.9%): [3337.671, 6118.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (0.140, 0.272, 0.374), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson
[info] # Run progress: 76.87% complete, ETA 00:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 535664.389 ops/s
[info] # Warmup Iteration   2: 1457144.190 ops/s
[info] # Warmup Iteration   3: 1458110.608 ops/s
[info] # Warmup Iteration   4: 1487776.464 ops/s
[info] # Warmup Iteration   5: 1486843.417 ops/s
[info] Iteration   1: 1475594.527 ops/s
[info]                  ·gc.alloc.rate:                   1117.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1054.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1452403.706 ops/s
[info]                  ·gc.alloc.rate:                   1100.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1436.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1453600.519 ops/s
[info]                  ·gc.alloc.rate:                   1101.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1081.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1488739.305 ops/s
[info]                  ·gc.alloc.rate:                   1127.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1061.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1484872.805 ops/s
[info]                  ·gc.alloc.rate:                   1124.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1423.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson":
[info]   1471042.172 ±(99.9%) 66047.314 ops/s [Average]
[info]   (min, avg, max) = (1452403.706, 1471042.172, 1488739.305), stdev = 17152.278
[info]   CI (99.9%): [1404994.858, 1537089.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate":
[info]   1114.343 ±(99.9%) 49.678 MB/sec [Average]
[info]   (min, avg, max) = (1100.466, 1114.343, 1127.601), stdev = 12.901
[info]   CI (99.9%): [1064.666, 1164.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1132.233 ±(99.9%) 711.274 MB/sec [Average]
[info]   (min, avg, max) = (989.212, 1132.233, 1342.986), stdev = 184.716
[info]   CI (99.9%): [420.959, 1843.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1211.452 ±(99.9%) 768.377 B/op [Average]
[info]   (min, avg, max) = (1054.744, 1211.452, 1436.060), stdev = 199.545
[info]   CI (99.9%): [443.074, 1979.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.116 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.116, 0.180), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter
[info] # Run progress: 77.61% complete, ETA 00:07:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4965164.735 ops/s
[info] # Warmup Iteration   2: 5371403.338 ops/s
[info] # Warmup Iteration   3: 5448012.446 ops/s
[info] # Warmup Iteration   4: 5428853.336 ops/s
[info] # Warmup Iteration   5: 5422132.910 ops/s
[info] Iteration   1: 5442009.408 ops/s
[info]                  ·gc.alloc.rate:      165.988 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5440487.188 ops/s
[info]                  ·gc.alloc.rate:               165.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5433492.217 ops/s
[info]                  ·gc.alloc.rate:                   165.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5457505.932 ops/s
[info]                  ·gc.alloc.rate:      166.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5410612.215 ops/s
[info]                  ·gc.alloc.rate:                   165.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter":
[info]   5436821.392 ±(99.9%) 65749.339 ops/s [Average]
[info]   (min, avg, max) = (5410612.215, 5436821.392, 5457505.932), stdev = 17074.895
[info]   CI (99.9%): [5371072.053, 5502570.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   165.825 ±(99.9%) 2.028 MB/sec [Average]
[info]   (min, avg, max) = (165.012, 165.825, 166.457), stdev = 0.527
[info]   CI (99.9%): [163.797, 167.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   153.480 ±(99.9%) 539.504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.480, 255.817), stdev = 140.107
[info]   CI (99.9%): [≈ 0, 692.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   44.498 ±(99.9%) 156.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.498, 74.403), stdev = 40.621
[info]   CI (99.9%): [≈ 0, 200.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay
[info] # Run progress: 78.36% complete, ETA 00:07:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48646.080 ops/s
[info] # Warmup Iteration   2: 231712.470 ops/s
[info] # Warmup Iteration   3: 234127.885 ops/s
[info] # Warmup Iteration   4: 237352.010 ops/s
[info] # Warmup Iteration   5: 236250.420 ops/s
[info] Iteration   1: 237218.879 ops/s
[info]                  ·gc.alloc.rate:                   1632.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11042.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.552 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 239614.966 ops/s
[info]                  ·gc.alloc.rate:                   1649.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11002.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.957 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 238628.459 ops/s
[info]                  ·gc.alloc.rate:                   1642.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11109.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 237084.116 ops/s
[info]                  ·gc.alloc.rate:                   1631.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8970.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.829 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 231356.864 ops/s
[info]                  ·gc.alloc.rate:                   1592.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11519.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay":
[info]   236780.657 ±(99.9%) 12350.507 ops/s [Average]
[info]   (min, avg, max) = (231356.864, 236780.657, 239614.966), stdev = 3207.387
[info]   CI (99.9%): [224430.150, 249131.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate":
[info]   1629.922 ±(99.9%) 84.783 MB/sec [Average]
[info]   (min, avg, max) = (1592.782, 1629.922, 1649.640), stdev = 22.018
[info]   CI (99.9%): [1545.139, 1714.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.002, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1613.965 ±(99.9%) 566.880 MB/sec [Average]
[info]   (min, avg, max) = (1351.329, 1613.965, 1693.820), stdev = 147.217
[info]   CI (99.9%): [1047.084, 2180.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   10728.596 ±(99.9%) 3867.346 B/op [Average]
[info]   (min, avg, max) = (8970.257, 10728.596, 11519.128), stdev = 1004.338
[info]   CI (99.9%): [6861.249, 14595.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.718 ±(99.9%) 0.669 B/op [Average]
[info]   (min, avg, max) = (0.552, 0.718, 0.957), stdev = 0.174
[info]   CI (99.9%): [0.049, 1.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 79.10% complete, ETA 00:07:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484210.784 ops/s
[info] # Warmup Iteration   2: 943921.348 ops/s
[info] # Warmup Iteration   3: 936047.680 ops/s
[info] # Warmup Iteration   4: 960702.495 ops/s
[info] # Warmup Iteration   5: 953697.515 ops/s
[info] Iteration   1: 958018.534 ops/s
[info]                  ·gc.alloc.rate:                   1646.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2756.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 959696.088 ops/s
[info]                  ·gc.alloc.rate:                   1648.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2763.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.273 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 961993.629 ops/s
[info]                  ·gc.alloc.rate:                   1652.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2766.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 952841.381 ops/s
[info]                  ·gc.alloc.rate:                   1637.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2799.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 960414.302 ops/s
[info]                  ·gc.alloc.rate:                   1650.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2782.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   958592.787 ±(99.9%) 13547.120 ops/s [Average]
[info]   (min, avg, max) = (952841.381, 958592.787, 961993.629), stdev = 3518.144
[info]   CI (99.9%): [945045.667, 972139.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1647.044 ±(99.9%) 23.353 MB/sec [Average]
[info]   (min, avg, max) = (1637.131, 1647.044, 1652.894), stdev = 6.065
[info]   CI (99.9%): [1623.691, 1670.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2704.000, 2704.000, 2704.000), stdev = 0.001
[info]   CI (99.9%): [2704.000, 2704.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1689.348 ±(99.9%) 30.909 MB/sec [Average]
[info]   (min, avg, max) = (1677.747, 1689.348, 1698.057), stdev = 8.027
[info]   CI (99.9%): [1658.439, 1720.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2773.484 ±(99.9%) 66.476 B/op [Average]
[info]   (min, avg, max) = (2756.079, 2773.484, 2799.169), stdev = 17.264
[info]   CI (99.9%): [2707.009, 2839.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.171 ±(99.9%) 0.262 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.171, 0.273), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson
[info] # Run progress: 79.85% complete, ETA 00:07:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 996826.860 ops/s
[info] # Warmup Iteration   2: 2457214.148 ops/s
[info] # Warmup Iteration   3: 2471105.192 ops/s
[info] # Warmup Iteration   4: 2475178.241 ops/s
[info] # Warmup Iteration   5: 2340143.023 ops/s
[info] Iteration   1: 2476461.210 ops/s
[info]                  ·gc.alloc.rate:                   1095.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     628.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2463554.526 ops/s
[info]                  ·gc.alloc.rate:                   1089.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2476284.432 ops/s
[info]                  ·gc.alloc.rate:                   1095.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2467628.994 ops/s
[info]                  ·gc.alloc.rate:                   1091.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     853.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2469482.978 ops/s
[info]                  ·gc.alloc.rate:                   1092.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson":
[info]   2470682.428 ±(99.9%) 21641.329 ops/s [Average]
[info]   (min, avg, max) = (2463554.526, 2470682.428, 2476461.210), stdev = 5620.185
[info]   CI (99.9%): [2449041.099, 2492323.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1092.692 ±(99.9%) 9.538 MB/sec [Average]
[info]   (min, avg, max) = (1089.534, 1092.692, 1095.214), stdev = 2.477
[info]   CI (99.9%): [1083.154, 1102.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1065.353 ±(99.9%) 586.797 MB/sec [Average]
[info]   (min, avg, max) = (989.281, 1065.353, 1337.675), stdev = 152.389
[info]   CI (99.9%): [478.556, 1652.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   678.643 ±(99.9%) 375.963 B/op [Average]
[info]   (min, avg, max) = (628.681, 678.643, 853.092), stdev = 97.636
[info]   CI (99.9%): [302.680, 1054.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.053, 0.079), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter
[info] # Run progress: 80.60% complete, ETA 00:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4650556.719 ops/s
[info] # Warmup Iteration   2: 6534441.337 ops/s
[info] # Warmup Iteration   3: 6551761.756 ops/s
[info] # Warmup Iteration   4: 6538975.062 ops/s
[info] # Warmup Iteration   5: 6537912.206 ops/s
[info] Iteration   1: 6542361.593 ops/s
[info]                  ·gc.alloc.rate:               532.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80.127 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 6568069.625 ops/s
[info]                  ·gc.alloc.rate:                   534.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6382463.965 ops/s
[info]                  ·gc.alloc.rate:               519.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82.133 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 6445985.364 ops/s
[info]                  ·gc.alloc.rate:                   524.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6535333.729 ops/s
[info]                  ·gc.alloc.rate:               531.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter":
[info]   6494842.855 ±(99.9%) 299978.325 ops/s [Average]
[info]   (min, avg, max) = (6382463.965, 6494842.855, 6568069.625), stdev = 77903.418
[info]   CI (99.9%): [6194864.530, 6794821.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   528.320 ±(99.9%) 24.166 MB/sec [Average]
[info]   (min, avg, max) = (519.244, 528.320, 534.232), stdev = 6.276
[info]   CI (99.9%): [504.154, 552.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   466.655 ±(99.9%) 702.881 MB/sec [Average]
[info]   (min, avg, max) = (333.103, 466.655, 667.029), stdev = 182.536
[info]   CI (99.9%): [≈ 0, 1169.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   113.011 ±(99.9%) 169.517 B/op [Average]
[info]   (min, avg, max) = (80.127, 113.011, 162.806), stdev = 44.023
[info]   CI (99.9%): [≈ 0, 282.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc
[info] # Run progress: 81.34% complete, ETA 00:06:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5180534.991 ops/s
[info] # Warmup Iteration   2: 6992377.251 ops/s
[info] # Warmup Iteration   3: 7178485.632 ops/s
[info] # Warmup Iteration   4: 7143216.078 ops/s
[info] # Warmup Iteration   5: 7028017.241 ops/s
[info] Iteration   1: 7192988.852 ops/s
[info]                  ·gc.alloc.rate:                   219.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7198529.970 ops/s
[info]                  ·gc.alloc.rate:      219.560 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7164024.627 ops/s
[info]                  ·gc.alloc.rate:               218.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.195 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 7150390.134 ops/s
[info]                  ·gc.alloc.rate:                   218.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7157707.446 ops/s
[info]                  ·gc.alloc.rate:      218.369 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc":
[info]   7172728.206 ±(99.9%) 83404.223 ops/s [Average]
[info]   (min, avg, max) = (7150390.134, 7172728.206, 7198529.970), stdev = 21659.812
[info]   CI (99.9%): [7089323.983, 7256132.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   218.783 ±(99.9%) 2.512 MB/sec [Average]
[info]   (min, avg, max) = (218.089, 218.783, 219.560), stdev = 0.652
[info]   CI (99.9%): [216.271, 221.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   169.009 ±(99.9%) 606.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 169.009, 333.421), stdev = 157.503
[info]   CI (99.9%): [≈ 0, 775.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   37.110 ±(99.9%) 133.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.110, 73.384), stdev = 34.605
[info]   CI (99.9%): [≈ 0, 170.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.313 ±(99.9%) 2.670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 1.553), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 2.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.342), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay
[info] # Run progress: 82.09% complete, ETA 00:06:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54565.598 ops/s
[info] # Warmup Iteration   2: 304067.605 ops/s
[info] # Warmup Iteration   3: 312633.784 ops/s
[info] # Warmup Iteration   4: 313505.184 ops/s
[info] # Warmup Iteration   5: 313046.023 ops/s
[info] Iteration   1: 313622.826 ops/s
[info]                  ·gc.alloc.rate:                   1632.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8352.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 313604.091 ops/s
[info]                  ·gc.alloc.rate:                   1632.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6720.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 312582.472 ops/s
[info]                  ·gc.alloc.rate:                   1627.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8471.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 312646.113 ops/s
[info]                  ·gc.alloc.rate:                   1627.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8500.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 307938.641 ops/s
[info]                  ·gc.alloc.rate:                   1603.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8654.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay":
[info]   312078.829 ±(99.9%) 9117.772 ops/s [Average]
[info]   (min, avg, max) = (307938.641, 312078.829, 313622.826), stdev = 2367.856
[info]   CI (99.9%): [302961.057, 321196.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate":
[info]   1624.671 ±(99.9%) 47.164 MB/sec [Average]
[info]   (min, avg, max) = (1603.326, 1624.671, 1632.915), stdev = 12.248
[info]   CI (99.9%): [1577.507, 1671.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   8192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8192.001, 8192.001, 8192.002), stdev = 0.001
[info]   CI (99.9%): [8192.001, 8192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1613.902 ±(99.9%) 591.796 MB/sec [Average]
[info]   (min, avg, max) = (1339.691, 1613.902, 1693.855), stdev = 153.688
[info]   CI (99.9%): [1022.105, 2205.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   8140.068 ±(99.9%) 3082.780 B/op [Average]
[info]   (min, avg, max) = (6720.955, 8140.068, 8654.550), stdev = 800.588
[info]   CI (99.9%): [5057.288, 11222.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.064, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.504 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (0.419, 0.504, 0.532), stdev = 0.048
[info]   CI (99.9%): [0.321, 0.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce
[info] # Run progress: 82.84% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 338868.357 ops/s
[info] # Warmup Iteration   2: 464291.730 ops/s
[info] # Warmup Iteration   3: 466247.067 ops/s
[info] # Warmup Iteration   4: 469841.593 ops/s
[info] # Warmup Iteration   5: 462690.829 ops/s
[info] Iteration   1: 468622.895 ops/s
[info]                  ·gc.alloc.rate:                   1834.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5661.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 471298.568 ops/s
[info]                  ·gc.alloc.rate:                   1844.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6775.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 471563.424 ops/s
[info]                  ·gc.alloc.rate:                   1846.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5659.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 466711.734 ops/s
[info]                  ·gc.alloc.rate:                   1826.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6872.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 464867.819 ops/s
[info]                  ·gc.alloc.rate:                   1819.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5752.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce":
[info]   468612.888 ±(99.9%) 11153.344 ops/s [Average]
[info]   (min, avg, max) = (464867.819, 468612.888, 471563.424), stdev = 2896.488
[info]   CI (99.9%): [457459.544, 479766.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate":
[info]   1834.343 ±(99.9%) 43.947 MB/sec [Average]
[info]   (min, avg, max) = (1819.579, 1834.343, 1846.087), stdev = 11.413
[info]   CI (99.9%): [1790.397, 1878.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm":
[info]   6160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.001, 6160.001, 6160.001), stdev = 0.001
[info]   CI (99.9%): [6160.001, 6160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1829.733 ±(99.9%) 717.130 MB/sec [Average]
[info]   (min, avg, max) = (1686.014, 1829.733, 2038.153), stdev = 186.236
[info]   CI (99.9%): [1112.603, 2546.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6144.383 ±(99.9%) 2396.750 B/op [Average]
[info]   (min, avg, max) = (5659.320, 6144.383, 6872.369), stdev = 622.428
[info]   CI (99.9%): [3747.633, 8541.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.307 ±(99.9%) 0.614 B/op [Average]
[info]   (min, avg, max) = (0.140, 0.307, 0.487), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson
[info] # Run progress: 83.58% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518448.006 ops/s
[info] # Warmup Iteration   2: 1022567.979 ops/s
[info] # Warmup Iteration   3: 1034845.962 ops/s
[info] # Warmup Iteration   4: 1037774.663 ops/s
[info] # Warmup Iteration   5: 1040000.195 ops/s
[info] Iteration   1: 1031938.494 ops/s
[info]                  ·gc.alloc.rate:                   2161.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3085.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1035753.160 ops/s
[info]                  ·gc.alloc.rate:                   2169.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3086.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1042339.106 ops/s
[info]                  ·gc.alloc.rate:                   2183.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3586.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1039873.111 ops/s
[info]                  ·gc.alloc.rate:                   2177.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3085.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1027624.930 ops/s
[info]                  ·gc.alloc.rate:                   2153.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3643.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson":
[info]   1035505.760 ±(99.9%) 22834.549 ops/s [Average]
[info]   (min, avg, max) = (1027624.930, 1035505.760, 1042339.106), stdev = 5930.060
[info]   CI (99.9%): [1012671.211, 1058340.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate":
[info]   2168.973 ±(99.9%) 46.361 MB/sec [Average]
[info]   (min, avg, max) = (2153.411, 2168.973, 2183.014), stdev = 12.040
[info]   CI (99.9%): [2122.612, 2215.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm":
[info]   3296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3296.000, 3296.000, 3296.000), stdev = 0.001
[info]   CI (99.9%): [3296.000, 3296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   2169.838 ±(99.9%) 732.613 MB/sec [Average]
[info]   (min, avg, max) = (2023.194, 2169.838, 2380.705), stdev = 190.257
[info]   CI (99.9%): [1437.226, 2902.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3297.469 ±(99.9%) 1120.088 B/op [Average]
[info]   (min, avg, max) = (3085.032, 3297.469, 3643.896), stdev = 290.883
[info]   CI (99.9%): [2177.381, 4417.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.158 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (0.127, 0.158, 0.190), stdev = 0.022
[info]   CI (99.9%): [0.073, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter
[info] # Run progress: 84.33% complete, ETA 00:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1135936.056 ops/s
[info] # Warmup Iteration   2: 1202537.688 ops/s
[info] # Warmup Iteration   3: 1220340.064 ops/s
[info] # Warmup Iteration   4: 1210682.012 ops/s
[info] # Warmup Iteration   5: 1203115.821 ops/s
[info] Iteration   1: 1214299.852 ops/s
[info]                  ·gc.alloc.rate:                   2043.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2634.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1177162.898 ops/s
[info]                  ·gc.alloc.rate:                   1981.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2722.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1221465.370 ops/s
[info]                  ·gc.alloc.rate:                   2055.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2626.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1217540.912 ops/s
[info]                  ·gc.alloc.rate:                   2048.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2639.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1203745.675 ops/s
[info]                  ·gc.alloc.rate:                   2025.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2670.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter":
[info]   1206842.941 ±(99.9%) 68730.638 ops/s [Average]
[info]   (min, avg, max) = (1177162.898, 1206842.941, 1221465.370), stdev = 17849.128
[info]   CI (99.9%): [1138112.304, 1275573.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate":
[info]   2030.931 ±(99.9%) 114.771 MB/sec [Average]
[info]   (min, avg, max) = (1981.514, 2030.931, 2055.702), stdev = 29.806
[info]   CI (99.9%): [1916.159, 2145.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm":
[info]   2648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2648.000, 2648.000, 2648.000), stdev = 0.001
[info]   CI (99.9%): [2648.000, 2648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   2038.609 ±(99.9%) 15.612 MB/sec [Average]
[info]   (min, avg, max) = (2032.440, 2038.609, 2042.510), stdev = 4.054
[info]   CI (99.9%): [2022.997, 2054.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   2658.471 ±(99.9%) 152.147 B/op [Average]
[info]   (min, avg, max) = (2626.395, 2658.471, 2722.540), stdev = 39.512
[info]   CI (99.9%): [2506.324, 2810.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.120 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (0.081, 0.120, 0.167), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce
[info] # Run progress: 85.07% complete, ETA 00:05:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1135994.691 ops/s
[info] # Warmup Iteration   2: 1592618.561 ops/s
[info] # Warmup Iteration   3: 1610469.647 ops/s
[info] # Warmup Iteration   4: 1596224.311 ops/s
[info] # Warmup Iteration   5: 1603632.362 ops/s
[info] Iteration   1: 1599646.911 ops/s
[info]                  ·gc.alloc.rate:                   1959.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1993.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1607400.923 ops/s
[info]                  ·gc.alloc.rate:                   1969.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1657.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1606914.371 ops/s
[info]                  ·gc.alloc.rate:                   1968.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1994.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1612851.422 ops/s
[info]                  ·gc.alloc.rate:                   1975.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1989.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1559157.608 ops/s
[info]                  ·gc.alloc.rate:                   1910.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2060.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce":
[info]   1597194.247 ±(99.9%) 83847.841 ops/s [Average]
[info]   (min, avg, max) = (1559157.608, 1597194.247, 1612851.422), stdev = 21775.018
[info]   CI (99.9%): [1513346.406, 1681042.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate":
[info]   1956.706 ±(99.9%) 102.857 MB/sec [Average]
[info]   (min, avg, max) = (1910.044, 1956.706, 1975.860), stdev = 26.712
[info]   CI (99.9%): [1853.849, 2059.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1928.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1928.000, 1928.000, 1928.000), stdev = 0.001
[info]   CI (99.9%): [1928.000, 1928.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1967.201 ±(99.9%) 589.919 MB/sec [Average]
[info]   (min, avg, max) = (1693.357, 1967.201, 2041.765), stdev = 153.200
[info]   CI (99.9%): [1377.282, 2557.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1939.101 ±(99.9%) 616.121 B/op [Average]
[info]   (min, avg, max) = (1657.894, 1939.101, 2060.960), stdev = 160.005
[info]   CI (99.9%): [1322.979, 2555.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.098 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.098, 0.143), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson
[info] # Run progress: 85.82% complete, ETA 00:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 621568.511 ops/s
[info] # Warmup Iteration   2: 1247223.670 ops/s
[info] # Warmup Iteration   3: 1253765.791 ops/s
[info] # Warmup Iteration   4: 1254718.185 ops/s
[info] # Warmup Iteration   5: 1256420.303 ops/s
[info] Iteration   1: 1247270.638 ops/s
[info]                  ·gc.alloc.rate:                   716.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     827.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1254629.468 ops/s
[info]                  ·gc.alloc.rate:                   720.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     825.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1258657.884 ops/s
[info]                  ·gc.alloc.rate:                   722.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1257992.729 ops/s
[info]                  ·gc.alloc.rate:                   722.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1234757.722 ops/s
[info]                  ·gc.alloc.rate:               709.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 846.528 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson":
[info]   1250661.688 ±(99.9%) 38403.391 ops/s [Average]
[info]   (min, avg, max) = (1234757.722, 1250661.688, 1258657.884), stdev = 9973.239
[info]   CI (99.9%): [1212258.297, 1289065.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate":
[info]   718.444 ±(99.9%) 21.985 MB/sec [Average]
[info]   (min, avg, max) = (709.282, 718.444, 722.998), stdev = 5.710
[info]   CI (99.9%): [696.459, 740.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   726.156 ±(99.9%) 567.165 MB/sec [Average]
[info]   (min, avg, max) = (656.357, 726.156, 989.573), stdev = 147.291
[info]   CI (99.9%): [158.991, 1293.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   913.232 ±(99.9%) 698.351 B/op [Average]
[info]   (min, avg, max) = (825.194, 913.232, 1237.311), stdev = 181.360
[info]   CI (99.9%): [214.881, 1611.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.157), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter
[info] # Run progress: 86.57% complete, ETA 00:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2036172.350 ops/s
[info] # Warmup Iteration   2: 2185814.406 ops/s
[info] # Warmup Iteration   3: 2188090.477 ops/s
[info] # Warmup Iteration   4: 2049370.663 ops/s
[info] # Warmup Iteration   5: 2184070.464 ops/s
[info] Iteration   1: 2182619.743 ops/s
[info]                  ·gc.alloc.rate:                   355.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2190344.420 ops/s
[info]                  ·gc.alloc.rate:               356.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 241.231 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2194564.993 ops/s
[info]                  ·gc.alloc.rate:                   356.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2192731.248 ops/s
[info]                  ·gc.alloc.rate:                   356.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2185247.298 ops/s
[info]                  ·gc.alloc.rate:                   355.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter":
[info]   2189101.541 ±(99.9%) 19391.129 ops/s [Average]
[info]   (min, avg, max) = (2182619.743, 2189101.541, 2194564.993), stdev = 5035.815
[info]   CI (99.9%): [2169710.412, 2208492.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate":
[info]   356.098 ±(99.9%) 3.158 MB/sec [Average]
[info]   (min, avg, max) = (355.050, 356.098, 356.992), stdev = 0.820
[info]   CI (99.9%): [352.940, 359.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   402.357 ±(99.9%) 576.421 MB/sec [Average]
[info]   (min, avg, max) = (335.072, 402.357, 670.138), stdev = 149.695
[info]   CI (99.9%): [≈ 0, 978.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   289.344 ±(99.9%) 416.073 B/op [Average]
[info]   (min, avg, max) = (240.285, 289.344, 482.630), stdev = 108.053
[info]   CI (99.9%): [≈ 0, 705.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.319 ±(99.9%) 2.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.449), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.230 ±(99.9%) 1.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.230, 1.045), stdev = 0.456
[info]   CI (99.9%): [≈ 0, 1.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce
[info] # Run progress: 87.31% complete, ETA 00:04:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183986.332 ops/s
[info] # Warmup Iteration   2: 270567.069 ops/s
[info] # Warmup Iteration   3: 273409.045 ops/s
[info] # Warmup Iteration   4: 271437.073 ops/s
[info] # Warmup Iteration   5: 275064.158 ops/s
[info] Iteration   1: 272927.500 ops/s
[info]                  ·gc.alloc.rate:                   1392.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7722.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.480 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 276337.972 ops/s
[info]                  ·gc.alloc.rate:                   1410.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7657.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.830 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 276995.555 ops/s
[info]                  ·gc.alloc.rate:                   1414.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7666.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.828 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 275236.058 ops/s
[info]                  ·gc.alloc.rate:                   1404.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7731.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 267968.008 ops/s
[info]                  ·gc.alloc.rate:                   1367.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7957.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.611 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce":
[info]   273893.019 ±(99.9%) 14075.310 ops/s [Average]
[info]   (min, avg, max) = (267968.008, 273893.019, 276995.555), stdev = 3655.313
[info]   CI (99.9%): [259817.709, 287968.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate":
[info]   1398.100 ±(99.9%) 71.897 MB/sec [Average]
[info]   (min, avg, max) = (1367.950, 1398.100, 1414.104), stdev = 18.671
[info]   CI (99.9%): [1326.203, 1469.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm":
[info]   8032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8032.002, 8032.002, 8032.002), stdev = 0.001
[info]   CI (99.9%): [8032.001, 8032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1348.328 ±(99.9%) 24.311 MB/sec [Average]
[info]   (min, avg, max) = (1339.298, 1348.328, 1355.334), stdev = 6.313
[info]   CI (99.9%): [1324.018, 1372.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7747.317 ±(99.9%) 470.680 B/op [Average]
[info]   (min, avg, max) = (7657.813, 7747.317, 7957.925), stdev = 122.234
[info]   CI (99.9%): [7276.637, 8217.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.009, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.669 ±(99.9%) 0.595 B/op [Average]
[info]   (min, avg, max) = (0.480, 0.669, 0.830), stdev = 0.155
[info]   CI (99.9%): [0.074, 1.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson
[info] # Run progress: 88.06% complete, ETA 00:04:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447542.492 ops/s
[info] # Warmup Iteration   2: 792317.338 ops/s
[info] # Warmup Iteration   3: 798231.033 ops/s
[info] # Warmup Iteration   4: 785295.146 ops/s
[info] # Warmup Iteration   5: 806661.598 ops/s
[info] Iteration   1: 801278.538 ops/s
[info]                  ·gc.alloc.rate:                   810.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1938.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 808342.594 ops/s
[info]                  ·gc.alloc.rate:                   817.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1284.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 807428.931 ops/s
[info]                  ·gc.alloc.rate:                   816.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1936.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 789540.402 ops/s
[info]                  ·gc.alloc.rate:                   798.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1325.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 808481.864 ops/s
[info]                  ·gc.alloc.rate:                   817.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1298.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson":
[info]   803014.466 ±(99.9%) 31183.842 ops/s [Average]
[info]   (min, avg, max) = (789540.402, 803014.466, 808481.864), stdev = 8098.345
[info]   CI (99.9%): [771830.624, 834198.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate":
[info]   812.421 ±(99.9%) 31.200 MB/sec [Average]
[info]   (min, avg, max) = (798.972, 812.421, 817.895), stdev = 8.103
[info]   CI (99.9%): [781.221, 843.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.000, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   794.461 ±(99.9%) 688.062 MB/sec [Average]
[info]   (min, avg, max) = (659.943, 794.461, 993.364), stdev = 178.688
[info]   CI (99.9%): [106.399, 1482.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1556.508 ±(99.9%) 1339.438 B/op [Average]
[info]   (min, avg, max) = (1284.702, 1556.508, 1938.393), stdev = 347.848
[info]   CI (99.9%): [217.070, 2895.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.082, 0.124), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter
[info] # Run progress: 88.81% complete, ETA 00:03:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 794175.517 ops/s
[info] # Warmup Iteration   2: 1014273.919 ops/s
[info] # Warmup Iteration   3: 944682.168 ops/s
[info] # Warmup Iteration   4: 946469.591 ops/s
[info] # Warmup Iteration   5: 948115.441 ops/s
[info] Iteration   1: 944974.989 ops/s
[info]                  ·gc.alloc.rate:                   797.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1110.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 941111.168 ops/s
[info]                  ·gc.alloc.rate:                   794.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1675.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 940358.598 ops/s
[info]                  ·gc.alloc.rate:                   793.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1120.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 942203.472 ops/s
[info]                  ·gc.alloc.rate:                   795.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1120.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 943388.942 ops/s
[info]                  ·gc.alloc.rate:                   796.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1681.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter":
[info]   942407.434 ±(99.9%) 7067.619 ops/s [Average]
[info]   (min, avg, max) = (940358.598, 942407.434, 944974.989), stdev = 1835.438
[info]   CI (99.9%): [935339.815, 949475.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate":
[info]   795.287 ±(99.9%) 5.839 MB/sec [Average]
[info]   (min, avg, max) = (793.499, 795.287, 797.390), stdev = 1.516
[info]   CI (99.9%): [789.448, 801.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   803.430 ±(99.9%) 708.659 MB/sec [Average]
[info]   (min, avg, max) = (666.831, 803.430, 1007.879), stdev = 184.037
[info]   CI (99.9%): [94.770, 1512.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1341.617 ±(99.9%) 1183.688 B/op [Average]
[info]   (min, avg, max) = (1110.562, 1341.617, 1681.261), stdev = 307.400
[info]   CI (99.9%): [157.929, 2525.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.146 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.146, 0.209), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc
[info] # Run progress: 89.55% complete, ETA 00:03:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 806129.769 ops/s
[info] # Warmup Iteration   2: 880369.116 ops/s
[info] # Warmup Iteration   3: 1180847.114 ops/s
[info] # Warmup Iteration   4: 1180191.836 ops/s
[info] # Warmup Iteration   5: 1178353.408 ops/s
[info] Iteration   1: 1179471.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1182065.299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1181107.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1185830.939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1182695.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc":
[info]   1182234.226 ±(99.9%) 9046.351 ops/s [Average]
[info]   (min, avg, max) = (1179471.973, 1182234.226, 1185830.939), stdev = 2349.309
[info]   CI (99.9%): [1173187.875, 1191280.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay
[info] # Run progress: 90.30% complete, ETA 00:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 682054.441 ops/s
[info] # Warmup Iteration   2: 891240.300 ops/s
[info] # Warmup Iteration   3: 910726.926 ops/s
[info] # Warmup Iteration   4: 917535.800 ops/s
[info] # Warmup Iteration   5: 915860.409 ops/s
[info] Iteration   1: 917218.839 ops/s
[info]                  ·gc.alloc.rate:                   979.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1709.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 914148.478 ops/s
[info]                  ·gc.alloc.rate:                   975.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1721.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 915944.270 ops/s
[info]                  ·gc.alloc.rate:                   977.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1723.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 918833.457 ops/s
[info]                  ·gc.alloc.rate:                   980.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1724.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 912084.097 ops/s
[info]                  ·gc.alloc.rate:                   973.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1740.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay":
[info]   915645.828 ±(99.9%) 10124.410 ops/s [Average]
[info]   (min, avg, max) = (912084.097, 915645.828, 918833.457), stdev = 2629.277
[info]   CI (99.9%): [905521.418, 925770.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate":
[info]   977.492 ±(99.9%) 10.695 MB/sec [Average]
[info]   (min, avg, max) = (973.767, 977.492, 980.897), stdev = 2.777
[info]   CI (99.9%): [966.797, 988.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm":
[info]   1680.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.000, 1680.000, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.000, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   1003.093 ±(99.9%) 19.315 MB/sec [Average]
[info]   (min, avg, max) = (996.562, 1003.093, 1008.855), stdev = 5.016
[info]   CI (99.9%): [983.778, 1022.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   1724.016 ±(99.9%) 42.170 B/op [Average]
[info]   (min, avg, max) = (1709.897, 1724.016, 1740.538), stdev = 10.951
[info]   CI (99.9%): [1681.845, 1766.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.093 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.093, 0.143), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce
[info] # Run progress: 91.04% complete, ETA 00:03:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1014020.272 ops/s
[info] # Warmup Iteration   2: 1476549.670 ops/s
[info] # Warmup Iteration   3: 1482377.609 ops/s
[info] # Warmup Iteration   4: 1495924.706 ops/s
[info] # Warmup Iteration   5: 1475862.800 ops/s
[info] Iteration   1: 1485709.182 ops/s
[info]                  ·gc.alloc.rate:                   966.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1477836.919 ops/s
[info]                  ·gc.alloc.rate:                   961.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1468777.821 ops/s
[info]                  ·gc.alloc.rate:                   955.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1074.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1468841.724 ops/s
[info]                  ·gc.alloc.rate:                   955.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1077.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1484244.009 ops/s
[info]                  ·gc.alloc.rate:                   965.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1069.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce":
[info]   1477081.931 ±(99.9%) 31232.621 ops/s [Average]
[info]   (min, avg, max) = (1468777.821, 1477081.931, 1485709.182), stdev = 8111.012
[info]   CI (99.9%): [1445849.310, 1508314.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate":
[info]   961.090 ±(99.9%) 20.417 MB/sec [Average]
[info]   (min, avg, max) = (955.648, 961.090, 966.699), stdev = 5.302
[info]   CI (99.9%): [940.673, 981.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1024.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.000, 1024.000, 1024.000), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   936.402 ±(99.9%) 580.445 MB/sec [Average]
[info]   (min, avg, max) = (666.854, 936.402, 1009.018), stdev = 150.740
[info]   CI (99.9%): [355.957, 1516.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   997.765 ±(99.9%) 619.941 B/op [Average]
[info]   (min, avg, max) = (710.117, 997.765, 1077.478), stdev = 160.997
[info]   CI (99.9%): [377.824, 1617.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.084, 0.133), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson
[info] # Run progress: 91.79% complete, ETA 00:02:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1446212.688 ops/s
[info] # Warmup Iteration   2: 2849451.618 ops/s
[info] # Warmup Iteration   3: 2880971.492 ops/s
[info] # Warmup Iteration   4: 2921255.711 ops/s
[info] # Warmup Iteration   5: 2920840.325 ops/s
[info] Iteration   1: 2906977.950 ops/s
[info]                  ·gc.alloc.rate:                   1063.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     537.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2923124.804 ops/s
[info]                  ·gc.alloc.rate:                   1069.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     536.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2904361.525 ops/s
[info]                  ·gc.alloc.rate:                   1063.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     542.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2932618.793 ops/s
[info]                  ·gc.alloc.rate:                   1073.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2911389.735 ops/s
[info]                  ·gc.alloc.rate:                   1065.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     726.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson":
[info]   2915694.561 ±(99.9%) 45747.638 ops/s [Average]
[info]   (min, avg, max) = (2904361.525, 2915694.561, 2932618.793), stdev = 11880.516
[info]   CI (99.9%): [2869946.923, 2961442.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate":
[info]   1067.239 ±(99.9%) 16.621 MB/sec [Average]
[info]   (min, avg, max) = (1063.301, 1067.239, 1073.406), stdev = 4.317
[info]   CI (99.9%): [1050.617, 1083.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm":
[info]   576.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (576.000, 576.000, 576.000), stdev = 0.001
[info]   CI (99.9%): [576.000, 576.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   1067.524 ±(99.9%) 596.045 MB/sec [Average]
[info]   (min, avg, max) = (992.219, 1067.524, 1344.295), stdev = 154.791
[info]   CI (99.9%): [471.479, 1663.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   576.215 ±(99.9%) 323.970 B/op [Average]
[info]   (min, avg, max) = (536.002, 576.215, 726.658), stdev = 84.134
[info]   CI (99.9%): [252.245, 900.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.052, 0.068), stdev = 0.013
[info]   CI (99.9%): [0.002, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter
[info] # Run progress: 92.54% complete, ETA 00:02:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2575329.943 ops/s
[info] # Warmup Iteration   2: 3242208.054 ops/s
[info] # Warmup Iteration   3: 3268612.740 ops/s
[info] # Warmup Iteration   4: 3285564.887 ops/s
[info] # Warmup Iteration   5: 3293067.583 ops/s
[info] Iteration   1: 3286066.289 ops/s
[info]                  ·gc.alloc.rate:                   651.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     319.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3297235.753 ops/s
[info]                  ·gc.alloc.rate:                   653.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3300401.885 ops/s
[info]                  ·gc.alloc.rate:                   654.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3309883.841 ops/s
[info]                  ·gc.alloc.rate:                   656.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3199996.373 ops/s
[info]                  ·gc.alloc.rate:                   634.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     329.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter":
[info]   3278716.828 ±(99.9%) 172587.686 ops/s [Average]
[info]   (min, avg, max) = (3199996.373, 3278716.828, 3309883.841), stdev = 44820.474
[info]   CI (99.9%): [3106129.143, 3451304.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate":
[info]   650.060 ±(99.9%) 34.294 MB/sec [Average]
[info]   (min, avg, max) = (634.418, 650.060, 656.224), stdev = 8.906
[info]   CI (99.9%): [615.766, 684.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   667.560 ±(99.9%) 5.367 MB/sec [Average]
[info]   (min, avg, max) = (666.159, 667.560, 669.526), stdev = 1.394
[info]   CI (99.9%): [662.193, 672.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   320.453 ±(99.9%) 19.066 B/op [Average]
[info]   (min, avg, max) = (317.710, 320.453, 329.266), stdev = 4.951
[info]   CI (99.9%): [301.387, 339.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.036, 0.059), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc
[info] # Run progress: 93.28% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2759405.285 ops/s
[info] # Warmup Iteration   2: 3503559.085 ops/s
[info] # Warmup Iteration   3: 3497324.548 ops/s
[info] # Warmup Iteration   4: 3499969.440 ops/s
[info] # Warmup Iteration   5: 3488494.910 ops/s
[info] Iteration   1: 3504313.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3491368.021 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3476166.647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3495776.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3495580.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc":
[info]   3492640.979 ±(99.9%) 39819.394 ops/s [Average]
[info]   (min, avg, max) = (3476166.647, 3492640.979, 3504313.518), stdev = 10340.970
[info]   CI (99.9%): [3452821.585, 3532460.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay
[info] # Run progress: 94.03% complete, ETA 00:02:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2179612.308 ops/s
[info] # Warmup Iteration   2: 2879449.094 ops/s
[info] # Warmup Iteration   3: 2966297.500 ops/s
[info] # Warmup Iteration   4: 2730869.222 ops/s
[info] # Warmup Iteration   5: 2973068.421 ops/s
[info] Iteration   1: 2854178.504 ops/s
[info]                  ·gc.alloc.rate:                   1204.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2949575.381 ops/s
[info]                  ·gc.alloc.rate:                   1244.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2952383.252 ops/s
[info]                  ·gc.alloc.rate:                   1245.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2888161.544 ops/s
[info]                  ·gc.alloc.rate:                   1218.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1011.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2951377.342 ops/s
[info]                  ·gc.alloc.rate:                   1245.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     720.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay":
[info]   2919135.205 ±(99.9%) 174879.581 ops/s [Average]
[info]   (min, avg, max) = (2854178.504, 2919135.205, 2952383.252), stdev = 45415.672
[info]   CI (99.9%): [2744255.623, 3094014.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate":
[info]   1231.815 ±(99.9%) 74.051 MB/sec [Average]
[info]   (min, avg, max) = (1204.390, 1231.815, 1245.720), stdev = 19.231
[info]   CI (99.9%): [1157.764, 1305.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   1210.018 ±(99.9%) 716.445 MB/sec [Average]
[info]   (min, avg, max) = (1000.696, 1210.018, 1351.800), stdev = 186.059
[info]   CI (99.9%): [493.573, 1926.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   651.155 ±(99.9%) 350.242 B/op [Average]
[info]   (min, avg, max) = (551.381, 651.155, 720.644), stdev = 90.957
[info]   CI (99.9%): [300.913, 1001.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.167), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.047, 0.089), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 94.78% complete, ETA 00:01:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5764.523 ops/s
[info] # Warmup Iteration   2: 9553.278 ops/s
[info] # Warmup Iteration   3: 10863.766 ops/s
[info] # Warmup Iteration   4: 11248.553 ops/s
[info] # Warmup Iteration   5: 11346.561 ops/s
[info] Iteration   1: 11212.357 ops/s
[info]                  ·gc.alloc.rate:                   1589.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              223040.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234887.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.048 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11369.900 ops/s
[info]                  ·gc.alloc.rate:                   1611.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              223088.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232822.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11483.960 ops/s
[info]                  ·gc.alloc.rate:                   1627.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185048.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.823 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10959.216 ops/s
[info]                  ·gc.alloc.rate:                   1553.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243035.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.937 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11229.773 ops/s
[info]                  ·gc.alloc.rate:                   1591.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237523.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.121 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11251.041 ±(99.9%) 759.195 ops/s [Average]
[info]   (min, avg, max) = (10959.216, 11251.041, 11483.960), stdev = 197.160
[info]   CI (99.9%): [10491.847, 12010.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1594.917 ±(99.9%) 107.775 MB/sec [Average]
[info]   (min, avg, max) = (1553.563, 1594.917, 1627.978), stdev = 27.989
[info]   CI (99.9%): [1487.142, 1702.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   223083.419 ±(99.9%) 94.126 B/op [Average]
[info]   (min, avg, max) = (223040.041, 223083.419, 223096.053), stdev = 24.444
[info]   CI (99.9%): [222989.293, 223177.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1618.695 ±(99.9%) 578.588 MB/sec [Average]
[info]   (min, avg, max) = (1350.335, 1618.695, 1694.890), stdev = 150.257
[info]   CI (99.9%): [1040.107, 2197.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   226663.202 ±(99.9%) 90783.734 B/op [Average]
[info]   (min, avg, max) = (185048.194, 226663.202, 243035.063), stdev = 23576.247
[info]   CI (99.9%): [135879.468, 317446.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.235 MB/sec [Average]
[info]   (min, avg, max) = (0.022, 0.096, 0.167), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.444 ±(99.9%) 32.458 B/op [Average]
[info]   (min, avg, max) = (3.121, 13.444, 22.823), stdev = 8.429
[info]   CI (99.9%): [≈ 0, 45.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson
[info] # Run progress: 95.52% complete, ETA 00:01:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6438.881 ops/s
[info] # Warmup Iteration   2: 16689.895 ops/s
[info] # Warmup Iteration   3: 16223.367 ops/s
[info] # Warmup Iteration   4: 17050.457 ops/s
[info] # Warmup Iteration   5: 16154.335 ops/s
[info] Iteration   1: 17122.445 ops/s
[info]                  ·gc.alloc.rate:               270.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23511.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16880.757 ops/s
[info]                  ·gc.alloc.rate:                   266.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23846.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16819.135 ops/s
[info]                  ·gc.alloc.rate:                   265.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              24868.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30262.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17140.750 ops/s
[info]                  ·gc.alloc.rate:               270.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          24864.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29692.835 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 17086.493 ops/s
[info]                  ·gc.alloc.rate:               269.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          24864.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29757.716 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson":
[info]   17009.916 ±(99.9%) 573.486 ops/s [Average]
[info]   (min, avg, max) = (16819.135, 17009.916, 17140.750), stdev = 148.933
[info]   CI (99.9%): [16436.430, 17583.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   268.841 ±(99.9%) 8.948 MB/sec [Average]
[info]   (min, avg, max) = (265.780, 268.841, 270.820), stdev = 2.324
[info]   CI (99.9%): [259.893, 277.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   24871.357 ±(99.9%) 31.351 B/op [Average]
[info]   (min, avg, max) = (24864.025, 24871.357, 24880.035), stdev = 8.142
[info]   CI (99.9%): [24840.005, 24902.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   296.320 ±(99.9%) 142.297 MB/sec [Average]
[info]   (min, avg, max) = (255.819, 296.320, 323.430), stdev = 36.954
[info]   CI (99.9%): [154.023, 438.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   27414.308 ±(99.9%) 13165.503 B/op [Average]
[info]   (min, avg, max) = (23511.222, 27414.308, 30262.968), stdev = 3419.039
[info]   CI (99.9%): [14248.805, 40579.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0.571 ±(99.9%) 4.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.571, 2.811), stdev = 1.253
[info]   CI (99.9%): [≈ 0, 5.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   53.379 ±(99.9%) 451.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.379, 263.016), stdev = 117.203
[info]   CI (99.9%): [≈ 0, 504.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter
[info] # Run progress: 96.27% complete, ETA 00:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19077.547 ops/s
[info] # Warmup Iteration   2: 22905.035 ops/s
[info] # Warmup Iteration   3: 38346.793 ops/s
[info] # Warmup Iteration   4: 37292.154 ops/s
[info] # Warmup Iteration   5: 38575.963 ops/s
[info] Iteration   1: 38859.495 ops/s
[info]                  ·gc.alloc.rate:                   431.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26979.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38742.915 ops/s
[info]                  ·gc.alloc.rate:               430.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13502.953 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 38750.427 ops/s
[info]                  ·gc.alloc.rate:                   430.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13499.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 38621.932 ops/s
[info]                  ·gc.alloc.rate:               429.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13545.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 38588.591 ops/s
[info]                  ·gc.alloc.rate:                   428.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27127.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter":
[info]   38712.672 ±(99.9%) 419.734 ops/s [Average]
[info]   (min, avg, max) = (38588.591, 38712.672, 38859.495), stdev = 109.003
[info]   CI (99.9%): [38292.939, 39132.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   430.211 ±(99.9%) 4.555 MB/sec [Average]
[info]   (min, avg, max) = (428.915, 430.211, 431.817), stdev = 1.183
[info]   CI (99.9%): [425.657, 434.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   17488.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.011, 17488.011, 17488.011), stdev = 0.001
[info]   CI (99.9%): [17488.011, 17488.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   465.754 ±(99.9%) 703.027 MB/sec [Average]
[info]   (min, avg, max) = (332.407, 465.754, 666.177), stdev = 182.574
[info]   CI (99.9%): [≈ 0, 1168.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   18930.975 ±(99.9%) 28551.747 B/op [Average]
[info]   (min, avg, max) = (13499.817, 18930.975, 27127.245), stdev = 7414.798
[info]   CI (99.9%): [≈ 0, 47482.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.357 ±(99.9%) 2.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 1.663), stdev = 0.730
[info]   CI (99.9%): [≈ 0, 3.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   14.483 ±(99.9%) 113.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.483, 67.330), stdev = 29.570
[info]   CI (99.9%): [≈ 0, 128.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay
[info] # Run progress: 97.01% complete, ETA 00:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029.316 ops/s
[info] # Warmup Iteration   2: 3186.210 ops/s
[info] # Warmup Iteration   3: 2938.427 ops/s
[info] # Warmup Iteration   4: 3598.990 ops/s
[info] # Warmup Iteration   5: 3655.878 ops/s
[info] Iteration   1: 3591.266 ops/s
[info]                  ·gc.alloc.rate:               1158.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          507688.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 580920.445 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 3563.869 ops/s
[info]                  ·gc.alloc.rate:                   1150.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              507688.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441637.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3707.244 ops/s
[info]                  ·gc.alloc.rate:               1195.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          507688.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 568827.029 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3730.517 ops/s
[info]                  ·gc.alloc.rate:               1203.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          507688.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1008.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 425386.941 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3704.677 ops/s
[info]                  ·gc.alloc.rate:                   1195.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              507688.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573236.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.842 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay":
[info]   3659.515 ±(99.9%) 293.035 ops/s [Average]
[info]   (min, avg, max) = (3563.869, 3659.515, 3730.517), stdev = 76.100
[info]   CI (99.9%): [3366.479, 3952.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1180.729 ±(99.9%) 93.739 MB/sec [Average]
[info]   (min, avg, max) = (1150.109, 1180.729, 1203.484), stdev = 24.344
[info]   CI (99.9%): [1086.990, 1274.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   507688.120 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (507688.116, 507688.120, 507688.130), stdev = 0.006
[info]   CI (99.9%): [507688.097, 507688.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1204.885 ±(99.9%) 705.424 MB/sec [Average]
[info]   (min, avg, max) = (1000.479, 1204.885, 1349.445), stdev = 183.196
[info]   CI (99.9%): [499.461, 1910.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   518001.664 ±(99.9%) 298281.407 B/op [Average]
[info]   (min, avg, max) = (425386.941, 518001.664, 580920.445), stdev = 77462.734
[info]   CI (99.9%): [219720.257, 816283.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   3.607 ±(99.9%) 19.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.607, 9.192), stdev = 4.940
[info]   CI (99.9%): [≈ 0, 22.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson
[info] # Run progress: 97.76% complete, ETA 00:00:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29517.899 ops/s
[info] # Warmup Iteration   2: 58556.392 ops/s
[info] # Warmup Iteration   3: 59363.968 ops/s
[info] # Warmup Iteration   4: 60142.461 ops/s
[info] # Warmup Iteration   5: 60036.393 ops/s
[info] Iteration   1: 60264.831 ops/s
[info]                  ·gc.alloc.rate:                   770.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              20124.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16961.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 60214.078 ops/s
[info]                  ·gc.alloc.rate:                   769.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              20123.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17045.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 60152.816 ops/s
[info]                  ·gc.alloc.rate:                   769.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              20123.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25734.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 60121.507 ops/s
[info]                  ·gc.alloc.rate:                   768.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              20124.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17229.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 59710.025 ops/s
[info]                  ·gc.alloc.rate:               763.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          20124.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17400.181 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson":
[info]   60092.651 ±(99.9%) 850.735 ops/s [Average]
[info]   (min, avg, max) = (59710.025, 60092.651, 60264.831), stdev = 220.933
[info]   CI (99.9%): [59241.916, 60943.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   768.455 ±(99.9%) 10.930 MB/sec [Average]
[info]   (min, avg, max) = (763.559, 768.455, 770.758), stdev = 2.839
[info]   CI (99.9%): [757.525, 779.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   20124.003 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (20123.975, 20124.003, 20124.023), stdev = 0.018
[info]   CI (99.9%): [20123.933, 20124.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   720.776 ±(99.9%) 566.053 MB/sec [Average]
[info]   (min, avg, max) = (649.637, 720.776, 983.629), stdev = 147.002
[info]   CI (99.9%): [154.723, 1286.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   18874.232 ±(99.9%) 14781.062 B/op [Average]
[info]   (min, avg, max) = (16961.619, 18874.232, 25734.225), stdev = 3838.595
[info]   CI (99.9%): [4093.170, 33655.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.089 ±(99.9%) 2.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.089, 2.179), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 4.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter
[info] # Run progress: 98.51% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61618.476 ops/s
[info] # Warmup Iteration   2: 82646.197 ops/s
[info] # Warmup Iteration   3: 83736.024 ops/s
[info] # Warmup Iteration   4: 84144.231 ops/s
[info] # Warmup Iteration   5: 83632.414 ops/s
[info] Iteration   1: 83817.060 ops/s
[info]                  ·gc.alloc.rate:               549.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6241.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 82417.892 ops/s
[info]                  ·gc.alloc.rate:                   540.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12694.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 83834.116 ops/s
[info]                  ·gc.alloc.rate:                   549.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12481.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 84050.437 ops/s
[info]                  ·gc.alloc.rate:               551.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6236.846 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 83705.327 ops/s
[info]                  ·gc.alloc.rate:                   548.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12531.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter":
[info]   83564.966 ±(99.9%) 2515.589 ops/s [Average]
[info]   (min, avg, max) = (82417.892, 83564.966, 84050.437), stdev = 653.291
[info]   CI (99.9%): [81049.377, 86080.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   548.002 ±(99.9%) 16.469 MB/sec [Average]
[info]   (min, avg, max) = (540.497, 548.002, 551.198), stdev = 4.277
[info]   CI (99.9%): [531.533, 564.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   532.370 ±(99.9%) 701.641 MB/sec [Average]
[info]   (min, avg, max) = (332.420, 532.370, 666.516), stdev = 182.214
[info]   CI (99.9%): [≈ 0, 1234.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   10037.193 ±(99.9%) 13353.870 B/op [Average]
[info]   (min, avg, max) = (6236.846, 10037.193, 12694.902), stdev = 3467.958
[info]   CI (99.9%): [≈ 0, 23391.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0.790 ±(99.9%) 3.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.790, 2.385), stdev = 1.012
[info]   CI (99.9%): [≈ 0, 4.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 99.25% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66163.529 ops/s
[info] # Warmup Iteration   2: 91393.985 ops/s
[info] # Warmup Iteration   3: 90559.119 ops/s
[info] # Warmup Iteration   4: 89837.095 ops/s
[info] # Warmup Iteration   5: 91203.430 ops/s
[info] Iteration   1: 91381.668 ops/s
[info]                  ·gc.alloc.rate:      13.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 88267.119 ops/s
[info]                  ·gc.alloc.rate:      12.564 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87914.038 ops/s
[info]                  ·gc.alloc.rate:      12.514 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 91020.030 ops/s
[info]                  ·gc.alloc.rate:      12.956 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 91178.339 ops/s
[info]                  ·gc.alloc.rate:      12.978 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc":
[info]   89952.239 ±(99.9%) 6580.169 ops/s [Average]
[info]   (min, avg, max) = (87914.038, 89952.239, 91381.668), stdev = 1708.849
[info]   CI (99.9%): [83372.069, 96532.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   12.804 ±(99.9%) 0.938 MB/sec [Average]
[info]   (min, avg, max) = (12.514, 12.804, 13.009), stdev = 0.244
[info]   CI (99.9%): [11.866, 13.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.005, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:34:56
[info] Benchmark                                                                               Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    785729.940 ±   14773.446   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      2069.339 ±      38.494  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      2102.416 ±     577.083  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4211.281 ±    1227.559    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.100 ±       0.088  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.200 ±       0.178    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        33.000                    ms
[info] AdtBenchmark.readJackson                                                               thrpt    5   1655829.325 ±   52384.789   ops/s
[info] AdtBenchmark.readJackson:·gc.alloc.rate                                                thrpt    5      1178.399 ±      37.254  MB/sec
[info] AdtBenchmark.readJackson:·gc.alloc.rate.norm                                           thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space                                       thrpt    5      1133.090 ±     705.260  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      1077.139 ±     675.619    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.083 ±       0.150  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.079 ±       0.143    B/op
[info] AdtBenchmark.readJackson:·gc.count                                                     thrpt    5        17.000                counts
[info] AdtBenchmark.readJackson:·gc.time                                                      thrpt    5        14.000                    ms
[info] AdtBenchmark.readJsoniter                                                              thrpt    5   3854112.877 ±  265195.871   ops/s
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate                                               thrpt    5       254.700 ±      17.499  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                      thrpt    5       252.499 ±     559.556  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       103.803 ±     231.221    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.291 ±       2.359  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.119 ±       0.966    B/op
[info] AdtBenchmark.readJsoniter:·gc.count                                                    thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniter:·gc.time                                                     thrpt    5         5.000                    ms
[info] AdtBenchmark.readPlay                                                                  thrpt    5    179948.900 ±    1014.228   ops/s
[info] AdtBenchmark.readPlay:·gc.alloc.rate                                                   thrpt    5      1514.919 ±       9.215  MB/sec
[info] AdtBenchmark.readPlay:·gc.alloc.rate.norm                                              thrpt    5     13248.002 ±       0.001    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space                                          thrpt    5      1542.834 ±     705.764  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                     thrpt    5     13491.191 ±    6136.130    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.058 ±       0.088  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.510 ±       0.768    B/op
[info] AdtBenchmark.readPlay:·gc.count                                                        thrpt    5        23.000                counts
[info] AdtBenchmark.readPlay:·gc.time                                                         thrpt    5        25.000                    ms
[info] AdtBenchmark.writeJackson                                                              thrpt    5   2087232.936 ±   95475.038   ops/s
[info] AdtBenchmark.writeJackson:·gc.alloc.rate                                               thrpt    5       806.419 ±      37.111  MB/sec
[info] AdtBenchmark.writeJackson:·gc.alloc.rate.norm                                          thrpt    5       608.000 ±       0.001    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                      thrpt    5       791.332 ±     695.448  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       597.189 ±     536.705    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.067 ±       0.119  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.050 ±       0.088    B/op
[info] AdtBenchmark.writeJackson:·gc.count                                                    thrpt    5        12.000                counts
[info] AdtBenchmark.writeJackson:·gc.time                                                     thrpt    5        11.000                    ms
[info] AdtBenchmark.writeJsoniter                                                             thrpt    5  16664394.666 ±  898813.833   ops/s
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate                                              thrpt    5       847.177 ±      45.384  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm                                         thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5       803.466 ±     706.410  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5        75.887 ±      66.934    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.083 ±       0.127  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.008 ±       0.012    B/op
[info] AdtBenchmark.writeJsoniter:·gc.count                                                   thrpt    5        12.000                counts
[info] AdtBenchmark.writeJsoniter:·gc.time                                                    thrpt    5        10.000                    ms
[info] AdtBenchmark.writePlay                                                                 thrpt    5    325641.099 ±    5130.516   ops/s
[info] AdtBenchmark.writePlay:·gc.alloc.rate                                                  thrpt    5      1008.106 ±      15.887  MB/sec
[info] AdtBenchmark.writePlay:·gc.alloc.rate.norm                                             thrpt    5      4872.001 ±       0.001    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space                                         thrpt    5       993.202 ±      30.174  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4800.108 ±     200.225    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.075 ±       0.134  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.362 ±       0.649    B/op
[info] AdtBenchmark.writePlay:·gc.count                                                       thrpt    5        15.000                counts
[info] AdtBenchmark.writePlay:·gc.time                                                        thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1716732.403 ±   88229.026   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2679.544 ±     138.308  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2652.095 ±     579.624  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      2429.793 ±     424.019    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.125 ±       0.127  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.115 ±       0.117    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        39.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        34.000                    ms
[info] AnyRefsBenchmark.readJackson                                                           thrpt    5   2644049.029 ±   75858.234   ops/s
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1854.864 ±      53.179  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      1824.019 ±     716.893  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      1086.113 ±     448.188    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.092 ±       0.122  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.054 ±       0.072    B/op
[info] AnyRefsBenchmark.readJackson:·gc.count                                                 thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJackson:·gc.time                                                  thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.readJsoniter                                                          thrpt    5  10232897.828 ±  331606.733   ops/s
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5      1300.436 ±      42.195  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5      1351.517 ±      17.580  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5       207.867 ±       7.055    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±       0.127  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.013 ±       0.019    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.count                                                thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readPlay                                                              thrpt    5    650055.836 ±   23408.268   ops/s
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1718.524 ±      61.660  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5      1750.958 ±     567.321  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      4241.198 ±    1525.886    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.100 ±       0.105  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.242 ±       0.263    B/op
[info] AnyRefsBenchmark.readPlay:·gc.count                                                    thrpt    5        26.000                counts
[info] AnyRefsBenchmark.readPlay:·gc.time                                                     thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   2023605.646 ±   85280.215   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2016.439 ±      84.239  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1568.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2034.860 ±      24.930  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1582.433 ±      48.712    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.096 ±       0.166  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.075 ±       0.131    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        30.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.writeJackson                                                          thrpt    5   6017467.165 ±  131861.424   ops/s
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1651.835 ±      36.233  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5      1615.032 ±     559.508  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5       422.507 ±     152.227    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.125 ±       0.188  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.033 ±       0.049    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.count                                                thrpt    5        24.000                counts
[info] AnyRefsBenchmark.writeJackson:·gc.time                                                 thrpt    5        22.000                    ms
[info] AnyRefsBenchmark.writeJsoniter                                                         thrpt    5  21186265.292 ± 2100240.796   ops/s
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       646.231 ±      64.006  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5       667.555 ±       5.415  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5        49.610 ±       4.939    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±       0.091  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.007 ±       0.007    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniter:·gc.time                                                thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.writeJsoniterPrealloc                                                 thrpt    5  28544246.472 ±  128982.362   ops/s
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count                                       thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlay                                                             thrpt    5   1128584.778 ±    2901.601   ops/s
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      1698.283 ±       3.960  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      2368.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5      1683.367 ±      43.058  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5      2347.209 ±      64.130    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.092 ±       0.091  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.128 ±       0.127    B/op
[info] AnyRefsBenchmark.writePlay:·gc.count                                                   thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writePlay:·gc.time                                                    thrpt    5        26.000                    ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5    909025.513 ±   15300.509   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      2971.429 ±      50.673  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5144.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      2993.692 ±     582.273  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5182.983 ±    1043.433    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.150 ±       0.174  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.259 ±       0.298    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        44.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        41.000                    ms
[info] ArraysBenchmark.readJackson                                                            thrpt    5   1659489.989 ±   79268.313   ops/s
[info] ArraysBenchmark.readJackson:·gc.alloc.rate                                             thrpt    5      1560.695 ±      74.593  MB/sec
[info] ArraysBenchmark.readJackson:·gc.alloc.rate.norm                                        thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space                                    thrpt    5      1547.438 ±     701.425  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1466.296 ±     615.394    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.117 ±       0.176  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.111 ±       0.170    B/op
[info] ArraysBenchmark.readJackson:·gc.count                                                  thrpt    5        23.000                counts
[info] ArraysBenchmark.readJackson:·gc.time                                                   thrpt    5        21.000                    ms
[info] ArraysBenchmark.readJsoniter                                                           thrpt    5   9307123.997 ±  296681.055   ops/s
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate                                            thrpt    5      2791.362 ±      89.125  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm                                       thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                   thrpt    5      2789.740 ±     584.457  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                              thrpt    5       471.886 ±     111.902    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                               thrpt    5         0.112 ±       0.209  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.019 ±       0.036    B/op
[info] ArraysBenchmark.readJsoniter:·gc.count                                                 thrpt    5        41.000                counts
[info] ArraysBenchmark.readJsoniter:·gc.time                                                  thrpt    5        31.000                    ms
[info] ArraysBenchmark.readPlay                                                               thrpt    5    335606.303 ±    5109.982   ops/s
[info] ArraysBenchmark.readPlay:·gc.alloc.rate                                                thrpt    5      2045.555 ±      31.054  MB/sec
[info] ArraysBenchmark.readPlay:·gc.alloc.rate.norm                                           thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space                                       thrpt    5      2095.889 ±     542.851  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      9829.370 ±    2642.793    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.133 ±       0.209  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.624 ±       0.972    B/op
[info] ArraysBenchmark.readPlay:·gc.count                                                     thrpt    5        31.000                counts
[info] ArraysBenchmark.readPlay:·gc.time                                                      thrpt    5        32.000                    ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1092731.650 ±   34826.893   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2505.415 ±      79.825  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3608.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2447.148 ±     587.256  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      3524.186 ±     844.550    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.142 ±       0.183  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.204 ±       0.261    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        36.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        30.000                    ms
[info] ArraysBenchmark.writeJackson                                                           thrpt    5   3482745.661 ±   46567.921   ops/s
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate                                            thrpt    5      2018.372 ±      27.289  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate.norm                                       thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      2029.804 ±      38.157  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5       917.180 ±      24.776    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.108 ±       0.119  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.049 ±       0.054    B/op
[info] ArraysBenchmark.writeJackson:·gc.count                                                 thrpt    5        30.000                counts
[info] ArraysBenchmark.writeJackson:·gc.time                                                  thrpt    5        27.000                    ms
[info] ArraysBenchmark.writeJsoniter                                                          thrpt    5  16331819.993 ±  197768.008   ops/s
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate                                           thrpt    5       747.297 ±       8.700  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm                                      thrpt    5        72.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5       735.713 ±     575.328  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5        70.863 ±      54.803    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0.071 ±       0.185  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.007 ±       0.018    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.count                                                thrpt    5        11.000                counts
[info] ArraysBenchmark.writeJsoniter:·gc.time                                                 thrpt    5        10.000                    ms
[info] ArraysBenchmark.writePlay                                                              thrpt    5    471683.774 ±   36078.742   ops/s
[info] ArraysBenchmark.writePlay:·gc.alloc.rate                                               thrpt    5      1664.139 ±     127.429  MB/sec
[info] ArraysBenchmark.writePlay:·gc.alloc.rate.norm                                          thrpt    5      5552.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space                                      thrpt    5      1683.074 ±      43.727  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5616.477 ±     325.194    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.104 ±       0.113  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.347 ±       0.369    B/op
[info] ArraysBenchmark.writePlay:·gc.count                                                    thrpt    5        25.000                counts
[info] ArraysBenchmark.writePlay:·gc.time                                                     thrpt    5        26.000                    ms
[info] BigIntArrayBenchmark.readCirce                                                         thrpt    5      7404.569 ±     364.051   ops/s
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1255.693 ±      61.842  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    266860.856 ±      27.546    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1278.952 ±     577.618  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    271981.598 ±  128195.887    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.075 ±       0.185  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        16.008 ±      40.021    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.count                                               thrpt    5        19.000                counts
[info] BigIntArrayBenchmark.readCirce:·gc.time                                                thrpt    5        19.000                    ms
[info] BigIntArrayBenchmark.readJackson                                                       thrpt    5     25943.445 ±     513.267   ops/s
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate                                        thrpt    5      1115.127 ±      21.297  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                   thrpt    5     67632.017 ±       0.002    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                               thrpt    5      1068.424 ±     564.300  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     64822.330 ±   35134.860    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.092 ±       0.231  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         5.558 ±      14.041    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.count                                             thrpt    5        16.000                counts
[info] BigIntArrayBenchmark.readJackson:·gc.time                                              thrpt    5        15.000                    ms
[info] BigIntArrayBenchmark.readJsoniter                                                      thrpt    5     28902.253 ±    1103.514   ops/s
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5       524.701 ±      19.837  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5     28568.015 ±       0.002    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       533.519 ±     704.522  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5     29110.195 ±   39105.541    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.046 ±       0.256  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         2.518 ±      14.121    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] BigIntArrayBenchmark.readJsoniter:·gc.time                                             thrpt    5         7.000                    ms
[info] BigIntArrayBenchmark.writeJackson                                                      thrpt    5     13336.096 ±     304.905   ops/s
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate                                       thrpt    5      1413.170 ±      32.485  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                  thrpt    5    166760.010 ±       0.244    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                              thrpt    5      1410.597 ±     582.894  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    166542.309 ±   72967.208    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.154  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         9.340 ±      18.218    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.count                                            thrpt    5        21.000                counts
[info] BigIntArrayBenchmark.writeJackson:·gc.time                                             thrpt    5        21.000                    ms
[info] BigIntArrayBenchmark.writeJsoniter                                                     thrpt    5     14603.336 ±     238.953   ops/s
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5      1462.296 ±      23.545  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5    157576.032 ±       0.018    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5      1420.153 ±     591.139  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5    152988.689 ±   61259.613    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.132  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         9.429 ±      14.306    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.count                                           thrpt    5        21.000                counts
[info] BigIntArrayBenchmark.writeJsoniter:·gc.time                                            thrpt    5        19.000                    ms
[info] BigIntArrayBenchmark.writeJsoniterPrealloc                                             thrpt    5     15048.315 ±     142.589   ops/s
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                              thrpt    5      1408.082 ±      13.059  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5    147248.031 ±       0.019    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                     thrpt    5      1419.492 ±     595.631  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                thrpt    5    148445.594 ±   62485.718    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                 thrpt    5         0.079 ±       0.143  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm            thrpt    5         8.278 ±      15.061    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                   thrpt    5        21.000                counts
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time                                    thrpt    5        18.000                    ms
[info] BitSetsBenchmark.readJackson                                                           thrpt    5   2107725.500 ±  267324.174   ops/s
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1339.407 ±     169.910  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1000.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      1339.806 ±      37.353  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      1001.140 ±     125.834    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.087 ±       0.154  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.066 ±       0.125    B/op
[info] BitSetsBenchmark.readJackson:·gc.count                                                 thrpt    5        20.000                counts
[info] BitSetsBenchmark.readJackson:·gc.time                                                  thrpt    5        18.000                    ms
[info] BitSetsBenchmark.readJsoniter                                                          thrpt    5   5146413.972 ±   36123.245   ops/s
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5       680.198 ±       4.879  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5       667.495 ±       5.149  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5       204.117 ±       2.792    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0.062 ±       0.227  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.019 ±       0.069    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.count                                                thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        10.000                    ms
[info] BitSetsBenchmark.readPlay                                                              thrpt    5    370575.170 ±   19668.312   ops/s
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1682.461 ±      88.386  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      7144.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5      1683.227 ±      43.100  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      7148.324 ±     421.030    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.083 ±       0.001  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.354 ±       0.019    B/op
[info] BitSetsBenchmark.readPlay:·gc.count                                                    thrpt    5        25.000                counts
[info] BitSetsBenchmark.readPlay:·gc.time                                                     thrpt    5        32.000                    ms
[info] BitSetsBenchmark.writeJackson                                                          thrpt    5   2483640.799 ±   95513.732   ops/s
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1313.256 ±      49.874  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5      1338.833 ±      39.281  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5       848.293 ±      48.683    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±       0.080  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.053 ±       0.050    B/op
[info] BitSetsBenchmark.writeJackson:·gc.count                                                thrpt    5        20.000                counts
[info] BitSetsBenchmark.writeJackson:·gc.time                                                 thrpt    5        18.000                    ms
[info] BitSetsBenchmark.writeJsoniter                                                         thrpt    5   6631472.792 ±  240191.241   ops/s
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5      1011.348 ±      36.751  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5      1007.429 ±      14.712  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5       239.083 ±       7.475    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0.079 ±       0.132  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.019 ±       0.032    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        15.000                counts
[info] BitSetsBenchmark.writeJsoniter:·gc.time                                                thrpt    5        13.000                    ms
[info] BitSetsBenchmark.writePlay                                                             thrpt    5    646115.923 ±    8167.912   ops/s
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      1911.532 ±      24.258  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      4656.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5      1958.780 ±     578.792  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5      4771.125 ±    1411.706    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.108 ±       0.105  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.264 ±       0.254    B/op
[info] BitSetsBenchmark.writePlay:·gc.count                                                   thrpt    5        29.000                counts
[info] BitSetsBenchmark.writePlay:·gc.time                                                    thrpt    5        35.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    809077.898 ±   12179.746   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2685.691 ±      40.370  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5224.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2719.522 ±      18.205  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      5289.854 ±      64.230    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.125 ±       0.247  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.243 ±       0.484    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        40.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        33.000                    ms
[info] ExtractFieldsBenchmark.readJackson                                                     thrpt    5   1013513.291 ±   13254.365   ops/s
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5      1257.150 ±      16.420  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5      1268.629 ±     563.845  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1970.158 ±     887.043    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.071 ±       0.091  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.110 ±       0.142    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.count                                           thrpt    5        19.000                counts
[info] ExtractFieldsBenchmark.readJackson:·gc.time                                            thrpt    5        19.000                    ms
[info] ExtractFieldsBenchmark.readJsoniter                                                    thrpt    5   7604129.183 ±   95876.166   ops/s
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       347.925 ±       4.464  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5       335.377 ±       1.476  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5        69.404 ±       0.932    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5         0.298 ±       2.433  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.062 ±       0.506    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.count                                          thrpt    5         5.000                counts
[info] ExtractFieldsBenchmark.readJsoniter:·gc.time                                           thrpt    5         6.000                    ms
[info] ExtractFieldsBenchmark.readPlay                                                        thrpt    5    338562.081 ±   14586.119   ops/s
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1879.417 ±      81.145  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5      8736.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5      1821.643 ±     718.048  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8465.276 ±    3204.824    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5         0.108 ±       0.143  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.503 ±       0.662    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.count                                              thrpt    5        27.000                counts
[info] ExtractFieldsBenchmark.readPlay:·gc.time                                               thrpt    5        29.000                    ms
[info] FloatArrayBenchmark.readCirce                                                          thrpt    5      6603.155 ±     264.945   ops/s
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1322.966 ±      53.025  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    315281.679 ±      13.884    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1347.011 ±      24.739  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    321039.067 ±   13828.452    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.042 ±       0.127  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         9.931 ±      30.080    B/op
[info] FloatArrayBenchmark.readCirce:·gc.count                                                thrpt    5        20.000                counts
[info] FloatArrayBenchmark.readCirce:·gc.time                                                 thrpt    5        18.000                    ms
[info] FloatArrayBenchmark.readJackson                                                        thrpt    5     18264.063 ±     133.007   ops/s
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       850.237 ±       6.206  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     73256.963 ±      53.976    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5       861.462 ±     699.174  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     74224.269 ±   60247.289    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.209  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         6.101 ±      18.020    B/op
[info] FloatArrayBenchmark.readJackson:·gc.count                                              thrpt    5        13.000                counts
[info] FloatArrayBenchmark.readJackson:·gc.time                                               thrpt    5        13.000                    ms
[info] FloatArrayBenchmark.readJsoniter                                                       thrpt    5     31821.856 ±     585.608   ops/s
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5        83.475 ±       1.507  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5      4128.014 ±       0.002    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       102.339 ±     539.604  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5      5075.623 ±   26762.771    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0.427 ±       3.678  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        21.089 ±     181.584    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.count                                             thrpt    5         2.000                counts
[info] FloatArrayBenchmark.readJsoniter:·gc.time                                              thrpt    5         4.000                    ms
[info] FloatArrayBenchmark.readPlay                                                           thrpt    5      6357.171 ±     160.065   ops/s
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1484.646 ±      37.272  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    367504.069 ±       0.007    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1480.634 ±     719.489  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5    366705.621 ±  185420.631    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0.096 ±       0.348  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5        23.792 ±      86.528    B/op
[info] FloatArrayBenchmark.readPlay:·gc.count                                                 thrpt    5        22.000                counts
[info] FloatArrayBenchmark.readPlay:·gc.time                                                  thrpt    5        21.000                    ms
[info] FloatArrayBenchmark.writeCirce                                                         thrpt    5     16436.432 ±    2850.145   ops/s
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       596.563 ±      67.125  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     57244.486 ±   14694.152    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5       597.118 ±     572.590  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     57369.795 ±   57341.699    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.017 ±       0.067  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.614 ±       6.681    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.count                                               thrpt    5         9.000                counts
[info] FloatArrayBenchmark.writeCirce:·gc.time                                                thrpt    5         8.000                    ms
[info] FloatArrayBenchmark.writeJackson                                                       thrpt    5     20617.964 ±     250.151   ops/s
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       401.980 ±       4.884  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     30680.023 ±       0.316    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5       393.398 ±     564.212  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     30029.793 ±   43150.912    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.025 ±       0.067  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.909 ±       5.129    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.count                                             thrpt    5         6.000                counts
[info] FloatArrayBenchmark.writeJackson:·gc.time                                              thrpt    5         5.000                    ms
[info] FloatArrayBenchmark.writeJsoniter                                                      thrpt    5     23864.427 ±     468.944   ops/s
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       380.462 ±       7.428  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     25088.019 ±       0.005    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       333.166 ±       0.503  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5     21969.709 ±     431.602    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.021 ±       0.080  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.377 ±       5.304    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.count                                            thrpt    5         5.000                counts
[info] FloatArrayBenchmark.writeJsoniter:·gc.time                                             thrpt    5         5.000                    ms
[info] FloatArrayBenchmark.writeJsoniterPrealloc                                              thrpt    5     24326.186 ±     515.323   ops/s
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       303.716 ±       6.453  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5     19648.018 ±       0.001    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5       266.597 ±     573.871  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5     17265.506 ±   37167.858    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5         0.336 ±       2.668  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5        21.641 ±     172.040    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         4.000                counts
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         5.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      8096.194 ±     225.621   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2083.864 ±      57.814  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    405016.568 ±      82.761    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2101.170 ±     579.187  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    408376.288 ±  111493.552    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.131 ±       0.349  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        25.429 ±      68.388    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        31.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readJackson                                                     thrpt    5     13597.525 ±     139.597   ops/s
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5       366.569 ±       3.749  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5     42424.035 ±       0.019    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5       389.448 ±     558.371  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     45061.995 ±   64427.343    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.516 ±       4.264  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        59.600 ±     492.503    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.count                                           thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJackson:·gc.time                                            thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniter                                                    thrpt    5     24210.133 ±     527.783   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       453.048 ±       9.875  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5     29448.018 ±       0.002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5       399.063 ±     572.260  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5     25938.349 ±   37175.360    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5         0.021 ±       0.080  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.350 ±       5.197    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.count                                          thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.time                                           thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readPlay                                                        thrpt    5      2587.420 ±     123.791   ops/s
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1570.622 ±      74.905  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5    955216.169 ±       0.024    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5      1611.959 ±     575.475  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5    980615.642 ±  360100.006    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5         0.058 ±       0.174  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        35.328 ±     105.499    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.count                                              thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.readPlay:·gc.time                                               thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      8634.943 ±     133.558   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1988.026 ±      30.957  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    362297.558 ±      93.318    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1965.582 ±     589.309  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    358235.598 ±  108823.018    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.105 ±       0.238  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        19.078 ±      43.443    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        29.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        30.000                    ms
[info] GoogleMapsAPIBenchmark.writeJackson                                                    thrpt    5     43170.601 ±    2272.165   ops/s
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate                                     thrpt    5       625.784 ±      32.786  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                thrpt    5     22807.887 ±       0.401    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                            thrpt    5       654.117 ±      12.243  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     23843.942 ±    1277.531    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.166  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.586 ±       6.111    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.count                                          thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.time                                           thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniter                                                   thrpt    5     89451.071 ±    2242.087   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate                                    thrpt    5       672.528 ±      16.870  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                               thrpt    5     11832.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5       666.491 ±       6.383  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5     11726.281 ±     369.132    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0.042 ±       0.080  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.732 ±       1.406    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.count                                         thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.time                                          thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc                                           thrpt    5     81360.019 ±    2843.985   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                            thrpt    5         1.241 ±       0.043  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                       thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlay                                                       thrpt    5      6113.725 ±      85.334   ops/s
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate                                        thrpt    5      1827.299 ±      25.020  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm                                   thrpt    5    470335.836 ±       1.824    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space                               thrpt    5      1821.680 ±     722.907  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5    469030.600 ±  192679.085    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±       0.200  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        20.340 ±      51.268    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.count                                             thrpt    5        27.000                counts
[info] GoogleMapsAPIBenchmark.writePlay:·gc.time                                              thrpt    5        31.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniter                                                   thrpt    5   5113619.300 ±   34308.004   ops/s
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate                                    thrpt    5      1533.732 ±      10.267  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                               thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5      1555.976 ±     713.098  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5       478.849 ±     219.569    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0.083 ±       0.057  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.026 ±       0.018    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.count                                         thrpt    5        23.000                counts
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.time                                          thrpt    5        22.000                    ms
[info] IntAndLongMapsBenchmark.readPlay                                                       thrpt    5    363776.836 ±    7794.292   ops/s
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate                                        thrpt    5      1954.859 ±      42.253  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm                                   thrpt    5      8456.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                               thrpt    5      1960.204 ±     579.989  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8476.548 ±    2352.875    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.188  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.360 ±       0.807    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.count                                             thrpt    5        29.000                counts
[info] IntAndLongMapsBenchmark.readPlay:·gc.time                                              thrpt    5        31.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniter                                                  thrpt    5   3358787.584 ±   47041.141   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate                                   thrpt    5       495.133 ±       6.926  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                              thrpt    5       232.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       532.520 ±     702.261  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5       249.730 ±     331.644    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0.042 ±       0.170  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.020 ±       0.080    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.count                                        thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.time                                         thrpt    5         6.000                    ms
[info] IntAndLongMapsBenchmark.writePlay                                                      thrpt    5    355972.059 ±    3595.372   ops/s
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate                                       thrpt    5      1389.724 ±      14.063  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm                                  thrpt    5      6144.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                              thrpt    5      1405.603 ±     597.581  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5      6214.444 ±    2653.815    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0.075 ±       0.166  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.331 ±       0.737    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.count                                            thrpt    5        21.000                counts
[info] IntAndLongMapsBenchmark.writePlay:·gc.time                                             thrpt    5        26.000                    ms
[info] IntArrayBenchmark.readCirce                                                            thrpt    5     15799.951 ±     833.989   ops/s
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2082.120 ±     109.889  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    207383.831 ±       1.711    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2103.425 ±     589.194  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    209452.210 ±   53347.002    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.104 ±       0.150  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        10.338 ±      14.746    B/op
[info] IntArrayBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000                counts
[info] IntArrayBenchmark.readCirce:·gc.time                                                   thrpt    5        29.000                    ms
[info] IntArrayBenchmark.readJackson                                                          thrpt    5     39258.311 ±     612.888   ops/s
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate                                           thrpt    5       282.028 ±       4.519  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                      thrpt    5     11304.011 ±       0.001    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                  thrpt    5       247.509 ±     545.937  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5      9931.368 ±   21907.659    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.419 ±       3.562  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        16.791 ±     142.778    B/op
[info] IntArrayBenchmark.readJackson:·gc.count                                                thrpt    5         4.000                counts
[info] IntArrayBenchmark.readJackson:·gc.time                                                 thrpt    5         7.000                    ms
[info] IntArrayBenchmark.readJsoniter                                                         thrpt    5     82042.947 ±    4892.168   ops/s
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate                                          thrpt    5       429.609 ±      25.582  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                     thrpt    5      8240.005 ±       0.001    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5       399.722 ±     573.505  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5      7657.242 ±   10794.997    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0.021 ±       0.098  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.395 ±       1.867    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.count                                               thrpt    5         6.000                counts
[info] IntArrayBenchmark.readJsoniter:·gc.time                                                thrpt    5         6.000                    ms
[info] IntArrayBenchmark.readPlay                                                             thrpt    5      8693.360 ±      94.155   ops/s
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate                                              thrpt    5      3074.499 ±      33.071  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate.norm                                         thrpt    5    556456.080 ±       0.261    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                     thrpt    5      3128.260 ±     588.839  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5    566175.424 ±  105232.671    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.083 ±       0.080  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5        15.077 ±      14.651    B/op
[info] IntArrayBenchmark.readPlay:·gc.count                                                   thrpt    5        46.000                counts
[info] IntArrayBenchmark.readPlay:·gc.time                                                    thrpt    5        47.000                    ms
[info] IntArrayBenchmark.writeCirce                                                           thrpt    5     23022.890 ±     820.506   ops/s
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1438.009 ±      51.532  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5     98288.019 ±       0.001    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1417.474 ±     583.094  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     96916.909 ±   41281.071    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.132 ±       0.236  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         9.045 ±      16.098    B/op
[info] IntArrayBenchmark.writeCirce:·gc.count                                                 thrpt    5        21.000                counts
[info] IntArrayBenchmark.writeCirce:·gc.time                                                  thrpt    5        20.000                    ms
[info] IntArrayBenchmark.writeJackson                                                         thrpt    5     99937.663 ±    2039.807   ops/s
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate                                          thrpt    5       805.999 ±      16.397  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                     thrpt    5     12692.324 ±       0.057    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                 thrpt    5       794.605 ±     708.948  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     12509.757 ±   11090.896    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.050 ±       0.146  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.786 ±       2.284    B/op
[info] IntArrayBenchmark.writeJackson:·gc.count                                               thrpt    5        12.000                counts
[info] IntArrayBenchmark.writeJackson:·gc.time                                                thrpt    5        12.000                    ms
[info] IntArrayBenchmark.writeJsoniter                                                        thrpt    5    112947.063 ±    7743.726   ops/s
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                         thrpt    5       481.160 ±      32.984  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                    thrpt    5      6704.004 ±       0.001    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5       466.407 ±     702.230  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5      6481.131 ±    9523.688    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5         0.029 ±       0.176  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.402 ±       2.426    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.count                                              thrpt    5         7.000                counts
[info] IntArrayBenchmark.writeJsoniter:·gc.time                                               thrpt    5         7.000                    ms
[info] IntArrayBenchmark.writeJsoniterPrealloc                                                thrpt    5    139794.552 ±    1704.871   ops/s
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5         0.003 ±       0.001    B/op
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                      thrpt    5           ≈ 0                counts
[info] IntArrayBenchmark.writePlay                                                            thrpt    5      3637.328 ±      43.944   ops/s
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate                                             thrpt    5      1595.085 ±      19.136  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate.norm                                        thrpt    5    690068.431 ±       1.575    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space                                    thrpt    5      1551.287 ±     705.280  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5    671213.802 ±  308716.284    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                thrpt    5         0.017 ±       0.067  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         7.211 ±      28.990    B/op
[info] IntArrayBenchmark.writePlay:·gc.count                                                  thrpt    5        23.000                counts
[info] IntArrayBenchmark.writePlay:·gc.time                                                   thrpt    5        23.000                    ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    731376.140 ±   57891.037   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2666.087 ±     209.744  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5736.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2652.511 ±     580.577  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      5709.594 ±    1397.306    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.108 ±       0.143  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.232 ±       0.298    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        39.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        37.000                    ms
[info] IterablesBenchmark.readJackson                                                         thrpt    5    678904.596 ±    9065.559   ops/s
[info] IterablesBenchmark.readJackson:·gc.alloc.rate                                          thrpt    5       790.358 ±      10.385  MB/sec
[info] IterablesBenchmark.readJackson:·gc.alloc.rate.norm                                     thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                 thrpt    5       787.992 ±     700.003  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1826.832 ±    1629.526    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.079 ±       0.119  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.183 ±       0.277    B/op
[info] IterablesBenchmark.readJackson:·gc.count                                               thrpt    5        12.000                counts
[info] IterablesBenchmark.readJackson:·gc.time                                                thrpt    5        12.000                    ms
[info] IterablesBenchmark.readJsoniter                                                        thrpt    5   3671276.403 ±   87447.351   ops/s
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate                                         thrpt    5      1530.455 ±      36.809  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                                    thrpt    5       656.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5      1556.975 ±     721.867  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5       667.522 ±     314.901    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.143  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.034 ±       0.062    B/op
[info] IterablesBenchmark.readJsoniter:·gc.count                                              thrpt    5        23.000                counts
[info] IterablesBenchmark.readJsoniter:·gc.time                                               thrpt    5        20.000                    ms
[info] IterablesBenchmark.readPlay                                                            thrpt    5    248848.443 ±    7966.499   ops/s
[info] IterablesBenchmark.readPlay:·gc.alloc.rate                                             thrpt    5      1731.884 ±      55.784  MB/sec
[info] IterablesBenchmark.readPlay:·gc.alloc.rate.norm                                        thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                    thrpt    5      1750.942 ±     588.313  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5     11070.939 ±    3597.885    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                thrpt    5         0.112 ±       0.156  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.712 ±       1.004    B/op
[info] IterablesBenchmark.readPlay:·gc.count                                                  thrpt    5        26.000                counts
[info] IterablesBenchmark.readPlay:·gc.time                                                   thrpt    5        29.000                    ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    916424.380 ±   49226.149   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      2208.382 ±     117.984  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3792.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2173.407 ±     719.727  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      3731.620 ±    1197.632    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.108 ±       0.088  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.186 ±       0.157    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        32.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] IterablesBenchmark.writeJackson                                                        thrpt    5   1829927.586 ±  180131.403   ops/s
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate                                         thrpt    5      1237.233 ±     121.692  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate.norm                                    thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                thrpt    5      1267.759 ±     573.016  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1091.806 ±     539.160    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.105  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.068 ±       0.091    B/op
[info] IterablesBenchmark.writeJackson:·gc.count                                              thrpt    5        19.000                counts
[info] IterablesBenchmark.writeJackson:·gc.time                                               thrpt    5        18.000                    ms
[info] IterablesBenchmark.writeJsoniter                                                       thrpt    5   6852043.867 ±  118204.531   ops/s
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate                                        thrpt    5       766.305 ±      13.479  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       802.218 ±     707.863  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5       184.296 ±     163.601    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0.058 ±       0.132  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.013 ±       0.030    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.count                                             thrpt    5        12.000                counts
[info] IterablesBenchmark.writeJsoniter:·gc.time                                              thrpt    5        11.000                    ms
[info] IterablesBenchmark.writePlay                                                           thrpt    5    527807.513 ±   10303.856   ops/s
[info] IterablesBenchmark.writePlay:·gc.alloc.rate                                            thrpt    5      1838.186 ±      35.481  MB/sec
[info] IterablesBenchmark.writePlay:·gc.alloc.rate.norm                                       thrpt    5      5480.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1823.176 ±     724.066  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5      5433.476 ±    2068.049    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0.125 ±       0.127  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.372 ±       0.378    B/op
[info] IterablesBenchmark.writePlay:·gc.count                                                 thrpt    5        27.000                counts
[info] IterablesBenchmark.writePlay:·gc.time                                                  thrpt    5        29.000                    ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    680908.831 ±   13936.767   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2419.515 ±      49.611  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5592.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2378.256 ±      19.805  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5496.754 ±     108.500    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.125 ±       0.160  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.288 ±       0.366    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        35.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        31.000                    ms
[info] MapsBenchmark.readJsoniter                                                             thrpt    5   4930165.843 ±  200459.473   ops/s
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate                                              thrpt    5      1228.067 ±      50.074  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                         thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5      1213.003 ±     706.609  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5       387.347 ±     229.687    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.087 ±       0.105  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.028 ±       0.032    B/op
[info] MapsBenchmark.readJsoniter:·gc.count                                                   thrpt    5        18.000                counts
[info] MapsBenchmark.readJsoniter:·gc.time                                                    thrpt    5        17.000                    ms
[info] MapsBenchmark.readPlay                                                                 thrpt    5    378650.958 ±    7972.688   ops/s
[info] MapsBenchmark.readPlay:·gc.alloc.rate                                                  thrpt    5      1955.907 ±      41.303  MB/sec
[info] MapsBenchmark.readPlay:·gc.alloc.rate.norm                                             thrpt    5      8128.001 ±       0.001    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                         thrpt    5      1960.276 ±     579.900  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      8147.223 ±    2465.557    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.112 ±       0.091  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.467 ±       0.382    B/op
[info] MapsBenchmark.readPlay:·gc.count                                                       thrpt    5        29.000                counts
[info] MapsBenchmark.readPlay:·gc.time                                                        thrpt    5        31.000                    ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    534101.747 ±    9662.682   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1460.703 ±      26.423  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4304.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      1415.482 ±     583.057  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4170.521 ±    1703.717    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.104 ±       0.127  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.307 ±       0.372    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        21.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        20.000                    ms
[info] MapsBenchmark.writeJsoniter                                                            thrpt    5   3200748.245 ±   17766.007   ops/s
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate                                             thrpt    5       488.119 ±       2.693  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                        thrpt    5       240.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                    thrpt    5       465.858 ±     700.694  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                               thrpt    5       229.103 ±     345.197    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                thrpt    5         0.042 ±       0.234  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.020 ±       0.115    B/op
[info] MapsBenchmark.writeJsoniter:·gc.count                                                  thrpt    5         7.000                counts
[info] MapsBenchmark.writeJsoniter:·gc.time                                                   thrpt    5         7.000                    ms
[info] MapsBenchmark.writePlay                                                                thrpt    5    352509.880 ±    8763.490   ops/s
[info] MapsBenchmark.writePlay:·gc.alloc.rate                                                 thrpt    5      1299.164 ±      32.404  MB/sec
[info] MapsBenchmark.writePlay:·gc.alloc.rate.norm                                            thrpt    5      5800.001 ±       0.001    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                        thrpt    5      1336.491 ±      42.753  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5967.051 ±     322.708    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.092 ±       0.091  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.408 ±       0.398    B/op
[info] MapsBenchmark.writePlay:·gc.count                                                      thrpt    5        20.000                counts
[info] MapsBenchmark.writePlay:·gc.time                                                       thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   1951071.115 ±   73174.066   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3154.139 ±     118.215  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2544.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      3198.240 ±     712.170  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      2579.606 ±     568.612    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.150 ±       0.119  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.121 ±       0.100    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        47.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readJackson                                                   thrpt    5    312231.767 ±   20418.053   ops/s
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate                                    thrpt    5       734.878 ±      48.070  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm                               thrpt    5      3704.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space                           thrpt    5       724.071 ±     573.195  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3653.956 ±    3002.295    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.207  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.336 ±       1.053    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.count                                         thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJackson:·gc.time                                          thrpt    5        11.000                    ms
[info] MissingReqFieldBenchmark.readJsoniter                                                  thrpt    5    676850.618 ±   28300.576   ops/s
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate                                   thrpt    5       612.504 ±      25.821  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm                              thrpt    5      1424.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       603.472 ±     576.307  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1402.661 ±    1335.346    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0.054 ±       0.217  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.126 ±       0.503    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.count                                        thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniter:·gc.time                                         thrpt    5         8.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   3752198.746 ±  146531.964   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      2231.852 ±      86.505  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       936.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5      2243.932 ±     714.768  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5       941.278 ±     309.485    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5         0.092 ±       0.209  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.038 ±       0.086    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        33.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        26.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   6667850.093 ±  321313.281   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       779.715 ±      37.386  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       184.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5       738.898 ±     581.015  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5       174.348 ±     136.095    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5         0.050 ±       0.185  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5         0.012 ±       0.043    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5        11.000                    ms
[info] MissingReqFieldBenchmark.readPlay                                                      thrpt    5    200406.198 ±    3319.474   ops/s
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate                                       thrpt    5      1669.907 ±      28.447  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm                                  thrpt    5     13112.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space                              thrpt    5      1681.180 ±      47.431  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5     13200.819 ±     485.423    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.088  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.686 ±       0.681    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.count                                            thrpt    5        25.000                counts
[info] MissingReqFieldBenchmark.readPlay:·gc.time                                             thrpt    5        27.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    744001.038 ±   25611.376   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2867.188 ±      99.302  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6064.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      2857.321 ±     718.905  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6041.618 ±    1384.588    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.129 ±       0.191  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.273 ±       0.401    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        42.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        37.000                    ms
[info] MutableIterablesBenchmark.readJsoniter                                                 thrpt    5   3560787.594 ±  149781.900   ops/s
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate                                  thrpt    5      2298.870 ±      96.701  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                             thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                         thrpt    5      2311.000 ±     577.953  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1020.878 ±     216.172    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                     thrpt    5         0.112 ±       0.201  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.050 ±       0.088    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.count                                       thrpt    5        34.000                counts
[info] MutableIterablesBenchmark.readJsoniter:·gc.time                                        thrpt    5        31.000                    ms
[info] MutableIterablesBenchmark.readPlay                                                     thrpt    5    260244.096 ±    9437.788   ops/s
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate                                      thrpt    5      1871.991 ±      67.904  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm                                 thrpt    5     11320.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                             thrpt    5      1889.537 ±     701.016  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                        thrpt    5     11421.954 ±    4016.597    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                         thrpt    5         0.100 ±       0.132  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.605 ±       0.816    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.count                                           thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.readPlay:·gc.time                                            thrpt    5        30.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    836250.198 ±   21814.877   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1942.687 ±      50.595  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3656.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1965.384 ±     574.453  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3698.077 ±    1040.924    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.100 ±       0.183  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.188 ±       0.341    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        29.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        25.000                    ms
[info] MutableIterablesBenchmark.writeJackson                                                 thrpt    5   1761574.511 ±  198932.503   ops/s
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate                                  thrpt    5      1011.998 ±     114.429  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm                             thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                         thrpt    5       993.303 ±      29.402  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                    thrpt    5       888.016 ±     119.482    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.105  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.070 ±       0.090    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.count                                       thrpt    5        15.000                counts
[info] MutableIterablesBenchmark.writeJackson:·gc.time                                        thrpt    5        15.000                    ms
[info] MutableIterablesBenchmark.writeJsoniter                                                thrpt    5   6254660.480 ±  184026.825   ops/s
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate                                 thrpt    5       476.951 ±      13.986  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                            thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                        thrpt    5       465.815 ±     702.051  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                   thrpt    5       117.200 ±     176.615    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                    thrpt    5         0.046 ±       0.230  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.011 ±       0.058    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.count                                      thrpt    5         7.000                counts
[info] MutableIterablesBenchmark.writeJsoniter:·gc.time                                       thrpt    5         7.000                    ms
[info] MutableIterablesBenchmark.writePlay                                                    thrpt    5    493743.374 ±   12240.365   ops/s
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate                                     thrpt    5      1709.399 ±      43.046  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm                                thrpt    5      5448.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                            thrpt    5      1684.590 ±      39.976  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                       thrpt    5      5369.242 ±     244.687    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                        thrpt    5         0.096 ±       0.072  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.305 ±       0.225    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.count                                          thrpt    5        25.000                counts
[info] MutableIterablesBenchmark.writePlay:·gc.time                                           thrpt    5        26.000                    ms
[info] MutableMapsBenchmark.readJsoniter                                                      thrpt    5   3221529.798 ±  137257.040   ops/s
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5      1523.112 ±      65.054  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5      1556.158 ±     712.804  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5       760.387 ±     356.259    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.112 ±       0.185  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.055 ±       0.089    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.count                                            thrpt    5        23.000                counts
[info] MutableMapsBenchmark.readJsoniter:·gc.time                                             thrpt    5        20.000                    ms
[info] MutableMapsBenchmark.readPlay                                                          thrpt    5    311898.415 ±    6723.834   ops/s
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate                                           thrpt    5      1661.656 ±      35.715  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm                                      thrpt    5      8384.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                  thrpt    5      1683.038 ±      43.521  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5      8492.062 ±     262.776    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                              thrpt    5         0.104 ±       0.057  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.525 ±       0.285    B/op
[info] MutableMapsBenchmark.readPlay:·gc.count                                                thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readPlay:·gc.time                                                 thrpt    5        28.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    525515.227 ±   14317.212   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1429.389 ±      38.171  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4280.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1482.714 ±     707.859  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5      4439.857 ±    2123.161    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.096 ±       0.166  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.287 ±       0.504    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        22.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        20.000                    ms
[info] MutableMapsBenchmark.writeJsoniter                                                     thrpt    5   3023854.915 ±   35896.136   ops/s
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5       568.767 ±       6.751  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5       599.588 ±     573.650  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5       312.103 ±     299.334    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0.042 ±       0.150  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.022 ±       0.078    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.count                                           thrpt    5         9.000                counts
[info] MutableMapsBenchmark.writeJsoniter:·gc.time                                            thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlay                                                         thrpt    5    360520.991 ±    8360.816   ops/s
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate                                          thrpt    5      1394.723 ±      32.560  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm                                     thrpt    5      6088.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                 thrpt    5      1405.731 ±     562.988  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5      6136.537 ±    2475.216    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±       0.146  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.418 ±       0.636    B/op
[info] MutableMapsBenchmark.writePlay:·gc.count                                               thrpt    5        21.000                counts
[info] MutableMapsBenchmark.writePlay:·gc.time                                                thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    699814.619 ±    5484.938   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2074.055 ±      16.394  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4664.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2102.216 ±     601.584  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4727.867 ±    1390.195    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.121 ±       0.143  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.272 ±       0.322    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.readJackson                                                        thrpt    5   1471042.172 ±   66047.314   ops/s
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5      1114.343 ±      49.678  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5      1132.233 ±     711.274  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1211.452 ±     768.377    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.108 ±       0.154  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.116 ±       0.170    B/op
[info] PrimitivesBenchmark.readJackson:·gc.count                                              thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJackson:·gc.time                                               thrpt    5        15.000                    ms
[info] PrimitivesBenchmark.readJsoniter                                                       thrpt    5   5436821.392 ±   65749.339   ops/s
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       165.825 ±       2.028  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       153.480 ±     539.504  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5        44.498 ±     156.418    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0.007 ±       0.052  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.002 ±       0.015    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.count                                             thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniter:·gc.time                                              thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.readPlay                                                           thrpt    5    236780.657 ±   12350.507   ops/s
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1629.922 ±      84.783  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5     10832.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1613.965 ±     566.880  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5     10728.596 ±    3867.346    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0.108 ±       0.105  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.718 ±       0.669    B/op
[info] PrimitivesBenchmark.readPlay:·gc.count                                                 thrpt    5        24.000                counts
[info] PrimitivesBenchmark.readPlay:·gc.time                                                  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    958592.787 ±   13547.120   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1647.044 ±      23.353  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2704.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1689.348 ±      30.909  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      2773.484 ±      66.476    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.104 ±       0.160  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.171 ±       0.262    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeJackson                                                       thrpt    5   2470682.428 ±   21641.329   ops/s
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5      1092.692 ±       9.538  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5      1065.353 ±     586.797  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5       678.643 ±     375.963    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.127  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.053 ±       0.080    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.count                                             thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJackson:·gc.time                                              thrpt    5        15.000                    ms
[info] PrimitivesBenchmark.writeJsoniter                                                      thrpt    5   6494842.855 ±  299978.325   ops/s
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       528.320 ±      24.166  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       466.655 ±     702.881  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5       113.011 ±     169.517    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.033 ±       0.244  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.008 ±       0.059    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.count                                            thrpt    5         7.000                counts
[info] PrimitivesBenchmark.writeJsoniter:·gc.time                                             thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.writeJsoniterPrealloc                                              thrpt    5   7172728.206 ±   83404.223   ops/s
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       218.783 ±       2.512  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5       169.009 ±     606.489  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5        37.110 ±     133.251    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5         0.313 ±       2.670  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.069 ±       0.588    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         3.000                counts
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.writePlay                                                          thrpt    5    312078.829 ±    9117.772   ops/s
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate                                           thrpt    5      1624.671 ±      47.164  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm                                      thrpt    5      8192.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                  thrpt    5      1613.902 ±     591.796  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5      8140.068 ±    3082.780    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                              thrpt    5         0.100 ±       0.036  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.504 ±       0.183    B/op
[info] PrimitivesBenchmark.writePlay:·gc.count                                                thrpt    5        24.000                counts
[info] PrimitivesBenchmark.writePlay:·gc.time                                                 thrpt    5        26.000                    ms
[info] StringBenchmark.readAsciiCirce                                                         thrpt    5    468612.888 ±   11153.344   ops/s
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate                                          thrpt    5      1834.343 ±      43.947  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm                                     thrpt    5      6160.001 ±       0.001    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1829.733 ±     717.130  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      6144.383 ±    2396.750    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.092 ±       0.185  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.307 ±       0.614    B/op
[info] StringBenchmark.readAsciiCirce:·gc.count                                               thrpt    5        27.000                counts
[info] StringBenchmark.readAsciiCirce:·gc.time                                                thrpt    5        23.000                    ms
[info] StringBenchmark.readAsciiJackson                                                       thrpt    5   1035505.760 ±   22834.549   ops/s
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate                                        thrpt    5      2168.973 ±      46.361  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm                                   thrpt    5      3296.000 ±       0.001    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space                               thrpt    5      2169.838 ±     732.613  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      3297.469 ±    1120.088    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.104 ±       0.057  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.158 ±       0.085    B/op
[info] StringBenchmark.readAsciiJackson:·gc.count                                             thrpt    5        32.000                counts
[info] StringBenchmark.readAsciiJackson:·gc.time                                              thrpt    5        29.000                    ms
[info] StringBenchmark.readAsciiJsoniter                                                      thrpt    5   1206842.941 ±   68730.638   ops/s
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate                                       thrpt    5      2030.931 ±     114.771  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm                                  thrpt    5      2648.000 ±       0.001    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5      2038.609 ±      15.612  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5      2658.471 ±     152.147    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.092 ±       0.091  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.120 ±       0.125    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.count                                            thrpt    5        30.000                counts
[info] StringBenchmark.readAsciiJsoniter:·gc.time                                             thrpt    5        24.000                    ms
[info] StringBenchmark.readNonAsciiCirce                                                      thrpt    5   1597194.247 ±   83847.841   ops/s
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate                                       thrpt    5      1956.706 ±     102.857  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm                                  thrpt    5      1928.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1967.201 ±     589.919  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1939.101 ±     616.121    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.100 ±       0.132  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.098 ±       0.127    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.count                                            thrpt    5        29.000                counts
[info] StringBenchmark.readNonAsciiCirce:·gc.time                                             thrpt    5        27.000                    ms
[info] StringBenchmark.readNonAsciiJackson                                                    thrpt    5   1250661.688 ±   38403.391   ops/s
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate                                     thrpt    5       718.444 ±      21.985  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm                                thrpt    5       904.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space                            thrpt    5       726.156 ±     567.165  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5       913.232 ±     698.351    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.058 ±       0.207  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.073 ±       0.260    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.count                                          thrpt    5        11.000                counts
[info] StringBenchmark.readNonAsciiJackson:·gc.time                                           thrpt    5        10.000                    ms
[info] StringBenchmark.readNonAsciiJsoniter                                                   thrpt    5   2189101.541 ±   19391.129   ops/s
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate                                    thrpt    5       356.098 ±       3.158  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm                               thrpt    5       256.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5       402.357 ±     576.421  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5       289.344 ±     416.073    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0.319 ±       2.434  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.230 ±       1.755    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.count                                         thrpt    5         6.000                counts
[info] StringBenchmark.readNonAsciiJsoniter:·gc.time                                          thrpt    5         6.000                    ms
[info] StringBenchmark.writeAsciiCirce                                                        thrpt    5    273893.019 ±   14075.310   ops/s
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate                                         thrpt    5      1398.100 ±      71.897  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm                                    thrpt    5      8032.002 ±       0.001    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1348.328 ±      24.311  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5      7747.317 ±     470.680    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.117 ±       0.108  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.669 ±       0.595    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.count                                              thrpt    5        20.000                counts
[info] StringBenchmark.writeAsciiCirce:·gc.time                                               thrpt    5        19.000                    ms
[info] StringBenchmark.writeAsciiJackson                                                      thrpt    5    803014.466 ±   31183.842   ops/s
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate                                       thrpt    5       812.421 ±      31.200  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm                                  thrpt    5      1592.001 ±       0.001    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space                              thrpt    5       794.461 ±     688.062  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1556.508 ±    1339.438    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.042 ±       0.080  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.082 ±       0.160    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.count                                            thrpt    5        12.000                counts
[info] StringBenchmark.writeAsciiJackson:·gc.time                                             thrpt    5        11.000                    ms
[info] StringBenchmark.writeAsciiJsoniter                                                     thrpt    5    942407.434 ±    7067.619   ops/s
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate                                      thrpt    5       795.287 ±       5.839  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm                                 thrpt    5      1328.000 ±       0.001    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5       803.430 ±     708.659  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1341.617 ±    1183.688    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.119  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.146 ±       0.199    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.count                                           thrpt    5        12.000                counts
[info] StringBenchmark.writeAsciiJsoniter:·gc.time                                            thrpt    5        11.000                    ms
[info] StringBenchmark.writeAsciiJsoniterPrealloc                                             thrpt    5   1182234.226 ±    9046.351   ops/s
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate                              thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5        ≈ 10⁻³                  B/op
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count                                   thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeAsciiPlay                                                         thrpt    5    915645.828 ±   10124.410   ops/s
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate                                          thrpt    5       977.492 ±      10.695  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm                                     thrpt    5      1680.000 ±       0.001    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space                                 thrpt    5      1003.093 ±      19.315  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1724.016 ±      42.170    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space                             thrpt    5         0.054 ±       0.122  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.093 ±       0.209    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.count                                               thrpt    5        15.000                counts
[info] StringBenchmark.writeAsciiPlay:·gc.time                                                thrpt    5        14.000                    ms
[info] StringBenchmark.writeNonAsciiCirce                                                     thrpt    5   1477081.931 ±   31232.621   ops/s
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate                                      thrpt    5       961.090 ±      20.417  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm                                 thrpt    5      1024.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space                             thrpt    5       936.402 ±     580.445  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5       997.765 ±     619.941    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.105  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.084 ±       0.111    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.count                                           thrpt    5        14.000                counts
[info] StringBenchmark.writeNonAsciiCirce:·gc.time                                            thrpt    5        13.000                    ms
[info] StringBenchmark.writeNonAsciiJackson                                                   thrpt    5   2915694.561 ±   45747.638   ops/s
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate                                    thrpt    5      1067.239 ±      16.621  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm                               thrpt    5       576.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space                           thrpt    5      1067.524 ±     596.045  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5       576.215 ±     323.970    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.096 ±       0.091  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.052 ±       0.050    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.count                                         thrpt    5        16.000                counts
[info] StringBenchmark.writeNonAsciiJackson:·gc.time                                          thrpt    5        14.000                    ms
[info] StringBenchmark.writeNonAsciiJsoniter                                                  thrpt    5   3278716.828 ±  172587.686   ops/s
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate                                   thrpt    5       650.060 ±      34.294  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm                              thrpt    5       312.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       667.560 ±       5.367  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5       320.453 ±      19.066    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.134  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.036 ±       0.063    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.count                                        thrpt    5        10.000                counts
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.time                                         thrpt    5         8.000                    ms
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc                                          thrpt    5   3492640.979 ±   39819.394   ops/s
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeNonAsciiPlay                                                      thrpt    5   2919135.205 ±  174879.581   ops/s
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate                                       thrpt    5      1231.815 ±      74.051  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm                                  thrpt    5       664.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space                              thrpt    5      1210.018 ±     716.445  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5       651.155 ±     350.242    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.215  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.047 ±       0.114    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.count                                            thrpt    5        18.000                counts
[info] StringBenchmark.writeNonAsciiPlay:·gc.time                                             thrpt    5        16.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     11251.041 ±     759.195   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1594.917 ±     107.775  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    223083.419 ±      94.126    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1618.695 ±     578.588  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    226663.202 ±   90783.734    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.096 ±       0.235  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        13.444 ±      32.458    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        24.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.readJackson                                                        thrpt    5     17009.916 ±     573.486   ops/s
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       268.841 ±       8.948  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     24871.357 ±      31.351    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5       296.320 ±     142.297  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     27414.308 ±   13165.503    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.571 ±       4.823  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        53.379 ±     451.306    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.count                                              thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.readJackson:·gc.time                                               thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.readJsoniter                                                       thrpt    5     38712.672 ±     419.734   ops/s
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       430.211 ±       4.555  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5     17488.011 ±       0.001    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       465.754 ±     703.027  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5     18930.975 ±   28551.747    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0.357 ±       2.812  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        14.483 ±     113.863    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.count                                             thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniter:·gc.time                                              thrpt    5         8.000                    ms
[info] TwitterAPIBenchmark.readPlay                                                           thrpt    5      3659.515 ±     293.035   ops/s
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1180.729 ±      93.739  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    507688.120 ±       0.023    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1204.885 ±     705.424  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5    518001.664 ±  298281.407    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0.008 ±       0.044  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         3.607 ±      19.023    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.count                                                 thrpt    5        18.000                counts
[info] TwitterAPIBenchmark.readPlay:·gc.time                                                  thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.writeJackson                                                       thrpt    5     60092.651 ±     850.735   ops/s
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       768.455 ±      10.930  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     20124.003 ±       0.070    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5       720.776 ±     566.053  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     18874.232 ±   14781.062    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.042 ±       0.113  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.089 ±       2.966    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.count                                             thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJackson:·gc.time                                              thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.writeJsoniter                                                      thrpt    5     83564.966 ±    2515.589   ops/s
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       548.002 ±      16.469  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       532.370 ±     701.641  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5     10037.193 ±   13353.870    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0.042 ±       0.204  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.790 ±       3.897    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniter:·gc.time                                             thrpt    5         8.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterPrealloc                                              thrpt    5     89952.239 ±    6580.169   ops/s
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5        12.804 ±       0.938  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5       224.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[success] Total time: 2133 s, completed Jan 10, 2018 7:38:42 PM
